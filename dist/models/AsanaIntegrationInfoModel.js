/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { exists } from '../runtime';
import { AsanaProjectFromJSON, AsanaProjectToJSON, } from './AsanaProject';
import { AsanaTagFromJSON, AsanaTagToJSON, } from './AsanaTag';
import { AsanaUserFromJSON, AsanaUserToJSON, } from './AsanaUser';
import { AsanaWorkspaceFromJSON, AsanaWorkspaceToJSON, } from './AsanaWorkspace';
import { IntegrationCustomFieldVmFromJSON, IntegrationCustomFieldVmToJSON, } from './IntegrationCustomFieldVm';
import { IntegrationWizardResultModelFromJSON, IntegrationWizardResultModelToJSON, } from './IntegrationWizardResultModel';
/**
 * @export
 */
export const AsanaIntegrationInfoModelTypeEnum = {
    Jira: 'Jira',
    GitHub: 'GitHub',
    Tfs: 'TFS',
    FogBugz: 'FogBugz',
    ServiceNow: 'ServiceNow',
    Slack: 'Slack',
    GitLab: 'GitLab',
    Bitbucket: 'Bitbucket',
    Unfuddle: 'Unfuddle',
    Zapier: 'Zapier',
    AzureDevOps: 'AzureDevOps',
    Redmine: 'Redmine',
    Bugzilla: 'Bugzilla',
    Kafka: 'Kafka',
    PagerDuty: 'PagerDuty',
    MicrosoftTeams: 'MicrosoftTeams',
    Clubhouse: 'Clubhouse',
    Trello: 'Trello',
    Asana: 'Asana',
    Webhook: 'Webhook',
    Kenna: 'Kenna',
    Freshservice: 'Freshservice',
    YouTrack: 'YouTrack',
    NetsparkerEnterprise: 'NetsparkerEnterprise',
    Splunk: 'Splunk',
    Mattermost: 'Mattermost',
    Hashicorp: 'Hashicorp',
    PivotalTracker: 'PivotalTracker',
    CyberArk: 'CyberArk',
    DefectDojo: 'DefectDojo',
    JazzTeam: 'JazzTeam',
    AzureKeyVault: 'AzureKeyVault',
    ServiceNowVrm: 'ServiceNowVRM'
};
/**
 * @export
 */
export const AsanaIntegrationInfoModelTemplateTypeEnum = {
    Standard: 'Standard',
    Detailed: 'Detailed'
};
/**
 * Check if a given object implements the AsanaIntegrationInfoModel interface.
 */
export function instanceOfAsanaIntegrationInfoModel(value) {
    let isInstance = true;
    isInstance = isInstance && "accessToken" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "dueDays" in value;
    isInstance = isInstance && "titleFormat" in value;
    return isInstance;
}
export function AsanaIntegrationInfoModelFromJSON(json) {
    return AsanaIntegrationInfoModelFromJSONTyped(json, false);
}
export function AsanaIntegrationInfoModelFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'accessToken': json['AccessToken'],
        'projectId': json['ProjectId'],
        'workspaceId': !exists(json, 'WorkspaceId') ? undefined : json['WorkspaceId'],
        'assignee': !exists(json, 'Assignee') ? undefined : json['Assignee'],
        'followerIds': !exists(json, 'FollowerIds') ? undefined : json['FollowerIds'],
        'dueDays': json['DueDays'],
        'tagIds': !exists(json, 'TagIds') ? undefined : json['TagIds'],
        'workspaceList': !exists(json, 'WorkspaceList') ? undefined : (json['WorkspaceList'].map(AsanaWorkspaceFromJSON)),
        'projectList': !exists(json, 'ProjectList') ? undefined : (json['ProjectList'].map(AsanaProjectFromJSON)),
        'assigneeList': !exists(json, 'AssigneeList') ? undefined : (json['AssigneeList'].map(AsanaUserFromJSON)),
        'followerList': !exists(json, 'FollowerList') ? undefined : (json['FollowerList'].map(AsanaUserFromJSON)),
        'tagList': !exists(json, 'TagList') ? undefined : (json['TagList'].map(AsanaTagFromJSON)),
        'followersSelected': !exists(json, 'FollowersSelected') ? undefined : json['FollowersSelected'],
        'tagsSelected': !exists(json, 'TagsSelected') ? undefined : json['TagsSelected'],
        'integrationWizardResultModel': !exists(json, 'IntegrationWizardResultModel') ? undefined : IntegrationWizardResultModelFromJSON(json['IntegrationWizardResultModel']),
        'type': !exists(json, 'Type') ? undefined : json['Type'],
        'genericErrorMessage': !exists(json, 'GenericErrorMessage') ? undefined : json['GenericErrorMessage'],
        'identifier': !exists(json, 'Identifier') ? undefined : json['Identifier'],
        'testMessageBody': !exists(json, 'TestMessageBody') ? undefined : json['TestMessageBody'],
        'testMessageTitle': !exists(json, 'TestMessageTitle') ? undefined : json['TestMessageTitle'],
        'webhookUrl': !exists(json, 'WebhookUrl') ? undefined : json['WebhookUrl'],
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'integrationVersion': !exists(json, 'IntegrationVersion') ? undefined : json['IntegrationVersion'],
        'accountID': !exists(json, 'AccountID') ? undefined : json['AccountID'],
        'customFields': !exists(json, 'CustomFields') ? undefined : (json['CustomFields'].map(IntegrationCustomFieldVmFromJSON)),
        'templateType': !exists(json, 'TemplateType') ? undefined : json['TemplateType'],
        'reopenStatus': !exists(json, 'ReopenStatus') ? undefined : json['ReopenStatus'],
        'resolvedStatus': !exists(json, 'ResolvedStatus') ? undefined : json['ResolvedStatus'],
        'titleFormat': json['TitleFormat'],
    };
}
export function AsanaIntegrationInfoModelToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'AccessToken': value.accessToken,
        'ProjectId': value.projectId,
        'WorkspaceId': value.workspaceId,
        'Assignee': value.assignee,
        'FollowerIds': value.followerIds,
        'DueDays': value.dueDays,
        'TagIds': value.tagIds,
        'WorkspaceList': value.workspaceList === undefined ? undefined : (value.workspaceList.map(AsanaWorkspaceToJSON)),
        'ProjectList': value.projectList === undefined ? undefined : (value.projectList.map(AsanaProjectToJSON)),
        'AssigneeList': value.assigneeList === undefined ? undefined : (value.assigneeList.map(AsanaUserToJSON)),
        'FollowerList': value.followerList === undefined ? undefined : (value.followerList.map(AsanaUserToJSON)),
        'TagList': value.tagList === undefined ? undefined : (value.tagList.map(AsanaTagToJSON)),
        'IntegrationWizardResultModel': IntegrationWizardResultModelToJSON(value.integrationWizardResultModel),
        'Name': value.name,
        'IntegrationVersion': value.integrationVersion,
        'AccountID': value.accountID,
        'CustomFields': value.customFields === undefined ? undefined : (value.customFields.map(IntegrationCustomFieldVmToJSON)),
        'TemplateType': value.templateType,
        'ReopenStatus': value.reopenStatus,
        'ResolvedStatus': value.resolvedStatus,
        'TitleFormat': value.titleFormat,
    };
}
//# sourceMappingURL=AsanaIntegrationInfoModel.js.map