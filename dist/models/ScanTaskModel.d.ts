/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AdditionalWebsiteModel } from './AdditionalWebsiteModel';
import type { BusinessLogicRecorderSettingModel } from './BusinessLogicRecorderSettingModel';
import type { PciScanTaskViewModel } from './PciScanTaskViewModel';
import type { ReducedScanTaskProfile } from './ReducedScanTaskProfile';
import type { ScanTimeWindowModel } from './ScanTimeWindowModel';
import type { UrlRewriteExcludedPathModel } from './UrlRewriteExcludedPathModel';
import type { UrlRewriteRuleModel } from './UrlRewriteRuleModel';
import type { VcsCommitInfo } from './VcsCommitInfo';
/**
 * Represents a model for carrying {Invicti.Cloud.Core.Models.ScanTask} content.
 * @export
 * @interface ScanTaskModel
 */
export interface ScanTaskModel {
    /**
     * Gets or sets the additional websites to scan.
     * @type {Array<AdditionalWebsiteModel>}
     * @memberof ScanTaskModel
     */
    additionalWebsites?: Array<AdditionalWebsiteModel>;
    /**
     * Gets or sets the agent id.
     * @type {string}
     * @memberof ScanTaskModel
     */
    agentId?: string;
    /**
     * Gets or sets the agent name.
     * @type {string}
     * @memberof ScanTaskModel
     */
    agentName?: string;
    /**
     * Gets or sets the cookies.
     * @type {string}
     * @memberof ScanTaskModel
     */
    cookies?: string;
    /**
     * Gets or sets a value indicating whether parallel attacker is enabled.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    crawlAndAttack?: boolean;
    /**
     * Gets or sets deleted date.
     * @type {Date}
     * @memberof ScanTaskModel
     */
    deletedOn?: Date;
    /**
     * Gets or sets a value indicating whether Heuristic URL Rewrite support is enabled together with custom URL Rewrite
     * support.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    enableHeuristicChecksInCustomUrlRewrite?: boolean;
    /**
     * Gets or sets the excluded links.
     * @type {string}
     * @memberof ScanTaskModel
     */
    excludedLinks?: string;
    /**
     * Gets or sets a value indicating whether links should be excluded/included.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    excludeLinks?: boolean;
    /**
     * Gets or sets the disallowed HTTP methods.
     * @type {string}
     * @memberof ScanTaskModel
     */
    disallowedHttpMethods?: string;
    /**
     * Gets or sets a value indicating whether automatic crawling is enabled.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    findAndFollowNewLinks?: boolean;
    /**
     * Gets or sets the imported links.
     * @type {string}
     * @memberof ScanTaskModel
     */
    importedLinks?: string;
    /**
     * Gets or sets the all imported links which might be added via manually or via importing a file.
     * This property is used for status/reports pages.
     * @type {string}
     * @memberof ScanTaskModel
     */
    allImportedLinks?: string;
    /**
     * Gets the desktop scan identifier.
     * @type {string}
     * @memberof ScanTaskModel
     */
    desktopScanId?: string;
    /**
     * Gets or sets initiated date in user's preferred format.
     * @type {string}
     * @memberof ScanTaskModel
     */
    initiatedTime?: string;
    /**
     * Gets or sets the initiated date in user's preferred format.
     * @type {string}
     * @memberof ScanTaskModel
     */
    initiatedDate?: string;
    /**
     * Gets or sets the initiated date.
     * @type {Date}
     * @memberof ScanTaskModel
     */
    initiatedAt?: Date;
    /**
     * Gets or sets the root path maximum dynamic signatures for heuristic URL Rewrite detection.
     * @type {number}
     * @memberof ScanTaskModel
     */
    maxDynamicSignatures?: number;
    /**
     * Gets or sets the maximum duration of the scan in hours.
     * @type {number}
     * @memberof ScanTaskModel
     */
    maxScanDuration?: number;
    /**
     * Gets or sets the duration
     * @type {string}
     * @memberof ScanTaskModel
     */
    duration?: string;
    /**
     * Gets or sets the description of the policy.
     * @type {string}
     * @memberof ScanTaskModel
     */
    policyDescription?: string;
    /**
     * Gets or sets the foreign key reference to the related Policy instance.
     * @type {string}
     * @memberof ScanTaskModel
     */
    policyId?: string;
    /**
     * Gets or sets the foreign key reference to the related Policy User instance.
     * @type {string}
     * @memberof ScanTaskModel
     */
    policyUserId?: string;
    /**
     * Gets or sets the foreign key reference to the related Policy IsDefault instance.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    policyIsDefault?: boolean;
    /**
     * Gets or sets the foreign key reference to the related Policy IsShared instance.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    policyIsShared?: boolean;
    /**
     * Gets or sets the name of the policy.
     * @type {string}
     * @memberof ScanTaskModel
     */
    policyName?: string;
    /**
     * Gets or sets the foreign key reference to the related Authentication Profile instance.
     * @type {string}
     * @memberof ScanTaskModel
     */
    authenticationProfileId?: string;
    /**
     * Gets or sets the the authentication profile option.
     * @type {string}
     * @memberof ScanTaskModel
     */
    authenticationProfileOption?: ScanTaskModelAuthenticationProfileOptionEnum;
    /**
     * Gets or sets the description of the report policy.
     * @type {string}
     * @memberof ScanTaskModel
     */
    reportPolicyDescription?: string;
    /**
     * Gets or sets the foreign key reference to the related {Invicti.Cloud.Core.Models.ReportPolicySetting} instance.
     * @type {string}
     * @memberof ScanTaskModel
     */
    reportPolicyId?: string;
    /**
     * Gets or sets the foreign key reference to the related {Invicti.Cloud.Core.Models.ReportPolicySetting} User instance.
     * @type {string}
     * @memberof ScanTaskModel
     */
    reportPolicyUserId?: string;
    /**
     * Gets or sets the foreign key reference to the related {Invicti.Cloud.Core.Models.ReportPolicySetting} IsDefault instance.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    reportPolicyIsDefault?: boolean;
    /**
     * Gets or sets the foreign key reference to the related {Invicti.Cloud.Core.Models.ReportPolicySetting} IsDefault instance.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    reportPolicyIsShared?: boolean;
    /**
     * Gets or sets the name of the report policy.
     * @type {string}
     * @memberof ScanTaskModel
     */
    reportPolicyName?: string;
    /**
     * Gets or sets the scan scope.
     * @type {string}
     * @memberof ScanTaskModel
     */
    scope?: ScanTaskModelScopeEnum;
    /**
     * Gets or sets the sub path maximum dynamic signatures for heuristic URL Rewrite detection.
     * @type {number}
     * @memberof ScanTaskModel
     */
    subPathMaxDynamicSignatures?: number;
    /**
     * Gets or sets target path.
     * @type {string}
     * @memberof ScanTaskModel
     */
    targetPath?: string;
    /**
     * Gets or sets TargetUrl.
     * @type {string}
     * @memberof ScanTaskModel
     */
    targetUrl?: string;
    /**
     * Gets or sets the target URL root.
     * @type {string}
     * @memberof ScanTaskModel
     */
    targetUrlRoot?: string;
    /**
     *
     * @type {ScanTimeWindowModel}
     * @memberof ScanTaskModel
     */
    timeWindow?: ScanTimeWindowModel;
    /**
     * Gets or sets the total vulnerability count without information vulnerabilities.
     * @type {number}
     * @memberof ScanTaskModel
     */
    totalVulnerabilityCount?: number;
    /**
     * Gets or sets the extensions that will be analyzed for heuristic URL Rewrite detection.
     * @type {string}
     * @memberof ScanTaskModel
     */
    urlRewriteAnalyzableExtensions?: string;
    /**
     * Gets or sets the block separators for heuristic URL Rewrite detection.
     * @type {string}
     * @memberof ScanTaskModel
     */
    urlRewriteBlockSeparators?: string;
    /**
     * Gets or sets the URL Rewrite mode.
     * @type {string}
     * @memberof ScanTaskModel
     */
    urlRewriteMode?: ScanTaskModelUrlRewriteModeEnum;
    /**
     * Gets or sets the URL Rewrite rules.
     * @type {Array<UrlRewriteRuleModel>}
     * @memberof ScanTaskModel
     */
    urlRewriteRules?: Array<UrlRewriteRuleModel>;
    /**
     * Gets or sets the URL rewrite excluded links.
     * @type {Array<UrlRewriteExcludedPathModel>}
     * @memberof ScanTaskModel
     */
    urlRewriteExcludedLinks?: Array<UrlRewriteExcludedPathModel>;
    /**
     * Gets or sets the user identifier.
     * @type {string}
     * @memberof ScanTaskModel
     */
    userId?: string;
    /**
     *
     * @type {VcsCommitInfo}
     * @memberof ScanTaskModel
     */
    vcsCommitInfo?: VcsCommitInfo;
    /**
     * Gets or sets the name of the website.
     * @type {string}
     * @memberof ScanTaskModel
     */
    websiteName?: string;
    /**
     * Gets or sets the website URL.
     * @type {string}
     * @memberof ScanTaskModel
     */
    websiteUrl?: string;
    /**
     * Gets or sets the description of the website.
     * @type {string}
     * @memberof ScanTaskModel
     */
    websiteDescription?: string;
    /**
     * Gets or sets the description of the website protocol.
     * @type {string}
     * @memberof ScanTaskModel
     */
    websiteProtocol?: ScanTaskModelWebsiteProtocolEnum;
    /**
     * Determines whether if the website is deleted.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    websiteIsDeleted?: boolean;
    /**
     * gets or sets is latest completed full scan task of website
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    isWebsiteLatestCompletedFullScanTask?: boolean;
    /**
     * Gets or sets the pci scan task is enabled.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    enablePciScanTask?: boolean;
    /**
     *
     * @type {PciScanTaskViewModel}
     * @memberof ScanTaskModel
     */
    pciScanTask?: PciScanTaskViewModel;
    /**
     * Gets or sets the user's name.
     * @type {string}
     * @memberof ScanTaskModel
     */
    userName?: string;
    /**
     * Determines whether if the scan task model has initiated queued scan.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    queuedScanTaskExist?: boolean;
    /**
     * Gets or sets the scan task profile id
     * @type {string}
     * @memberof ScanTaskModel
     */
    scanTaskProfileId?: string;
    /**
     *
     * @type {ReducedScanTaskProfile}
     * @memberof ScanTaskModel
     */
    scanTaskProfile?: ReducedScanTaskProfile;
    /**
     * The group ids of website in it
     * @type {Array<string>}
     * @memberof ScanTaskModel
     */
    websiteGroupIds?: Array<string>;
    /**
     * Gets or sets the scan task launch setting comments
     * @type {string}
     * @memberof ScanTaskModel
     */
    comments?: string;
    /**
     *
     * @type {BusinessLogicRecorderSettingModel}
     * @memberof ScanTaskModel
     */
    businessLogicRecorderSetting?: BusinessLogicRecorderSettingModel;
    /**
     * Gets or sets the scan task launch setting comments
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    scanProfileChanged?: boolean;
    /**
     * Gets or sets the number of steps (HTTP requests) completed thus far.
     * @type {number}
     * @memberof ScanTaskModel
     */
    completedSteps?: number;
    /**
     * Gets or sets the estimated launch time in minutes for queued scans.
     * @type {number}
     * @memberof ScanTaskModel
     */
    estimatedLaunchTime?: number;
    /**
     * Gets or sets the estimated total number of steps (HTTP requests) that this scan will undertake.
     * @type {number}
     * @memberof ScanTaskModel
     */
    estimatedSteps?: number;
    /**
     * Gets or sets FailureReason
     * @type {string}
     * @memberof ScanTaskModel
     */
    failureReason?: ScanTaskModelFailureReasonEnum;
    /**
     * Gets the failure reason description.
     * @type {string}
     * @memberof ScanTaskModel
     */
    failureReasonDescription?: string;
    /**
     * Gets the failure reason string.
     * @type {string}
     * @memberof ScanTaskModel
     */
    readonly failureReasonString?: string;
    /**
     * Gets or sets the global threat level.
     * @type {string}
     * @memberof ScanTaskModel
     */
    globalThreatLevel?: ScanTaskModelGlobalThreatLevelEnum;
    /**
     * Gets the global vulnerability critical count.
     * @type {number}
     * @memberof ScanTaskModel
     */
    globalVulnerabilityCriticalCount?: number;
    /**
     * Gets the global vulnerability high count.
     * @type {number}
     * @memberof ScanTaskModel
     */
    globalVulnerabilityHighCount?: number;
    /**
     * Gets the global vulnerability information count.
     * @type {number}
     * @memberof ScanTaskModel
     */
    globalVulnerabilityInfoCount?: number;
    /**
     * Gets the global vulnerability information count.
     * @type {number}
     * @memberof ScanTaskModel
     */
    globalVulnerabilityBestPracticeCount?: number;
    /**
     * Gets the global vulnerability low count.
     * @type {number}
     * @memberof ScanTaskModel
     */
    globalVulnerabilityLowCount?: number;
    /**
     * Gets the global vulnerability medium count.
     * @type {number}
     * @memberof ScanTaskModel
     */
    globalVulnerabilityMediumCount?: number;
    /**
     * Gets or sets Id.
     * @type {string}
     * @memberof ScanTaskModel
     */
    id?: string;
    /**
     * Gets a value indicating whether scan is completed  with any state.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    readonly isCompleted?: boolean;
    /**
     * Gets the completed percentage.
     * @type {number}
     * @memberof ScanTaskModel
     */
    readonly percentage?: number;
    /**
     * Gets or sets the Phase.
     * @type {string}
     * @memberof ScanTaskModel
     */
    phase?: ScanTaskModelPhaseEnum;
    /**
     * Gets or sets the scan group identifier.
     * @type {string}
     * @memberof ScanTaskModel
     */
    scanTaskGroupId?: string;
    /**
     * Gets or sets the type of the scan.
     * @type {string}
     * @memberof ScanTaskModel
     */
    scanType?: ScanTaskModelScanTypeEnum;
    /**
     * Gets or sets the scheduled scan identifier.
     * @type {string}
     * @memberof ScanTaskModel
     */
    scheduledScanId?: string;
    /**
     * Gets or sets State.
     * @type {string}
     * @memberof ScanTaskModel
     */
    state?: ScanTaskModelStateEnum;
    /**
     * Gets or sets the date and time at which this task state was last changed.
     * @type {Date}
     * @memberof ScanTaskModel
     */
    stateChanged?: Date;
    /**
     * Gets or sets the threat level.
     * @type {string}
     * @memberof ScanTaskModel
     */
    threatLevel?: ScanTaskModelThreatLevelEnum;
    /**
     * Gets or sets the count of vulnerabilities with critical level severity.
     * @type {number}
     * @memberof ScanTaskModel
     */
    vulnerabilityCriticalCount?: number;
    /**
     * Gets or sets the count of vulnerabilities with high level severity.
     * @type {number}
     * @memberof ScanTaskModel
     */
    vulnerabilityHighCount?: number;
    /**
     * Gets or sets the count of vulnerabilities with information level severity.
     * @type {number}
     * @memberof ScanTaskModel
     */
    vulnerabilityInfoCount?: number;
    /**
     * Gets or sets the count of vulnerabilities with best practice level severity.
     * @type {number}
     * @memberof ScanTaskModel
     */
    vulnerabilityBestPracticeCount?: number;
    /**
     * Gets or sets the count of vulnerabilities with low level severity.
     * @type {number}
     * @memberof ScanTaskModel
     */
    vulnerabilityLowCount?: number;
    /**
     * Gets or sets the count of vulnerabilities with medium level severity.
     * @type {number}
     * @memberof ScanTaskModel
     */
    vulnerabilityMediumCount?: number;
    /**
     * Gets the website identifier.
     * @type {string}
     * @memberof ScanTaskModel
     */
    websiteId?: string;
    /**
     * Date and time at which this task was initiated.
     * @type {Date}
     * @memberof ScanTaskModel
     */
    initiated?: Date;
    /**
     *
     * @type {Array<string>}
     * @memberof ScanTaskModel
     */
    tags?: Array<string>;
}
/**
 * @export
 */
export declare const ScanTaskModelAuthenticationProfileOptionEnum: {
    readonly DontUse: "DontUse";
    readonly UseMatchedProfile: "UseMatchedProfile";
    readonly SelectedProfile: "SelectedProfile";
};
export type ScanTaskModelAuthenticationProfileOptionEnum = typeof ScanTaskModelAuthenticationProfileOptionEnum[keyof typeof ScanTaskModelAuthenticationProfileOptionEnum];
/**
 * @export
 */
export declare const ScanTaskModelScopeEnum: {
    readonly EnteredPathAndBelow: "EnteredPathAndBelow";
    readonly OnlyEnteredUrl: "OnlyEnteredUrl";
    readonly WholeDomain: "WholeDomain";
};
export type ScanTaskModelScopeEnum = typeof ScanTaskModelScopeEnum[keyof typeof ScanTaskModelScopeEnum];
/**
 * @export
 */
export declare const ScanTaskModelUrlRewriteModeEnum: {
    readonly None: "None";
    readonly Heuristic: "Heuristic";
    readonly Custom: "Custom";
};
export type ScanTaskModelUrlRewriteModeEnum = typeof ScanTaskModelUrlRewriteModeEnum[keyof typeof ScanTaskModelUrlRewriteModeEnum];
/**
 * @export
 */
export declare const ScanTaskModelWebsiteProtocolEnum: {
    readonly Http: "Http";
    readonly Https: "Https";
};
export type ScanTaskModelWebsiteProtocolEnum = typeof ScanTaskModelWebsiteProtocolEnum[keyof typeof ScanTaskModelWebsiteProtocolEnum];
/**
 * @export
 */
export declare const ScanTaskModelFailureReasonEnum: {
    readonly None: "None";
    readonly Request: "Request";
    readonly HeadRequest: "HeadRequest";
    readonly RedirectDetected: "RedirectDetected";
    readonly TimeoutDetected: "TimeoutDetected";
    readonly MaxLogoutExceeded: "MaxLogoutExceeded";
    readonly RequestFailed: "RequestFailed";
    readonly Response: "Response";
    readonly CrawlerRequest: "CrawlerRequest";
    readonly AttackerRequest: "AttackerRequest";
    readonly ReCrawlerRequest: "ReCrawlerRequest";
    readonly Finished: "Finished";
    readonly LinkNotFound: "LinkNotFound";
    readonly RecalculateAttackPossibilities: "RecalculateAttackPossibilities";
    readonly PhaseCrawlStarted: "PhaseCrawlStarted";
    readonly PhaseAttackStarted: "PhaseAttackStarted";
    readonly PhaseReCrawlStarted: "PhaseReCrawlStarted";
    readonly CrawlerPossibility: "CrawlerPossibility";
    readonly ReCrawlerPossibilities: "ReCrawlerPossibilities";
    readonly HostUnavailable: "HostUnavailable";
    readonly NameResolutionFailure: "NameResolutionFailure";
    readonly ProxyFailure: "ProxyFailure";
    readonly OutOfDiskSpace: "OutOfDiskSpace";
    readonly ProxyAuthenticationRequired: "ProxyAuthenticationRequired";
    readonly OAuth2EndpointError: "OAuth2EndpointError";
    readonly TargetLinkTimeoutDetected: "TargetLinkTimeoutDetected";
    readonly LoginFailed: "LoginFailed";
    readonly ScanTargetNotReachable: "ScanTargetNotReachable";
    readonly ScanPolicyNotFound: "ScanPolicyNotFound";
    readonly ReportPolicyNotFound: "ReportPolicyNotFound";
    readonly SecurityProtocolTypeNotSupported: "SecurityProtocolTypeNotSupported";
    readonly UnableToLoadScanSession: "UnableToLoadScanSession";
    readonly AgentNotAvailable: "AgentNotAvailable";
    readonly ScanNotAllowed: "ScanNotAllowed";
    readonly UnableToFindAutoSaveNdb: "UnableToFindAutoSaveNdb";
    readonly ErrorOccurredOnScanFailed: "ErrorOccurredOnScanFailed";
    readonly ErrorOccurredOnPause: "ErrorOccurredOnPause";
    readonly ErrorOccurredOnCancel: "ErrorOccurredOnCancel";
    readonly ErrorOccurredOnScanCompleted: "ErrorOccurredOnScanCompleted";
    readonly SevenZipNotFoundOrInstalled: "SevenZipNotFoundOrInstalled";
    readonly ErrorOccurredOnLaunchScan: "ErrorOccurredOnLaunchScan";
    readonly InvalidHeader: "InvalidHeader";
    readonly ErrorOccurredOnPreScanValidation: "ErrorOccurredOnPreScanValidation";
    readonly RawScanFileExpired: "RawScanFileExpired";
    readonly SecretsAndEncryptionIntegration: "SecretsAndEncryptionIntegration";
    readonly ArchiveMethodUnavailable: "ArchiveMethodUnavailable";
};
export type ScanTaskModelFailureReasonEnum = typeof ScanTaskModelFailureReasonEnum[keyof typeof ScanTaskModelFailureReasonEnum];
/**
 * @export
 */
export declare const ScanTaskModelGlobalThreatLevelEnum: {
    readonly Unknown: "Unknown";
    readonly Secure: "Secure";
    readonly NeedsAttention: "NeedsAttention";
    readonly Insecure: "Insecure";
    readonly Critical: "Critical";
};
export type ScanTaskModelGlobalThreatLevelEnum = typeof ScanTaskModelGlobalThreatLevelEnum[keyof typeof ScanTaskModelGlobalThreatLevelEnum];
/**
 * @export
 */
export declare const ScanTaskModelPhaseEnum: {
    readonly Pending: "Pending";
    readonly Crawling: "Crawling";
    readonly CrawlingAndAttacking: "CrawlingAndAttacking";
    readonly Attacking: "Attacking";
    readonly ReCrawling: "ReCrawling";
    readonly Complete: "Complete";
};
export type ScanTaskModelPhaseEnum = typeof ScanTaskModelPhaseEnum[keyof typeof ScanTaskModelPhaseEnum];
/**
 * @export
 */
export declare const ScanTaskModelScanTypeEnum: {
    readonly Full: "Full";
    readonly Retest: "Retest";
    readonly Incremental: "Incremental";
};
export type ScanTaskModelScanTypeEnum = typeof ScanTaskModelScanTypeEnum[keyof typeof ScanTaskModelScanTypeEnum];
/**
 * @export
 */
export declare const ScanTaskModelStateEnum: {
    readonly Queued: "Queued";
    readonly Scanning: "Scanning";
    readonly Archiving: "Archiving";
    readonly Complete: "Complete";
    readonly Failed: "Failed";
    readonly Cancelled: "Cancelled";
    readonly Delayed: "Delayed";
    readonly Pausing: "Pausing";
    readonly Paused: "Paused";
    readonly Resuming: "Resuming";
    readonly AsyncArchiving: "AsyncArchiving";
};
export type ScanTaskModelStateEnum = typeof ScanTaskModelStateEnum[keyof typeof ScanTaskModelStateEnum];
/**
 * @export
 */
export declare const ScanTaskModelThreatLevelEnum: {
    readonly Unknown: "Unknown";
    readonly Secure: "Secure";
    readonly NeedsAttention: "NeedsAttention";
    readonly Insecure: "Insecure";
    readonly Critical: "Critical";
};
export type ScanTaskModelThreatLevelEnum = typeof ScanTaskModelThreatLevelEnum[keyof typeof ScanTaskModelThreatLevelEnum];
/**
 * Check if a given object implements the ScanTaskModel interface.
 */
export declare function instanceOfScanTaskModel(value: object): boolean;
export declare function ScanTaskModelFromJSON(json: any): ScanTaskModel;
export declare function ScanTaskModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScanTaskModel;
export declare function ScanTaskModelToJSON(value?: ScanTaskModel | null): any;
