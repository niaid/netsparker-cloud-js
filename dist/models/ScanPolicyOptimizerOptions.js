"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScanPolicyOptimizerOptionsToJSON = exports.ScanPolicyOptimizerOptionsFromJSONTyped = exports.ScanPolicyOptimizerOptionsFromJSON = exports.instanceOfScanPolicyOptimizerOptions = exports.ScanPolicyOptimizerOptionsWebServerEnum = exports.ScanPolicyOptimizerOptionsSuggestionStatusEnum = exports.ScanPolicyOptimizerOptionsOperatingSystemEnum = exports.ScanPolicyOptimizerOptionsDomParserPresetEnum = exports.ScanPolicyOptimizerOptionsDatabaseServerEnum = exports.ScanPolicyOptimizerOptionsAppServerEnum = void 0;
const runtime_1 = require("../runtime");
/**
* @export
* @enum {string}
*/
var ScanPolicyOptimizerOptionsAppServerEnum;
(function (ScanPolicyOptimizerOptionsAppServerEnum) {
    ScanPolicyOptimizerOptionsAppServerEnum["All"] = "All";
    ScanPolicyOptimizerOptionsAppServerEnum["Aspnet"] = "Aspnet";
    ScanPolicyOptimizerOptionsAppServerEnum["Php"] = "Php";
    ScanPolicyOptimizerOptionsAppServerEnum["Rails"] = "Rails";
    ScanPolicyOptimizerOptionsAppServerEnum["Java"] = "Java";
    ScanPolicyOptimizerOptionsAppServerEnum["Perl"] = "Perl";
    ScanPolicyOptimizerOptionsAppServerEnum["Python"] = "Python";
    ScanPolicyOptimizerOptionsAppServerEnum["NodeJs"] = "NodeJs";
    ScanPolicyOptimizerOptionsAppServerEnum["Other"] = "Other";
})(ScanPolicyOptimizerOptionsAppServerEnum = exports.ScanPolicyOptimizerOptionsAppServerEnum || (exports.ScanPolicyOptimizerOptionsAppServerEnum = {}));
/**
* @export
* @enum {string}
*/
var ScanPolicyOptimizerOptionsDatabaseServerEnum;
(function (ScanPolicyOptimizerOptionsDatabaseServerEnum) {
    ScanPolicyOptimizerOptionsDatabaseServerEnum["All"] = "All";
    ScanPolicyOptimizerOptionsDatabaseServerEnum["MsSql"] = "MsSql";
    ScanPolicyOptimizerOptionsDatabaseServerEnum["MySql"] = "MySql";
    ScanPolicyOptimizerOptionsDatabaseServerEnum["Oracle"] = "Oracle";
    ScanPolicyOptimizerOptionsDatabaseServerEnum["PostgreSql"] = "PostgreSql";
    ScanPolicyOptimizerOptionsDatabaseServerEnum["MsAccess"] = "MsAccess";
    ScanPolicyOptimizerOptionsDatabaseServerEnum["HsqlDb"] = "HsqlDb";
    ScanPolicyOptimizerOptionsDatabaseServerEnum["Sqlite"] = "Sqlite";
    ScanPolicyOptimizerOptionsDatabaseServerEnum["MongoDb"] = "MongoDb";
    ScanPolicyOptimizerOptionsDatabaseServerEnum["Other"] = "Other";
})(ScanPolicyOptimizerOptionsDatabaseServerEnum = exports.ScanPolicyOptimizerOptionsDatabaseServerEnum || (exports.ScanPolicyOptimizerOptionsDatabaseServerEnum = {}));
/**
* @export
* @enum {string}
*/
var ScanPolicyOptimizerOptionsDomParserPresetEnum;
(function (ScanPolicyOptimizerOptionsDomParserPresetEnum) {
    ScanPolicyOptimizerOptionsDomParserPresetEnum["None"] = "None";
    ScanPolicyOptimizerOptionsDomParserPresetEnum["Default"] = "Default";
    ScanPolicyOptimizerOptionsDomParserPresetEnum["Spa"] = "Spa";
    ScanPolicyOptimizerOptionsDomParserPresetEnum["LargeSpa"] = "LargeSpa";
})(ScanPolicyOptimizerOptionsDomParserPresetEnum = exports.ScanPolicyOptimizerOptionsDomParserPresetEnum || (exports.ScanPolicyOptimizerOptionsDomParserPresetEnum = {}));
/**
* @export
* @enum {string}
*/
var ScanPolicyOptimizerOptionsOperatingSystemEnum;
(function (ScanPolicyOptimizerOptionsOperatingSystemEnum) {
    ScanPolicyOptimizerOptionsOperatingSystemEnum["All"] = "All";
    ScanPolicyOptimizerOptionsOperatingSystemEnum["Windows"] = "Windows";
    ScanPolicyOptimizerOptionsOperatingSystemEnum["Unix"] = "Unix";
})(ScanPolicyOptimizerOptionsOperatingSystemEnum = exports.ScanPolicyOptimizerOptionsOperatingSystemEnum || (exports.ScanPolicyOptimizerOptionsOperatingSystemEnum = {}));
/**
* @export
* @enum {string}
*/
var ScanPolicyOptimizerOptionsSuggestionStatusEnum;
(function (ScanPolicyOptimizerOptionsSuggestionStatusEnum) {
    ScanPolicyOptimizerOptionsSuggestionStatusEnum["Always"] = "Always";
    ScanPolicyOptimizerOptionsSuggestionStatusEnum["NotNow"] = "NotNow";
    ScanPolicyOptimizerOptionsSuggestionStatusEnum["Never"] = "Never";
})(ScanPolicyOptimizerOptionsSuggestionStatusEnum = exports.ScanPolicyOptimizerOptionsSuggestionStatusEnum || (exports.ScanPolicyOptimizerOptionsSuggestionStatusEnum = {}));
/**
* @export
* @enum {string}
*/
var ScanPolicyOptimizerOptionsWebServerEnum;
(function (ScanPolicyOptimizerOptionsWebServerEnum) {
    ScanPolicyOptimizerOptionsWebServerEnum["All"] = "All";
    ScanPolicyOptimizerOptionsWebServerEnum["Iis"] = "Iis";
    ScanPolicyOptimizerOptionsWebServerEnum["Apache"] = "Apache";
    ScanPolicyOptimizerOptionsWebServerEnum["ApacheTomcat"] = "ApacheTomcat";
    ScanPolicyOptimizerOptionsWebServerEnum["Nginx"] = "Nginx";
    ScanPolicyOptimizerOptionsWebServerEnum["Other"] = "Other";
})(ScanPolicyOptimizerOptionsWebServerEnum = exports.ScanPolicyOptimizerOptionsWebServerEnum || (exports.ScanPolicyOptimizerOptionsWebServerEnum = {}));
/**
 * Check if a given object implements the ScanPolicyOptimizerOptions interface.
 */
function instanceOfScanPolicyOptimizerOptions(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfScanPolicyOptimizerOptions = instanceOfScanPolicyOptimizerOptions;
function ScanPolicyOptimizerOptionsFromJSON(json) {
    return ScanPolicyOptimizerOptionsFromJSONTyped(json, false);
}
exports.ScanPolicyOptimizerOptionsFromJSON = ScanPolicyOptimizerOptionsFromJSON;
function ScanPolicyOptimizerOptionsFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'appServer': !(0, runtime_1.exists)(json, 'AppServer') ? undefined : json['AppServer'],
        'databaseServer': !(0, runtime_1.exists)(json, 'DatabaseServer') ? undefined : json['DatabaseServer'],
        'directoryNameLimit': !(0, runtime_1.exists)(json, 'DirectoryNameLimit') ? undefined : json['DirectoryNameLimit'],
        'domParserPreset': !(0, runtime_1.exists)(json, 'DomParserPreset') ? undefined : json['DomParserPreset'],
        'hosts': !(0, runtime_1.exists)(json, 'Hosts') ? undefined : json['Hosts'],
        'isSharkEnabled': !(0, runtime_1.exists)(json, 'IsSharkEnabled') ? undefined : json['IsSharkEnabled'],
        'name': !(0, runtime_1.exists)(json, 'Name') ? undefined : json['Name'],
        'netsparkerHawkBaseUrl': !(0, runtime_1.exists)(json, 'NetsparkerHawkBaseUrl') ? undefined : json['NetsparkerHawkBaseUrl'],
        'operatingSystem': !(0, runtime_1.exists)(json, 'OperatingSystem') ? undefined : json['OperatingSystem'],
        'optimized': !(0, runtime_1.exists)(json, 'Optimized') ? undefined : json['Optimized'],
        'resourceFinders': !(0, runtime_1.exists)(json, 'ResourceFinders') ? undefined : json['ResourceFinders'],
        'suggestionStatus': !(0, runtime_1.exists)(json, 'SuggestionStatus') ? undefined : json['SuggestionStatus'],
        'webServer': !(0, runtime_1.exists)(json, 'WebServer') ? undefined : json['WebServer'],
    };
}
exports.ScanPolicyOptimizerOptionsFromJSONTyped = ScanPolicyOptimizerOptionsFromJSONTyped;
function ScanPolicyOptimizerOptionsToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'AppServer': value.appServer,
        'DatabaseServer': value.databaseServer,
        'DirectoryNameLimit': value.directoryNameLimit,
        'DomParserPreset': value.domParserPreset,
        'Hosts': value.hosts,
        'IsSharkEnabled': value.isSharkEnabled,
        'Name': value.name,
        'NetsparkerHawkBaseUrl': value.netsparkerHawkBaseUrl,
        'OperatingSystem': value.operatingSystem,
        'Optimized': value.optimized,
        'ResourceFinders': value.resourceFinders,
        'SuggestionStatus': value.suggestionStatus,
        'WebServer': value.webServer,
    };
}
exports.ScanPolicyOptimizerOptionsToJSON = ScanPolicyOptimizerOptionsToJSON;
//# sourceMappingURL=ScanPolicyOptimizerOptions.js.map