"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditLogDtoToJSON = exports.AuditLogDtoFromJSONTyped = exports.AuditLogDtoFromJSON = exports.instanceOfAuditLogDto = exports.AuditLogDtoTypeEnum = exports.AuditLogDtoEndpointTypeEnum = void 0;
const runtime_1 = require("../runtime");
/**
 * @export
 */
exports.AuditLogDtoEndpointTypeEnum = {
    Web: 'Web',
    Api: 'Api',
    BackgroundTask: 'BackgroundTask'
};
/**
 * @export
 */
exports.AuditLogDtoTypeEnum = {
    Signin: 'Signin',
    Signout: 'Signout',
    Signup: 'Signup',
    ResentConfirmationEmail: 'ResentConfirmationEmail',
    EmailConfirmed: 'EmailConfirmed',
    PasswordResetRequested: 'PasswordResetRequested',
    PasswordResetSucceeded: 'PasswordResetSucceeded',
    PasswordChanged: 'PasswordChanged',
    UserAccountUpdated: 'UserAccountUpdated',
    UserCreated: 'UserCreated',
    UserUpdated: 'UserUpdated',
    AccessTokenReset: 'AccessTokenReset',
    ScanStarted: 'ScanStarted',
    ScanCancelled: 'ScanCancelled',
    WebsiteGroupCreated: 'WebsiteGroupCreated',
    WebsiteGroupDeleted: 'WebsiteGroupDeleted',
    WebsiteGroupUpdated: 'WebsiteGroupUpdated',
    WebsiteCreated: 'WebsiteCreated',
    WebsiteUpdated: 'WebsiteUpdated',
    WebsiteDeleted: 'WebsiteDeleted',
    ScheduledScanDeleted: 'ScheduledScanDeleted',
    ScheduledScanCreated: 'ScheduledScanCreated',
    ScheduledScanUpdated: 'ScheduledScanUpdated',
    ScanPolicyCreated: 'ScanPolicyCreated',
    ScanPolicyUpdated: 'ScanPolicyUpdated',
    ScanPolicyDeleted: 'ScanPolicyDeleted',
    CheckedUpdates: 'CheckedUpdates',
    ScanDeleted: 'ScanDeleted',
    SigninAs: 'SigninAs',
    TwoFactorAuthenticationDisabled: 'TwoFactorAuthenticationDisabled',
    TwoFactorAuthenticationConfigured: 'TwoFactorAuthenticationConfigured',
    TwoFactorAuthenticationRecoveryCodesViewed: 'TwoFactorAuthenticationRecoveryCodesViewed',
    TwoFactorAuthenticationEnforcementChanged: 'TwoFactorAuthenticationEnforcementChanged',
    SigninWithRecoveryCode: 'SigninWithRecoveryCode',
    IssueCreated: 'IssueCreated',
    IssueUpdated: 'IssueUpdated',
    DeleteUser: 'DeleteUser',
    StartVerification: 'StartVerification',
    VerifyOwnership: 'VerifyOwnership',
    ScanPaused: 'ScanPaused',
    ScanResumed: 'ScanResumed',
    AccountLicenseUpdated: 'AccountLicenseUpdated',
    InvitationLicenseUpdated: 'InvitationLicenseUpdated',
    MarkedLateConfirmation: 'MarkedLateConfirmation',
    ConfirmSupportAccessRequest: 'ConfirmSupportAccessRequest',
    AgentGroupCreated: 'AgentGroupCreated',
    AgentGroupUpdated: 'AgentGroupUpdated',
    AgentGroupDeleted: 'AgentGroupDeleted',
    IpRestrictionAdded: 'IpRestrictionAdded',
    IpRestrictionUpdated: 'IpRestrictionUpdated',
    IpRestrictionDeleted: 'IpRestrictionDeleted',
    IpRestrictionsStatusChanged: 'IpRestrictionsStatusChanged',
    RawScanFileRetentionPeriodEnabled: 'RawScanFileRetentionPeriodEnabled',
    RawScanFileRetentionPeriodDisabled: 'RawScanFileRetentionPeriodDisabled',
    AccountUpdated: 'AccountUpdated',
    ScanNotificationRuleCreated: 'ScanNotificationRuleCreated',
    ScanNotificationRuleUpdated: 'ScanNotificationRuleUpdated',
    ScanNotificationRuleDeleted: 'ScanNotificationRuleDeleted',
    ScanNotificationRulePrioritiesUpdated: 'ScanNotificationRulePrioritiesUpdated',
    ReportPolicyCreated: 'ReportPolicyCreated',
    ReportPolicyUpdated: 'ReportPolicyUpdated',
    ReportPolicyDeleted: 'ReportPolicyDeleted',
    AgentDeleted: 'AgentDeleted',
    DeleteAccount: 'DeleteAccount',
    NsScanImported: 'NsScanImported',
    AccountsMerged: 'AccountsMerged',
    TooManyRequests: 'TooManyRequests',
    SupportEditedUser: 'SupportEditedUser',
    AgentsAutoUpdateSettingChanged: 'AgentsAutoUpdateSettingChanged',
    WebsiteGroupTechContactChanged: 'WebsiteGroupTechContactChanged',
    CreateInvitation: 'CreateInvitation',
    DeleteInvitation: 'DeleteInvitation',
    ScanProfileCreated: 'ScanProfileCreated',
    ScanProfileUpdated: 'ScanProfileUpdated',
    ScanProfileDeleted: 'ScanProfileDeleted',
    GeneralSettingsUpdated: 'GeneralSettingsUpdated',
    SecuritySettingsUpdated: 'SecuritySettingsUpdated',
    DatabaseSettingsUpdated: 'DatabaseSettingsUpdated',
    EmailSettingsUpdated: 'EmailSettingsUpdated',
    SmsSettingsUpdated: 'SmsSettingsUpdated',
    CloudProviderUpdated: 'CloudProviderUpdated',
    SingleSignOnUpdated: 'SingleSignOnUpdated',
    IpRestrictionsUpdated: 'IpRestrictionsUpdated',
    TechnologyNotificationChanged: 'TechnologyNotificationChanged',
    LoginAttemptFailed: 'LoginAttemptFailed',
    IpRestrictedSessionsStatusChanged: 'IpRestrictedSessionsStatusChanged',
    U2FSecurityKeyConfigured: 'U2FSecurityKeyConfigured',
    U2FSecurityKeyReConfigured: 'U2FSecurityKeyReConfigured',
    AgentTokenReset: 'AgentTokenReset',
    AddOrUpdateTag: 'AddOrUpdateTag',
    EncryptionKeysUpdated: 'EncryptionKeysUpdated',
    EncryptionKeysDownloaded: 'EncryptionKeysDownloaded',
    RoleCreated: 'RoleCreated',
    RoleUpdated: 'RoleUpdated',
    RoleDelete: 'RoleDelete',
    TeamCreated: 'TeamCreated',
    TeamUpdated: 'TeamUpdated',
    TeamDelete: 'TeamDelete',
    DefectDojoReportImported: 'DefectDojoReportImported',
    DefectDojoReportImportFailed: 'DefectDojoReportImportFailed',
    ScanDataRetentionPeriodEnabled: 'ScanDataRetentionPeriodEnabled',
    ScanDataRetentionPeriodDisabled: 'ScanDataRetentionPeriodDisabled',
    ScanQueuedAgain: 'ScanQueuedAgain',
    ScanFailed: 'ScanFailed',
    AgentCommandDelete: 'AgentCommandDelete',
    ImportWebsite: 'ImportWebsite'
};
/**
 * Check if a given object implements the AuditLogDto interface.
 */
function instanceOfAuditLogDto(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfAuditLogDto = instanceOfAuditLogDto;
function AuditLogDtoFromJSON(json) {
    return AuditLogDtoFromJSONTyped(json, false);
}
exports.AuditLogDtoFromJSON = AuditLogDtoFromJSON;
function AuditLogDtoFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'accountId': !(0, runtime_1.exists)(json, 'AccountId') ? undefined : json['AccountId'],
        'createdAt': !(0, runtime_1.exists)(json, 'CreatedAt') ? undefined : (new Date(json['CreatedAt'])),
        'endpointType': !(0, runtime_1.exists)(json, 'EndpointType') ? undefined : json['EndpointType'],
        'id': !(0, runtime_1.exists)(json, 'Id') ? undefined : json['Id'],
        'type': !(0, runtime_1.exists)(json, 'Type') ? undefined : json['Type'],
        'userEmail': !(0, runtime_1.exists)(json, 'UserEmail') ? undefined : json['UserEmail'],
        'userId': !(0, runtime_1.exists)(json, 'UserId') ? undefined : json['UserId'],
        'userName': !(0, runtime_1.exists)(json, 'UserName') ? undefined : json['UserName'],
        'message': !(0, runtime_1.exists)(json, 'Message') ? undefined : json['Message'],
        'requestData': !(0, runtime_1.exists)(json, 'RequestData') ? undefined : json['RequestData'],
    };
}
exports.AuditLogDtoFromJSONTyped = AuditLogDtoFromJSONTyped;
function AuditLogDtoToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'AccountId': value.accountId,
        'CreatedAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'EndpointType': value.endpointType,
        'Id': value.id,
        'Type': value.type,
        'UserEmail': value.userEmail,
        'UserId': value.userId,
        'UserName': value.userName,
        'Message': value.message,
        'RequestData': value.requestData,
    };
}
exports.AuditLogDtoToJSON = AuditLogDtoToJSON;
//# sourceMappingURL=AuditLogDto.js.map