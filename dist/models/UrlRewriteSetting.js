/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { exists } from '../runtime';
import { UrlRewriteExcludedPathModelFromJSON, UrlRewriteExcludedPathModelToJSON, } from './UrlRewriteExcludedPathModel';
import { UrlRewriteRuleModelFromJSON, UrlRewriteRuleModelToJSON, } from './UrlRewriteRuleModel';
/**
 * @export
 */
export const UrlRewriteSettingUrlRewriteModeEnum = {
    None: 'None',
    Heuristic: 'Heuristic',
    Custom: 'Custom'
};
/**
 * Check if a given object implements the UrlRewriteSetting interface.
 */
export function instanceOfUrlRewriteSetting(value) {
    let isInstance = true;
    isInstance = isInstance && "maxDynamicSignatures" in value;
    isInstance = isInstance && "subPathMaxDynamicSignatures" in value;
    isInstance = isInstance && "urlRewriteBlockSeparators" in value;
    return isInstance;
}
export function UrlRewriteSettingFromJSON(json) {
    return UrlRewriteSettingFromJSONTyped(json, false);
}
export function UrlRewriteSettingFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'enableHeuristicChecksInCustomUrlRewrite': !exists(json, 'EnableHeuristicChecksInCustomUrlRewrite') ? undefined : json['EnableHeuristicChecksInCustomUrlRewrite'],
        'maxDynamicSignatures': json['MaxDynamicSignatures'],
        'subPathMaxDynamicSignatures': json['SubPathMaxDynamicSignatures'],
        'urlRewriteAnalyzableExtensions': !exists(json, 'UrlRewriteAnalyzableExtensions') ? undefined : json['UrlRewriteAnalyzableExtensions'],
        'urlRewriteBlockSeparators': json['UrlRewriteBlockSeparators'],
        'urlRewriteMode': !exists(json, 'UrlRewriteMode') ? undefined : json['UrlRewriteMode'],
        'urlRewriteRules': !exists(json, 'UrlRewriteRules') ? undefined : (json['UrlRewriteRules'].map(UrlRewriteRuleModelFromJSON)),
        'urlRewriteExcludedLinks': !exists(json, 'UrlRewriteExcludedLinks') ? undefined : (json['UrlRewriteExcludedLinks'].map(UrlRewriteExcludedPathModelFromJSON)),
    };
}
export function UrlRewriteSettingToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'EnableHeuristicChecksInCustomUrlRewrite': value.enableHeuristicChecksInCustomUrlRewrite,
        'MaxDynamicSignatures': value.maxDynamicSignatures,
        'SubPathMaxDynamicSignatures': value.subPathMaxDynamicSignatures,
        'UrlRewriteAnalyzableExtensions': value.urlRewriteAnalyzableExtensions,
        'UrlRewriteBlockSeparators': value.urlRewriteBlockSeparators,
        'UrlRewriteMode': value.urlRewriteMode,
        'UrlRewriteRules': value.urlRewriteRules === undefined ? undefined : (value.urlRewriteRules.map(UrlRewriteRuleModelToJSON)),
        'UrlRewriteExcludedLinks': value.urlRewriteExcludedLinks === undefined ? undefined : (value.urlRewriteExcludedLinks.map(UrlRewriteExcludedPathModelToJSON)),
    };
}
//# sourceMappingURL=UrlRewriteSetting.js.map