"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrelloIntegrationInfoModelToJSON = exports.TrelloIntegrationInfoModelFromJSONTyped = exports.TrelloIntegrationInfoModelFromJSON = exports.instanceOfTrelloIntegrationInfoModel = exports.TrelloIntegrationInfoModelTemplateTypeEnum = exports.TrelloIntegrationInfoModelTypeEnum = void 0;
const runtime_1 = require("../runtime");
const IntegrationCustomFieldVm_1 = require("./IntegrationCustomFieldVm");
const IntegrationWizardResultModel_1 = require("./IntegrationWizardResultModel");
const TrelloBoard_1 = require("./TrelloBoard");
const TrelloLabel_1 = require("./TrelloLabel");
const TrelloList_1 = require("./TrelloList");
const TrelloMember_1 = require("./TrelloMember");
/**
* @export
* @enum {string}
*/
var TrelloIntegrationInfoModelTypeEnum;
(function (TrelloIntegrationInfoModelTypeEnum) {
    TrelloIntegrationInfoModelTypeEnum["Jira"] = "Jira";
    TrelloIntegrationInfoModelTypeEnum["GitHub"] = "GitHub";
    TrelloIntegrationInfoModelTypeEnum["Tfs"] = "TFS";
    TrelloIntegrationInfoModelTypeEnum["FogBugz"] = "FogBugz";
    TrelloIntegrationInfoModelTypeEnum["ServiceNow"] = "ServiceNow";
    TrelloIntegrationInfoModelTypeEnum["Slack"] = "Slack";
    TrelloIntegrationInfoModelTypeEnum["GitLab"] = "GitLab";
    TrelloIntegrationInfoModelTypeEnum["Bitbucket"] = "Bitbucket";
    TrelloIntegrationInfoModelTypeEnum["Unfuddle"] = "Unfuddle";
    TrelloIntegrationInfoModelTypeEnum["Zapier"] = "Zapier";
    TrelloIntegrationInfoModelTypeEnum["AzureDevOps"] = "AzureDevOps";
    TrelloIntegrationInfoModelTypeEnum["Redmine"] = "Redmine";
    TrelloIntegrationInfoModelTypeEnum["Bugzilla"] = "Bugzilla";
    TrelloIntegrationInfoModelTypeEnum["Kafka"] = "Kafka";
    TrelloIntegrationInfoModelTypeEnum["PagerDuty"] = "PagerDuty";
    TrelloIntegrationInfoModelTypeEnum["MicrosoftTeams"] = "MicrosoftTeams";
    TrelloIntegrationInfoModelTypeEnum["Clubhouse"] = "Clubhouse";
    TrelloIntegrationInfoModelTypeEnum["Trello"] = "Trello";
    TrelloIntegrationInfoModelTypeEnum["Asana"] = "Asana";
    TrelloIntegrationInfoModelTypeEnum["Webhook"] = "Webhook";
    TrelloIntegrationInfoModelTypeEnum["Kenna"] = "Kenna";
    TrelloIntegrationInfoModelTypeEnum["Freshservice"] = "Freshservice";
    TrelloIntegrationInfoModelTypeEnum["YouTrack"] = "YouTrack";
    TrelloIntegrationInfoModelTypeEnum["NetsparkerEnterprise"] = "NetsparkerEnterprise";
    TrelloIntegrationInfoModelTypeEnum["Splunk"] = "Splunk";
    TrelloIntegrationInfoModelTypeEnum["Mattermost"] = "Mattermost";
    TrelloIntegrationInfoModelTypeEnum["Hashicorp"] = "Hashicorp";
    TrelloIntegrationInfoModelTypeEnum["PivotalTracker"] = "PivotalTracker";
    TrelloIntegrationInfoModelTypeEnum["CyberArk"] = "CyberArk";
    TrelloIntegrationInfoModelTypeEnum["DefectDojo"] = "DefectDojo";
    TrelloIntegrationInfoModelTypeEnum["JazzTeam"] = "JazzTeam";
    TrelloIntegrationInfoModelTypeEnum["AzureKeyVault"] = "AzureKeyVault";
    TrelloIntegrationInfoModelTypeEnum["ServiceNowVrm"] = "ServiceNowVRM";
})(TrelloIntegrationInfoModelTypeEnum = exports.TrelloIntegrationInfoModelTypeEnum || (exports.TrelloIntegrationInfoModelTypeEnum = {}));
/**
* @export
* @enum {string}
*/
var TrelloIntegrationInfoModelTemplateTypeEnum;
(function (TrelloIntegrationInfoModelTemplateTypeEnum) {
    TrelloIntegrationInfoModelTemplateTypeEnum["Standard"] = "Standard";
    TrelloIntegrationInfoModelTemplateTypeEnum["Detailed"] = "Detailed";
})(TrelloIntegrationInfoModelTemplateTypeEnum = exports.TrelloIntegrationInfoModelTemplateTypeEnum || (exports.TrelloIntegrationInfoModelTemplateTypeEnum = {}));
/**
 * Check if a given object implements the TrelloIntegrationInfoModel interface.
 */
function instanceOfTrelloIntegrationInfoModel(value) {
    let isInstance = true;
    isInstance = isInstance && "apiKey" in value;
    isInstance = isInstance && "token" in value;
    isInstance = isInstance && "listId" in value;
    isInstance = isInstance && "boardId" in value;
    isInstance = isInstance && "dueDays" in value;
    isInstance = isInstance && "titleFormat" in value;
    return isInstance;
}
exports.instanceOfTrelloIntegrationInfoModel = instanceOfTrelloIntegrationInfoModel;
function TrelloIntegrationInfoModelFromJSON(json) {
    return TrelloIntegrationInfoModelFromJSONTyped(json, false);
}
exports.TrelloIntegrationInfoModelFromJSON = TrelloIntegrationInfoModelFromJSON;
function TrelloIntegrationInfoModelFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiKey': json['ApiKey'],
        'token': json['Token'],
        'listId': json['ListId'],
        'integrationWizardResultModel': !(0, runtime_1.exists)(json, 'IntegrationWizardResultModel') ? undefined : (0, IntegrationWizardResultModel_1.IntegrationWizardResultModelFromJSON)(json['IntegrationWizardResultModel']),
        'boardId': json['BoardId'],
        'boardIds': !(0, runtime_1.exists)(json, 'BoardIds') ? undefined : (json['BoardIds'].map(TrelloBoard_1.TrelloBoardFromJSON)),
        'lists': !(0, runtime_1.exists)(json, 'Lists') ? undefined : (json['Lists'].map(TrelloList_1.TrelloListFromJSON)),
        'members': !(0, runtime_1.exists)(json, 'Members') ? undefined : (json['Members'].map(TrelloMember_1.TrelloMemberFromJSON)),
        'labels': !(0, runtime_1.exists)(json, 'Labels') ? undefined : (json['Labels'].map(TrelloLabel_1.TrelloLabelFromJSON)),
        'memberIds': !(0, runtime_1.exists)(json, 'MemberIds') ? undefined : json['MemberIds'],
        'labelIds': !(0, runtime_1.exists)(json, 'LabelIds') ? undefined : json['LabelIds'],
        'labelIdsSelected': !(0, runtime_1.exists)(json, 'LabelIdsSelected') ? undefined : json['LabelIdsSelected'],
        'memberIdsSelected': !(0, runtime_1.exists)(json, 'MemberIdsSelected') ? undefined : json['MemberIdsSelected'],
        'dueDays': json['DueDays'],
        'type': !(0, runtime_1.exists)(json, 'Type') ? undefined : json['Type'],
        'genericErrorMessage': !(0, runtime_1.exists)(json, 'GenericErrorMessage') ? undefined : json['GenericErrorMessage'],
        'identifier': !(0, runtime_1.exists)(json, 'Identifier') ? undefined : json['Identifier'],
        'testMessageBody': !(0, runtime_1.exists)(json, 'TestMessageBody') ? undefined : json['TestMessageBody'],
        'testMessageTitle': !(0, runtime_1.exists)(json, 'TestMessageTitle') ? undefined : json['TestMessageTitle'],
        'webhookUrl': !(0, runtime_1.exists)(json, 'WebhookUrl') ? undefined : json['WebhookUrl'],
        'name': !(0, runtime_1.exists)(json, 'Name') ? undefined : json['Name'],
        'integrationVersion': !(0, runtime_1.exists)(json, 'IntegrationVersion') ? undefined : json['IntegrationVersion'],
        'accountID': !(0, runtime_1.exists)(json, 'AccountID') ? undefined : json['AccountID'],
        'customFields': !(0, runtime_1.exists)(json, 'CustomFields') ? undefined : (json['CustomFields'].map(IntegrationCustomFieldVm_1.IntegrationCustomFieldVmFromJSON)),
        'templateType': !(0, runtime_1.exists)(json, 'TemplateType') ? undefined : json['TemplateType'],
        'reopenStatus': !(0, runtime_1.exists)(json, 'ReopenStatus') ? undefined : json['ReopenStatus'],
        'resolvedStatus': !(0, runtime_1.exists)(json, 'ResolvedStatus') ? undefined : json['ResolvedStatus'],
        'titleFormat': json['TitleFormat'],
    };
}
exports.TrelloIntegrationInfoModelFromJSONTyped = TrelloIntegrationInfoModelFromJSONTyped;
function TrelloIntegrationInfoModelToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'ApiKey': value.apiKey,
        'Token': value.token,
        'ListId': value.listId,
        'IntegrationWizardResultModel': (0, IntegrationWizardResultModel_1.IntegrationWizardResultModelToJSON)(value.integrationWizardResultModel),
        'BoardId': value.boardId,
        'BoardIds': value.boardIds === undefined ? undefined : (value.boardIds.map(TrelloBoard_1.TrelloBoardToJSON)),
        'Lists': value.lists === undefined ? undefined : (value.lists.map(TrelloList_1.TrelloListToJSON)),
        'Members': value.members === undefined ? undefined : (value.members.map(TrelloMember_1.TrelloMemberToJSON)),
        'Labels': value.labels === undefined ? undefined : (value.labels.map(TrelloLabel_1.TrelloLabelToJSON)),
        'MemberIds': value.memberIds,
        'LabelIds': value.labelIds,
        'DueDays': value.dueDays,
        'Name': value.name,
        'IntegrationVersion': value.integrationVersion,
        'AccountID': value.accountID,
        'CustomFields': value.customFields === undefined ? undefined : (value.customFields.map(IntegrationCustomFieldVm_1.IntegrationCustomFieldVmToJSON)),
        'TemplateType': value.templateType,
        'ReopenStatus': value.reopenStatus,
        'ResolvedStatus': value.resolvedStatus,
        'TitleFormat': value.titleFormat,
    };
}
exports.TrelloIntegrationInfoModelToJSON = TrelloIntegrationInfoModelToJSON;
//# sourceMappingURL=TrelloIntegrationInfoModel.js.map