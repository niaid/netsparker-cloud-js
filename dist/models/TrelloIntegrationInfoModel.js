"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrelloIntegrationInfoModelToJSON = exports.TrelloIntegrationInfoModelFromJSONTyped = exports.TrelloIntegrationInfoModelFromJSON = exports.instanceOfTrelloIntegrationInfoModel = exports.TrelloIntegrationInfoModelStateEnum = exports.TrelloIntegrationInfoModelTemplateTypeEnum = exports.TrelloIntegrationInfoModelTypeEnum = void 0;
const TrelloBoard_1 = require("./TrelloBoard");
const TrelloList_1 = require("./TrelloList");
const TrelloMember_1 = require("./TrelloMember");
const TrelloLabel_1 = require("./TrelloLabel");
const IntegrationWizardResultModel_1 = require("./IntegrationWizardResultModel");
const IntegrationCustomFieldVm_1 = require("./IntegrationCustomFieldVm");
/**
 * @export
 */
exports.TrelloIntegrationInfoModelTypeEnum = {
    Jira: 'Jira',
    GitHub: 'GitHub',
    Tfs: 'TFS',
    FogBugz: 'FogBugz',
    ServiceNow: 'ServiceNow',
    Slack: 'Slack',
    GitLab: 'GitLab',
    Bitbucket: 'Bitbucket',
    Unfuddle: 'Unfuddle',
    Zapier: 'Zapier',
    AzureDevOps: 'AzureDevOps',
    Redmine: 'Redmine',
    Bugzilla: 'Bugzilla',
    Kafka: 'Kafka',
    PagerDuty: 'PagerDuty',
    MicrosoftTeams: 'MicrosoftTeams',
    Clubhouse: 'Clubhouse',
    Trello: 'Trello',
    Asana: 'Asana',
    Webhook: 'Webhook',
    Kenna: 'Kenna',
    Freshservice: 'Freshservice',
    YouTrack: 'YouTrack',
    NetsparkerEnterprise: 'NetsparkerEnterprise',
    Splunk: 'Splunk',
    Mattermost: 'Mattermost',
    Hashicorp: 'Hashicorp',
    PivotalTracker: 'PivotalTracker',
    CyberArk: 'CyberArk',
    DefectDojo: 'DefectDojo',
    JazzTeam: 'JazzTeam',
    AzureKeyVault: 'AzureKeyVault',
    ServiceNowVrm: 'ServiceNowVRM'
};
/**
 * @export
 */
exports.TrelloIntegrationInfoModelTemplateTypeEnum = {
    Standard: 'Standard',
    Detailed: 'Detailed'
};
/**
 * @export
 */
exports.TrelloIntegrationInfoModelStateEnum = {
    Active: 'Active',
    Suspended: 'Suspended'
};
/**
 * Check if a given object implements the TrelloIntegrationInfoModel interface.
 */
function instanceOfTrelloIntegrationInfoModel(value) {
    if (!('apiKey' in value))
        return false;
    if (!('token' in value))
        return false;
    if (!('listId' in value))
        return false;
    if (!('boardId' in value))
        return false;
    if (!('dueDays' in value))
        return false;
    if (!('titleFormat' in value))
        return false;
    return true;
}
exports.instanceOfTrelloIntegrationInfoModel = instanceOfTrelloIntegrationInfoModel;
function TrelloIntegrationInfoModelFromJSON(json) {
    return TrelloIntegrationInfoModelFromJSONTyped(json, false);
}
exports.TrelloIntegrationInfoModelFromJSON = TrelloIntegrationInfoModelFromJSON;
function TrelloIntegrationInfoModelFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'apiKey': json['ApiKey'],
        'token': json['Token'],
        'listId': json['ListId'],
        'integrationWizardResultModel': json['IntegrationWizardResultModel'] == null ? undefined : (0, IntegrationWizardResultModel_1.IntegrationWizardResultModelFromJSON)(json['IntegrationWizardResultModel']),
        'boardId': json['BoardId'],
        'boardIds': json['BoardIds'] == null ? undefined : (json['BoardIds'].map(TrelloBoard_1.TrelloBoardFromJSON)),
        'lists': json['Lists'] == null ? undefined : (json['Lists'].map(TrelloList_1.TrelloListFromJSON)),
        'members': json['Members'] == null ? undefined : (json['Members'].map(TrelloMember_1.TrelloMemberFromJSON)),
        'labels': json['Labels'] == null ? undefined : (json['Labels'].map(TrelloLabel_1.TrelloLabelFromJSON)),
        'memberIds': json['MemberIds'] == null ? undefined : json['MemberIds'],
        'labelIds': json['LabelIds'] == null ? undefined : json['LabelIds'],
        'labelIdsSelected': json['LabelIdsSelected'] == null ? undefined : json['LabelIdsSelected'],
        'memberIdsSelected': json['MemberIdsSelected'] == null ? undefined : json['MemberIdsSelected'],
        'dueDays': json['DueDays'],
        'type': json['Type'] == null ? undefined : json['Type'],
        'genericErrorMessage': json['GenericErrorMessage'] == null ? undefined : json['GenericErrorMessage'],
        'identifier': json['Identifier'] == null ? undefined : json['Identifier'],
        'testMessageBody': json['TestMessageBody'] == null ? undefined : json['TestMessageBody'],
        'testMessageTitle': json['TestMessageTitle'] == null ? undefined : json['TestMessageTitle'],
        'webhookUrl': json['WebhookUrl'] == null ? undefined : json['WebhookUrl'],
        'name': json['Name'] == null ? undefined : json['Name'],
        'integrationVersion': json['IntegrationVersion'] == null ? undefined : json['IntegrationVersion'],
        'accountID': json['AccountID'] == null ? undefined : json['AccountID'],
        'customFields': json['CustomFields'] == null ? undefined : (json['CustomFields'].map(IntegrationCustomFieldVm_1.IntegrationCustomFieldVmFromJSON)),
        'templateType': json['TemplateType'] == null ? undefined : json['TemplateType'],
        'reopenStatus': json['ReopenStatus'] == null ? undefined : json['ReopenStatus'],
        'resolvedStatus': json['ResolvedStatus'] == null ? undefined : json['ResolvedStatus'],
        'titleFormat': json['TitleFormat'],
        'id': json['Id'] == null ? undefined : json['Id'],
        'state': json['State'] == null ? undefined : json['State'],
    };
}
exports.TrelloIntegrationInfoModelFromJSONTyped = TrelloIntegrationInfoModelFromJSONTyped;
function TrelloIntegrationInfoModelToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        'ApiKey': value['apiKey'],
        'Token': value['token'],
        'ListId': value['listId'],
        'IntegrationWizardResultModel': (0, IntegrationWizardResultModel_1.IntegrationWizardResultModelToJSON)(value['integrationWizardResultModel']),
        'BoardId': value['boardId'],
        'BoardIds': value['boardIds'] == null ? undefined : (value['boardIds'].map(TrelloBoard_1.TrelloBoardToJSON)),
        'Lists': value['lists'] == null ? undefined : (value['lists'].map(TrelloList_1.TrelloListToJSON)),
        'Members': value['members'] == null ? undefined : (value['members'].map(TrelloMember_1.TrelloMemberToJSON)),
        'Labels': value['labels'] == null ? undefined : (value['labels'].map(TrelloLabel_1.TrelloLabelToJSON)),
        'MemberIds': value['memberIds'],
        'LabelIds': value['labelIds'],
        'DueDays': value['dueDays'],
        'Name': value['name'],
        'IntegrationVersion': value['integrationVersion'],
        'AccountID': value['accountID'],
        'CustomFields': value['customFields'] == null ? undefined : (value['customFields'].map(IntegrationCustomFieldVm_1.IntegrationCustomFieldVmToJSON)),
        'TemplateType': value['templateType'],
        'ReopenStatus': value['reopenStatus'],
        'ResolvedStatus': value['resolvedStatus'],
        'TitleFormat': value['titleFormat'],
        'Id': value['id'],
        'State': value['state'],
    };
}
exports.TrelloIntegrationInfoModelToJSON = TrelloIntegrationInfoModelToJSON;
//# sourceMappingURL=TrelloIntegrationInfoModel.js.map