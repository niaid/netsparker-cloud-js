"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduledScanRecurrenceViewModelToJSON = exports.ScheduledScanRecurrenceViewModelFromJSONTyped = exports.ScheduledScanRecurrenceViewModelFromJSON = exports.instanceOfScheduledScanRecurrenceViewModel = exports.ScheduledScanRecurrenceViewModelDayOfWeekEnum = exports.ScheduledScanRecurrenceViewModelOrdinalEnum = exports.ScheduledScanRecurrenceViewModelMonthsOfYearEnum = exports.ScheduledScanRecurrenceViewModelDaysOfWeekEnum = exports.ScheduledScanRecurrenceViewModelEndingTypeEnum = exports.ScheduledScanRecurrenceViewModelRepeatTypeEnum = void 0;
const runtime_1 = require("../runtime");
/**
 * @export
 */
exports.ScheduledScanRecurrenceViewModelRepeatTypeEnum = {
    Days: 'Days',
    Weeks: 'Weeks',
    Months: 'Months',
    Years: 'Years'
};
/**
 * @export
 */
exports.ScheduledScanRecurrenceViewModelEndingTypeEnum = {
    Never: 'Never',
    Date: 'Date',
    Occurences: 'Occurences'
};
/**
 * @export
 */
exports.ScheduledScanRecurrenceViewModelDaysOfWeekEnum = {
    Sunday: 'Sunday',
    Monday: 'Monday',
    Tuesday: 'Tuesday',
    Wednesday: 'Wednesday',
    Thursday: 'Thursday',
    Friday: 'Friday',
    Saturday: 'Saturday'
};
/**
 * @export
 */
exports.ScheduledScanRecurrenceViewModelMonthsOfYearEnum = {
    January: 'January',
    February: 'February',
    March: 'March',
    April: 'April',
    May: 'May',
    June: 'June',
    July: 'July',
    August: 'August',
    September: 'September',
    October: 'October',
    November: 'November',
    December: 'December'
};
/**
 * @export
 */
exports.ScheduledScanRecurrenceViewModelOrdinalEnum = {
    First: 'First',
    Second: 'Second',
    Third: 'Third',
    Fourth: 'Fourth',
    Last: 'Last'
};
/**
 * @export
 */
exports.ScheduledScanRecurrenceViewModelDayOfWeekEnum = {
    Sunday: 'Sunday',
    Monday: 'Monday',
    Tuesday: 'Tuesday',
    Wednesday: 'Wednesday',
    Thursday: 'Thursday',
    Friday: 'Friday',
    Saturday: 'Saturday'
};
/**
 * Check if a given object implements the ScheduledScanRecurrenceViewModel interface.
 */
function instanceOfScheduledScanRecurrenceViewModel(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfScheduledScanRecurrenceViewModel = instanceOfScheduledScanRecurrenceViewModel;
function ScheduledScanRecurrenceViewModelFromJSON(json) {
    return ScheduledScanRecurrenceViewModelFromJSONTyped(json, false);
}
exports.ScheduledScanRecurrenceViewModelFromJSON = ScheduledScanRecurrenceViewModelFromJSON;
function ScheduledScanRecurrenceViewModelFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'repeatType': !(0, runtime_1.exists)(json, 'RepeatType') ? undefined : json['RepeatType'],
        'interval': !(0, runtime_1.exists)(json, 'Interval') ? undefined : json['Interval'],
        'startDate': !(0, runtime_1.exists)(json, 'StartDate') ? undefined : (new Date(json['StartDate'])),
        'endingType': !(0, runtime_1.exists)(json, 'EndingType') ? undefined : json['EndingType'],
        'daysOfWeek': !(0, runtime_1.exists)(json, 'DaysOfWeek') ? undefined : json['DaysOfWeek'],
        'monthsOfYear': !(0, runtime_1.exists)(json, 'MonthsOfYear') ? undefined : json['MonthsOfYear'],
        'ordinal': !(0, runtime_1.exists)(json, 'Ordinal') ? undefined : json['Ordinal'],
        'endOn': !(0, runtime_1.exists)(json, 'EndOn') ? undefined : json['EndOn'],
        'endOnOccurences': !(0, runtime_1.exists)(json, 'EndOnOccurences') ? undefined : json['EndOnOccurences'],
        'dayOfMonth': !(0, runtime_1.exists)(json, 'DayOfMonth') ? undefined : json['DayOfMonth'],
        'endOnDate': !(0, runtime_1.exists)(json, 'EndOnDate') ? undefined : (new Date(json['EndOnDate'])),
        'dayOfWeek': !(0, runtime_1.exists)(json, 'DayOfWeek') ? undefined : json['DayOfWeek'],
    };
}
exports.ScheduledScanRecurrenceViewModelFromJSONTyped = ScheduledScanRecurrenceViewModelFromJSONTyped;
function ScheduledScanRecurrenceViewModelToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'RepeatType': value.repeatType,
        'Interval': value.interval,
        'StartDate': value.startDate === undefined ? undefined : (value.startDate.toISOString()),
        'EndingType': value.endingType,
        'DaysOfWeek': value.daysOfWeek,
        'MonthsOfYear': value.monthsOfYear,
        'Ordinal': value.ordinal,
        'EndOn': value.endOn,
        'EndOnOccurences': value.endOnOccurences,
        'DayOfMonth': value.dayOfMonth,
        'EndOnDate': value.endOnDate === undefined ? undefined : (value.endOnDate.toISOString()),
        'DayOfWeek': value.dayOfWeek,
    };
}
exports.ScheduledScanRecurrenceViewModelToJSON = ScheduledScanRecurrenceViewModelToJSON;
//# sourceMappingURL=ScheduledScanRecurrenceViewModel.js.map