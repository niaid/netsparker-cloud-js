"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueSummaryListModelToJSON = exports.IssueSummaryListModelFromJSONTyped = exports.IssueSummaryListModelFromJSON = exports.instanceOfIssueSummaryListModel = exports.IssueSummaryListModelSeverityEnum = exports.IssueSummaryListModelStateEnum = void 0;
const runtime_1 = require("../runtime");
const IssueSummaryStatusModel_1 = require("./IssueSummaryStatusModel");
/**
* @export
* @enum {string}
*/
var IssueSummaryListModelStateEnum;
(function (IssueSummaryListModelStateEnum) {
    IssueSummaryListModelStateEnum["Present"] = "Present";
    IssueSummaryListModelStateEnum["FixedUnconfirmed"] = "FixedUnconfirmed";
    IssueSummaryListModelStateEnum["FixedCantRetest"] = "FixedCantRetest";
    IssueSummaryListModelStateEnum["FixedConfirmed"] = "FixedConfirmed";
    IssueSummaryListModelStateEnum["Revived"] = "Revived";
    IssueSummaryListModelStateEnum["Scanning"] = "Scanning";
    IssueSummaryListModelStateEnum["Ignored"] = "Ignored";
    IssueSummaryListModelStateEnum["AcceptedRisk"] = "AcceptedRisk";
    IssueSummaryListModelStateEnum["FalsePositive"] = "FalsePositive";
})(IssueSummaryListModelStateEnum = exports.IssueSummaryListModelStateEnum || (exports.IssueSummaryListModelStateEnum = {}));
/**
* @export
* @enum {string}
*/
var IssueSummaryListModelSeverityEnum;
(function (IssueSummaryListModelSeverityEnum) {
    IssueSummaryListModelSeverityEnum["BestPractice"] = "BestPractice";
    IssueSummaryListModelSeverityEnum["Information"] = "Information";
    IssueSummaryListModelSeverityEnum["Low"] = "Low";
    IssueSummaryListModelSeverityEnum["Medium"] = "Medium";
    IssueSummaryListModelSeverityEnum["High"] = "High";
    IssueSummaryListModelSeverityEnum["Critical"] = "Critical";
})(IssueSummaryListModelSeverityEnum = exports.IssueSummaryListModelSeverityEnum || (exports.IssueSummaryListModelSeverityEnum = {}));
/**
 * Check if a given object implements the IssueSummaryListModel interface.
 */
function instanceOfIssueSummaryListModel(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfIssueSummaryListModel = instanceOfIssueSummaryListModel;
function IssueSummaryListModelFromJSON(json) {
    return IssueSummaryListModelFromJSONTyped(json, false);
}
exports.IssueSummaryListModelFromJSON = IssueSummaryListModelFromJSON;
function IssueSummaryListModelFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'title': !(0, runtime_1.exists)(json, 'Title') ? undefined : json['Title'],
        'state': !(0, runtime_1.exists)(json, 'State') ? undefined : json['State'],
        'severity': !(0, runtime_1.exists)(json, 'Severity') ? undefined : json['Severity'],
        'url': !(0, runtime_1.exists)(json, 'Url') ? undefined : json['Url'],
        'statusByDate': !(0, runtime_1.exists)(json, 'StatusByDate') ? undefined : (json['StatusByDate'].map(IssueSummaryStatusModel_1.IssueSummaryStatusModelFromJSON)),
    };
}
exports.IssueSummaryListModelFromJSONTyped = IssueSummaryListModelFromJSONTyped;
function IssueSummaryListModelToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'Title': value.title,
        'State': value.state,
        'Severity': value.severity,
        'Url': value.url,
        'StatusByDate': value.statusByDate === undefined ? undefined : (value.statusByDate.map(IssueSummaryStatusModel_1.IssueSummaryStatusModelToJSON)),
    };
}
exports.IssueSummaryListModelToJSON = IssueSummaryListModelToJSON;
//# sourceMappingURL=IssueSummaryListModel.js.map