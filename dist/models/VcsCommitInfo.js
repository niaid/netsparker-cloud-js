"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.VcsCommitInfoToJSON = exports.VcsCommitInfoFromJSONTyped = exports.VcsCommitInfoFromJSON = exports.instanceOfVcsCommitInfo = exports.VcsCommitInfoIntegrationSystemEnum = void 0;
const runtime_1 = require("../runtime");
/**
* @export
* @enum {string}
*/
var VcsCommitInfoIntegrationSystemEnum;
(function (VcsCommitInfoIntegrationSystemEnum) {
    VcsCommitInfoIntegrationSystemEnum["Teamcity"] = "Teamcity";
    VcsCommitInfoIntegrationSystemEnum["Jenkins"] = "Jenkins";
    VcsCommitInfoIntegrationSystemEnum["Bamboo"] = "Bamboo";
    VcsCommitInfoIntegrationSystemEnum["GitLab"] = "GitLab";
    VcsCommitInfoIntegrationSystemEnum["AzureDevOps"] = "AzureDevOps";
    VcsCommitInfoIntegrationSystemEnum["Jira"] = "Jira";
    VcsCommitInfoIntegrationSystemEnum["CircleCi"] = "CircleCI";
    VcsCommitInfoIntegrationSystemEnum["TravisCi"] = "TravisCI";
    VcsCommitInfoIntegrationSystemEnum["UrbanCodeDeploy"] = "UrbanCodeDeploy";
    VcsCommitInfoIntegrationSystemEnum["GitHubActions"] = "GitHubActions";
})(VcsCommitInfoIntegrationSystemEnum = exports.VcsCommitInfoIntegrationSystemEnum || (exports.VcsCommitInfoIntegrationSystemEnum = {}));
/**
 * Check if a given object implements the VcsCommitInfo interface.
 */
function instanceOfVcsCommitInfo(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfVcsCommitInfo = instanceOfVcsCommitInfo;
function VcsCommitInfoFromJSON(json) {
    return VcsCommitInfoFromJSONTyped(json, false);
}
exports.VcsCommitInfoFromJSON = VcsCommitInfoFromJSON;
function VcsCommitInfoFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'ciBuildConfigurationName': !(0, runtime_1.exists)(json, 'CiBuildConfigurationName') ? undefined : json['CiBuildConfigurationName'],
        'ciBuildHasChange': !(0, runtime_1.exists)(json, 'CiBuildHasChange') ? undefined : json['CiBuildHasChange'],
        'ciBuildId': !(0, runtime_1.exists)(json, 'CiBuildId') ? undefined : json['CiBuildId'],
        'ciBuildServerName': !(0, runtime_1.exists)(json, 'CiBuildServerName') ? undefined : json['CiBuildServerName'],
        'ciBuildServerVersion': !(0, runtime_1.exists)(json, 'CiBuildServerVersion') ? undefined : json['CiBuildServerVersion'],
        'ciBuildUrl': !(0, runtime_1.exists)(json, 'CiBuildUrl') ? undefined : json['CiBuildUrl'],
        'ciNcPluginVersion': !(0, runtime_1.exists)(json, 'CiNcPluginVersion') ? undefined : json['CiNcPluginVersion'],
        'ciTimestamp': !(0, runtime_1.exists)(json, 'CiTimestamp') ? undefined : (new Date(json['CiTimestamp'])),
        'comitterId': !(0, runtime_1.exists)(json, 'ComitterId') ? undefined : json['ComitterId'],
        'committer': !(0, runtime_1.exists)(json, 'Committer') ? undefined : json['Committer'],
        'committerName': !(0, runtime_1.exists)(json, 'CommitterName') ? undefined : json['CommitterName'],
        'committerOverride': !(0, runtime_1.exists)(json, 'CommitterOverride') ? undefined : json['CommitterOverride'],
        'integrationSystem': !(0, runtime_1.exists)(json, 'IntegrationSystem') ? undefined : json['IntegrationSystem'],
        'isCommiterExistAndAuthorizedInNc': !(0, runtime_1.exists)(json, 'IsCommiterExistAndAuthorizedInNc') ? undefined : json['IsCommiterExistAndAuthorizedInNc'],
        'vcsName': !(0, runtime_1.exists)(json, 'VcsName') ? undefined : json['VcsName'],
        'vcsVersion': !(0, runtime_1.exists)(json, 'VcsVersion') ? undefined : json['VcsVersion'],
    };
}
exports.VcsCommitInfoFromJSONTyped = VcsCommitInfoFromJSONTyped;
function VcsCommitInfoToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'CiBuildConfigurationName': value.ciBuildConfigurationName,
        'CiBuildHasChange': value.ciBuildHasChange,
        'CiBuildId': value.ciBuildId,
        'CiBuildServerVersion': value.ciBuildServerVersion,
        'CiBuildUrl': value.ciBuildUrl,
        'CiNcPluginVersion': value.ciNcPluginVersion,
        'CiTimestamp': value.ciTimestamp === undefined ? undefined : (value.ciTimestamp.toISOString()),
        'ComitterId': value.comitterId,
        'Committer': value.committer,
        'CommitterName': value.committerName,
        'CommitterOverride': value.committerOverride,
        'IntegrationSystem': value.integrationSystem,
        'IsCommiterExistAndAuthorizedInNc': value.isCommiterExistAndAuthorizedInNc,
        'VcsName': value.vcsName,
        'VcsVersion': value.vcsVersion,
    };
}
exports.VcsCommitInfoToJSON = VcsCommitInfoToJSON;
//# sourceMappingURL=VcsCommitInfo.js.map