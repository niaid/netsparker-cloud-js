"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitLabIntegrationInfoModelToJSON = exports.GitLabIntegrationInfoModelFromJSONTyped = exports.GitLabIntegrationInfoModelFromJSON = exports.instanceOfGitLabIntegrationInfoModel = exports.GitLabIntegrationInfoModelTemplateTypeEnum = exports.GitLabIntegrationInfoModelTypeEnum = void 0;
const runtime_1 = require("../runtime");
const IntegrationCustomFieldVm_1 = require("./IntegrationCustomFieldVm");
const IntegrationWizardResultModel_1 = require("./IntegrationWizardResultModel");
/**
* @export
* @enum {string}
*/
var GitLabIntegrationInfoModelTypeEnum;
(function (GitLabIntegrationInfoModelTypeEnum) {
    GitLabIntegrationInfoModelTypeEnum["Jira"] = "Jira";
    GitLabIntegrationInfoModelTypeEnum["GitHub"] = "GitHub";
    GitLabIntegrationInfoModelTypeEnum["Tfs"] = "TFS";
    GitLabIntegrationInfoModelTypeEnum["FogBugz"] = "FogBugz";
    GitLabIntegrationInfoModelTypeEnum["ServiceNow"] = "ServiceNow";
    GitLabIntegrationInfoModelTypeEnum["Slack"] = "Slack";
    GitLabIntegrationInfoModelTypeEnum["GitLab"] = "GitLab";
    GitLabIntegrationInfoModelTypeEnum["Bitbucket"] = "Bitbucket";
    GitLabIntegrationInfoModelTypeEnum["Unfuddle"] = "Unfuddle";
    GitLabIntegrationInfoModelTypeEnum["Zapier"] = "Zapier";
    GitLabIntegrationInfoModelTypeEnum["AzureDevOps"] = "AzureDevOps";
    GitLabIntegrationInfoModelTypeEnum["Redmine"] = "Redmine";
    GitLabIntegrationInfoModelTypeEnum["Bugzilla"] = "Bugzilla";
    GitLabIntegrationInfoModelTypeEnum["Kafka"] = "Kafka";
    GitLabIntegrationInfoModelTypeEnum["PagerDuty"] = "PagerDuty";
    GitLabIntegrationInfoModelTypeEnum["MicrosoftTeams"] = "MicrosoftTeams";
    GitLabIntegrationInfoModelTypeEnum["Clubhouse"] = "Clubhouse";
    GitLabIntegrationInfoModelTypeEnum["Trello"] = "Trello";
    GitLabIntegrationInfoModelTypeEnum["Asana"] = "Asana";
    GitLabIntegrationInfoModelTypeEnum["Webhook"] = "Webhook";
    GitLabIntegrationInfoModelTypeEnum["Kenna"] = "Kenna";
    GitLabIntegrationInfoModelTypeEnum["Freshservice"] = "Freshservice";
    GitLabIntegrationInfoModelTypeEnum["YouTrack"] = "YouTrack";
    GitLabIntegrationInfoModelTypeEnum["NetsparkerEnterprise"] = "NetsparkerEnterprise";
    GitLabIntegrationInfoModelTypeEnum["Splunk"] = "Splunk";
    GitLabIntegrationInfoModelTypeEnum["Mattermost"] = "Mattermost";
    GitLabIntegrationInfoModelTypeEnum["Hashicorp"] = "Hashicorp";
    GitLabIntegrationInfoModelTypeEnum["PivotalTracker"] = "PivotalTracker";
    GitLabIntegrationInfoModelTypeEnum["CyberArk"] = "CyberArk";
    GitLabIntegrationInfoModelTypeEnum["DefectDojo"] = "DefectDojo";
    GitLabIntegrationInfoModelTypeEnum["JazzTeam"] = "JazzTeam";
    GitLabIntegrationInfoModelTypeEnum["AzureKeyVault"] = "AzureKeyVault";
    GitLabIntegrationInfoModelTypeEnum["ServiceNowVrm"] = "ServiceNowVRM";
})(GitLabIntegrationInfoModelTypeEnum = exports.GitLabIntegrationInfoModelTypeEnum || (exports.GitLabIntegrationInfoModelTypeEnum = {}));
/**
* @export
* @enum {string}
*/
var GitLabIntegrationInfoModelTemplateTypeEnum;
(function (GitLabIntegrationInfoModelTemplateTypeEnum) {
    GitLabIntegrationInfoModelTemplateTypeEnum["Standard"] = "Standard";
    GitLabIntegrationInfoModelTemplateTypeEnum["Detailed"] = "Detailed";
})(GitLabIntegrationInfoModelTemplateTypeEnum = exports.GitLabIntegrationInfoModelTemplateTypeEnum || (exports.GitLabIntegrationInfoModelTemplateTypeEnum = {}));
/**
 * Check if a given object implements the GitLabIntegrationInfoModel interface.
 */
function instanceOfGitLabIntegrationInfoModel(value) {
    let isInstance = true;
    isInstance = isInstance && "accessToken" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "titleFormat" in value;
    return isInstance;
}
exports.instanceOfGitLabIntegrationInfoModel = instanceOfGitLabIntegrationInfoModel;
function GitLabIntegrationInfoModelFromJSON(json) {
    return GitLabIntegrationInfoModelFromJSONTyped(json, false);
}
exports.GitLabIntegrationInfoModelFromJSON = GitLabIntegrationInfoModelFromJSON;
function GitLabIntegrationInfoModelFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'accessToken': json['AccessToken'],
        'assigneeId': !(0, runtime_1.exists)(json, 'AssigneeId') ? undefined : json['AssigneeId'],
        'dueDays': !(0, runtime_1.exists)(json, 'DueDays') ? undefined : json['DueDays'],
        'labels': !(0, runtime_1.exists)(json, 'Labels') ? undefined : json['Labels'],
        'milestoneId': !(0, runtime_1.exists)(json, 'MilestoneId') ? undefined : json['MilestoneId'],
        'onPremiseBaseURL': !(0, runtime_1.exists)(json, 'OnPremiseBaseURL') ? undefined : json['OnPremiseBaseURL'],
        'projectId': json['ProjectId'],
        'weight': !(0, runtime_1.exists)(json, 'Weight') ? undefined : json['Weight'],
        'type': !(0, runtime_1.exists)(json, 'Type') ? undefined : json['Type'],
        'genericErrorMessage': !(0, runtime_1.exists)(json, 'GenericErrorMessage') ? undefined : json['GenericErrorMessage'],
        'identifier': !(0, runtime_1.exists)(json, 'Identifier') ? undefined : json['Identifier'],
        'testMessageBody': !(0, runtime_1.exists)(json, 'TestMessageBody') ? undefined : json['TestMessageBody'],
        'testMessageTitle': !(0, runtime_1.exists)(json, 'TestMessageTitle') ? undefined : json['TestMessageTitle'],
        'webhookUrl': !(0, runtime_1.exists)(json, 'WebhookUrl') ? undefined : json['WebhookUrl'],
        'name': !(0, runtime_1.exists)(json, 'Name') ? undefined : json['Name'],
        'integrationVersion': !(0, runtime_1.exists)(json, 'IntegrationVersion') ? undefined : json['IntegrationVersion'],
        'accountID': !(0, runtime_1.exists)(json, 'AccountID') ? undefined : json['AccountID'],
        'customFields': !(0, runtime_1.exists)(json, 'CustomFields') ? undefined : (json['CustomFields'].map(IntegrationCustomFieldVm_1.IntegrationCustomFieldVmFromJSON)),
        'templateType': !(0, runtime_1.exists)(json, 'TemplateType') ? undefined : json['TemplateType'],
        'reopenStatus': !(0, runtime_1.exists)(json, 'ReopenStatus') ? undefined : json['ReopenStatus'],
        'resolvedStatus': !(0, runtime_1.exists)(json, 'ResolvedStatus') ? undefined : json['ResolvedStatus'],
        'titleFormat': json['TitleFormat'],
        'integrationWizardResultModel': !(0, runtime_1.exists)(json, 'IntegrationWizardResultModel') ? undefined : (0, IntegrationWizardResultModel_1.IntegrationWizardResultModelFromJSON)(json['IntegrationWizardResultModel']),
    };
}
exports.GitLabIntegrationInfoModelFromJSONTyped = GitLabIntegrationInfoModelFromJSONTyped;
function GitLabIntegrationInfoModelToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'AccessToken': value.accessToken,
        'AssigneeId': value.assigneeId,
        'DueDays': value.dueDays,
        'Labels': value.labels,
        'MilestoneId': value.milestoneId,
        'OnPremiseBaseURL': value.onPremiseBaseURL,
        'ProjectId': value.projectId,
        'Weight': value.weight,
        'Name': value.name,
        'IntegrationVersion': value.integrationVersion,
        'AccountID': value.accountID,
        'CustomFields': value.customFields === undefined ? undefined : (value.customFields.map(IntegrationCustomFieldVm_1.IntegrationCustomFieldVmToJSON)),
        'TemplateType': value.templateType,
        'ReopenStatus': value.reopenStatus,
        'ResolvedStatus': value.resolvedStatus,
        'TitleFormat': value.titleFormat,
        'IntegrationWizardResultModel': (0, IntegrationWizardResultModel_1.IntegrationWizardResultModelToJSON)(value.integrationWizardResultModel),
    };
}
exports.GitLabIntegrationInfoModelToJSON = GitLabIntegrationInfoModelToJSON;
//# sourceMappingURL=GitLabIntegrationInfoModel.js.map