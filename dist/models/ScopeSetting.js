/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { exists } from '../runtime';
import { ExcludedLinkModelFromJSON, ExcludedLinkModelToJSON, } from './ExcludedLinkModel';
import { ExcludedUsageTrackerModelFromJSON, ExcludedUsageTrackerModelToJSON, } from './ExcludedUsageTrackerModel';
/**
 * @export
 */
export const ScopeSettingDisallowedHttpMethodsEnum = {
    Get: 'GET',
    Post: 'POST',
    Connect: 'CONNECT',
    Head: 'HEAD',
    Trace: 'TRACE',
    Debug: 'DEBUG',
    Track: 'TRACK',
    Put: 'PUT',
    Options: 'OPTIONS',
    Delete: 'DELETE',
    Link: 'LINK',
    Unlink: 'UNLINK',
    Patch: 'PATCH'
};
/**
 * @export
 */
export const ScopeSettingScopeEnum = {
    EnteredPathAndBelow: 'EnteredPathAndBelow',
    OnlyEnteredUrl: 'OnlyEnteredUrl',
    WholeDomain: 'WholeDomain'
};
/**
 * Check if a given object implements the ScopeSetting interface.
 */
export function instanceOfScopeSetting(value) {
    let isInstance = true;
    return isInstance;
}
export function ScopeSettingFromJSON(json) {
    return ScopeSettingFromJSONTyped(json, false);
}
export function ScopeSettingFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'excludedLinks': !exists(json, 'ExcludedLinks') ? undefined : (json['ExcludedLinks'].map(ExcludedLinkModelFromJSON)),
        'excludeLinks': !exists(json, 'ExcludeLinks') ? undefined : json['ExcludeLinks'],
        'excludedUsageTrackers': !exists(json, 'ExcludedUsageTrackers') ? undefined : (json['ExcludedUsageTrackers'].map(ExcludedUsageTrackerModelFromJSON)),
        'excludeAuthenticationPages': !exists(json, 'ExcludeAuthenticationPages') ? undefined : json['ExcludeAuthenticationPages'],
        'disallowedHttpMethods': !exists(json, 'DisallowedHttpMethods') ? undefined : json['DisallowedHttpMethods'],
        'scope': !exists(json, 'Scope') ? undefined : json['Scope'],
        'doNotDifferentiateProtocols': !exists(json, 'DoNotDifferentiateProtocols') ? undefined : json['DoNotDifferentiateProtocols'],
    };
}
export function ScopeSettingToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'ExcludedLinks': value.excludedLinks === undefined ? undefined : (value.excludedLinks.map(ExcludedLinkModelToJSON)),
        'ExcludeLinks': value.excludeLinks,
        'ExcludedUsageTrackers': value.excludedUsageTrackers === undefined ? undefined : (value.excludedUsageTrackers.map(ExcludedUsageTrackerModelToJSON)),
        'ExcludeAuthenticationPages': value.excludeAuthenticationPages,
        'DisallowedHttpMethods': value.disallowedHttpMethods,
        'Scope': value.scope,
        'DoNotDifferentiateProtocols': value.doNotDifferentiateProtocols,
    };
}
//# sourceMappingURL=ScopeSetting.js.map