"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormValueSettingModelToJSON = exports.FormValueSettingModelFromJSONTyped = exports.FormValueSettingModelFromJSON = exports.instanceOfFormValueSettingModel = exports.FormValueSettingModelMatchTargetValueEnum = exports.FormValueSettingModelMatchTargetEnum = exports.FormValueSettingModelMatchEnum = void 0;
const runtime_1 = require("../runtime");
/**
 * @export
 */
exports.FormValueSettingModelMatchEnum = {
    RegEx: 'RegEx',
    Exact: 'Exact',
    Contains: 'Contains',
    Starts: 'Starts',
    Ends: 'Ends'
};
/**
 * @export
 */
exports.FormValueSettingModelMatchTargetEnum = {
    Name: 'Name',
    Label: 'Label',
    Placeholder: 'Placeholder',
    Id: 'Id'
};
/**
 * @export
 */
exports.FormValueSettingModelMatchTargetValueEnum = {
    Name: 'Name',
    Label: 'Label',
    Placeholder: 'Placeholder',
    Id: 'Id'
};
/**
 * Check if a given object implements the FormValueSettingModel interface.
 */
function instanceOfFormValueSettingModel(value) {
    let isInstance = true;
    isInstance = isInstance && "matchTargetValue" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "value" in value;
    return isInstance;
}
exports.instanceOfFormValueSettingModel = instanceOfFormValueSettingModel;
function FormValueSettingModelFromJSON(json) {
    return FormValueSettingModelFromJSONTyped(json, false);
}
exports.FormValueSettingModelFromJSON = FormValueSettingModelFromJSON;
function FormValueSettingModelFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'force': !(0, runtime_1.exists)(json, 'Force') ? undefined : json['Force'],
        'match': !(0, runtime_1.exists)(json, 'Match') ? undefined : json['Match'],
        'matchTarget': !(0, runtime_1.exists)(json, 'MatchTarget') ? undefined : json['MatchTarget'],
        'matchTargetValue': json['MatchTargetValue'],
        'name': json['Name'],
        'pattern': !(0, runtime_1.exists)(json, 'Pattern') ? undefined : json['Pattern'],
        'type': !(0, runtime_1.exists)(json, 'Type') ? undefined : json['Type'],
        'value': json['Value'],
    };
}
exports.FormValueSettingModelFromJSONTyped = FormValueSettingModelFromJSONTyped;
function FormValueSettingModelToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'Force': value.force,
        'Match': value.match,
        'MatchTarget': value.matchTarget,
        'MatchTargetValue': value.matchTargetValue,
        'Name': value.name,
        'Pattern': value.pattern,
        'Type': value.type,
        'Value': value.value,
    };
}
exports.FormValueSettingModelToJSON = FormValueSettingModelToJSON;
//# sourceMappingURL=FormValueSettingModel.js.map