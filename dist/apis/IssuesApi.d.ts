/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AllIssuesApiModel, IssueApiResult, IssueApiUpdateModel, IssueSummaryApiResult, VulnerabilityContentApiModel } from '../models/index';
export interface IssuesApiIssuesAddressedIssuesRequest {
    severity?: IssuesAddressedIssuesSeverityEnum;
    webSiteName?: string;
    websiteGroupName?: string;
    page?: number;
    pageSize?: number;
}
export interface IssuesApiIssuesAllIssuesRequest {
    severity?: IssuesAllIssuesSeverityEnum;
    webSiteName?: string;
    websiteGroupName?: string;
    page?: number;
    pageSize?: number;
    sortType?: IssuesAllIssuesSortTypeEnum;
    lastSeenDate?: string;
    rawDetails?: boolean;
    integration?: IssuesAllIssuesIntegrationEnum;
}
export interface IssuesApiIssuesGetRequest {
    id: string;
}
export interface IssuesApiIssuesGetVulnerabilityContentRequest {
    id: string;
}
export interface IssuesApiIssuesReportRequest {
    csvSeparator?: IssuesReportCsvSeparatorEnum;
    severity?: IssuesReportSeverityEnum;
    websiteGroupName?: string;
    webSiteName?: string;
    startDate?: Date;
    endDate?: Date;
}
export interface IssuesApiIssuesSummaryRequest {
    targetUri: string;
    websiteRoot: string;
    sinceDate?: string;
    scanTaskGroupId?: string;
    page?: number;
    pageSize?: number;
}
export interface IssuesApiIssuesTodoRequest {
    severity?: IssuesTodoSeverityEnum;
    webSiteName?: string;
    websiteGroupName?: string;
    page?: number;
    pageSize?: number;
}
export interface IssuesApiIssuesUpdateRequest {
    model: IssueApiUpdateModel;
}
export interface IssuesApiIssuesWaitingForRetestRequest {
    severity?: IssuesWaitingForRetestSeverityEnum;
    webSiteName?: string;
    websiteGroupName?: string;
    page?: number;
    pageSize?: number;
}
/**
 *
 */
export declare class IssuesApi extends runtime.BaseAPI {
    /**
     * Gets the list of addressed issues.
     */
    issuesAddressedIssuesRaw(requestParameters: IssuesApiIssuesAddressedIssuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueApiResult>>;
    /**
     * Gets the list of addressed issues.
     */
    issuesAddressedIssues(requestParameters?: IssuesApiIssuesAddressedIssuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueApiResult>;
    /**
     * Gets the list of all issues.
     */
    issuesAllIssuesRaw(requestParameters: IssuesApiIssuesAllIssuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueApiResult>>;
    /**
     * Gets the list of all issues.
     */
    issuesAllIssues(requestParameters?: IssuesApiIssuesAllIssuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueApiResult>;
    /**
     * Gets issues by id. Returns with encoded(raw html) vulnerability template data by default.
     */
    issuesGetRaw(requestParameters: IssuesApiIssuesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllIssuesApiModel>>;
    /**
     * Gets issues by id. Returns with encoded(raw html) vulnerability template data by default.
     */
    issuesGet(requestParameters: IssuesApiIssuesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllIssuesApiModel>;
    /**
     * Gets vulnerability request/response content by id.
     */
    issuesGetVulnerabilityContentRaw(requestParameters: IssuesApiIssuesGetVulnerabilityContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VulnerabilityContentApiModel>>;
    /**
     * Gets vulnerability request/response content by id.
     */
    issuesGetVulnerabilityContent(requestParameters: IssuesApiIssuesGetVulnerabilityContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VulnerabilityContentApiModel>;
    /**
     * Generates a report of issues in the CSV format.
     */
    issuesReportRaw(requestParameters: IssuesApiIssuesReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Generates a report of issues in the CSV format.
     */
    issuesReport(requestParameters?: IssuesApiIssuesReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Gets the summary of vulnerabilities
     */
    issuesSummaryRaw(requestParameters: IssuesApiIssuesSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueSummaryApiResult>>;
    /**
     * Gets the summary of vulnerabilities
     */
    issuesSummary(requestParameters: IssuesApiIssuesSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueSummaryApiResult>;
    /**
     * Gets the list of to-do issues.
     */
    issuesTodoRaw(requestParameters: IssuesApiIssuesTodoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueApiResult>>;
    /**
     * Gets the list of to-do issues.
     */
    issuesTodo(requestParameters?: IssuesApiIssuesTodoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueApiResult>;
    /**
     * Updates an existing issue.
     */
    issuesUpdateRaw(requestParameters: IssuesApiIssuesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Updates an existing issue.
     */
    issuesUpdate(requestParameters: IssuesApiIssuesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Gets the list of retest issues.
     */
    issuesWaitingForRetestRaw(requestParameters: IssuesApiIssuesWaitingForRetestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueApiResult>>;
    /**
     * Gets the list of retest issues.
     */
    issuesWaitingForRetest(requestParameters?: IssuesApiIssuesWaitingForRetestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueApiResult>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum IssuesAddressedIssuesSeverityEnum {
    BestPractice = "BestPractice",
    Information = "Information",
    Low = "Low",
    Medium = "Medium",
    High = "High",
    Critical = "Critical"
}
/**
  * @export
  * @enum {string}
  */
export declare enum IssuesAllIssuesSeverityEnum {
    BestPractice = "BestPractice",
    Information = "Information",
    Low = "Low",
    Medium = "Medium",
    High = "High",
    Critical = "Critical"
}
/**
  * @export
  * @enum {string}
  */
export declare enum IssuesAllIssuesSortTypeEnum {
    Ascending = "Ascending",
    Descending = "Descending"
}
/**
  * @export
  * @enum {string}
  */
export declare enum IssuesAllIssuesIntegrationEnum {
    Jira = "Jira",
    GitHub = "GitHub",
    Tfs = "TFS",
    FogBugz = "FogBugz",
    ServiceNow = "ServiceNow",
    Slack = "Slack",
    GitLab = "GitLab",
    Bitbucket = "Bitbucket",
    Unfuddle = "Unfuddle",
    Zapier = "Zapier",
    AzureDevOps = "AzureDevOps",
    Redmine = "Redmine",
    Bugzilla = "Bugzilla",
    Kafka = "Kafka",
    PagerDuty = "PagerDuty",
    MicrosoftTeams = "MicrosoftTeams",
    Clubhouse = "Clubhouse",
    Trello = "Trello",
    Asana = "Asana",
    Webhook = "Webhook",
    Kenna = "Kenna",
    Freshservice = "Freshservice",
    YouTrack = "YouTrack",
    NetsparkerEnterprise = "NetsparkerEnterprise",
    Splunk = "Splunk",
    Mattermost = "Mattermost",
    Hashicorp = "Hashicorp",
    PivotalTracker = "PivotalTracker",
    CyberArk = "CyberArk",
    DefectDojo = "DefectDojo",
    JazzTeam = "JazzTeam",
    AzureKeyVault = "AzureKeyVault",
    ServiceNowVrm = "ServiceNowVRM"
}
/**
  * @export
  * @enum {string}
  */
export declare enum IssuesReportCsvSeparatorEnum {
    Comma = "Comma",
    Semicolon = "Semicolon",
    Pipe = "Pipe",
    Tab = "Tab"
}
/**
  * @export
  * @enum {string}
  */
export declare enum IssuesReportSeverityEnum {
    BestPractice = "BestPractice",
    Information = "Information",
    Low = "Low",
    Medium = "Medium",
    High = "High",
    Critical = "Critical"
}
/**
  * @export
  * @enum {string}
  */
export declare enum IssuesTodoSeverityEnum {
    BestPractice = "BestPractice",
    Information = "Information",
    Low = "Low",
    Medium = "Medium",
    High = "High",
    Critical = "Critical"
}
/**
  * @export
  * @enum {string}
  */
export declare enum IssuesWaitingForRetestSeverityEnum {
    BestPractice = "BestPractice",
    Information = "Information",
    Low = "Low",
    Medium = "Medium",
    High = "High",
    Critical = "Critical"
}
