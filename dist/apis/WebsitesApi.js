"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebsitesApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class WebsitesApi extends runtime.BaseAPI {
    /**
     * Deletes a website.
     */
    async websitesDeleteRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling websitesDelete().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/websites/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.DeleteWebsiteApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Deletes a website.
     */
    async websitesDelete(requestParameters, initOverrides) {
        const response = await this.websitesDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets website by id.
     */
    async websitesGetByIdRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling websitesGetById().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/websites/get/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WebsiteApiModelFromJSON)(jsonValue));
    }
    /**
     * Gets website by id.
     */
    async websitesGetById(requestParameters, initOverrides) {
        const response = await this.websitesGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets website by name or URL.
     */
    async websitesGetByQueryRaw(requestParameters, initOverrides) {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError('query', 'Required parameter "query" was null or undefined when calling websitesGetByQuery().');
        }
        const queryParameters = {};
        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/websites/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WebsiteApiModelFromJSON)(jsonValue));
    }
    /**
     * Gets website by name or URL.
     */
    async websitesGetByQuery(requestParameters, initOverrides) {
        const response = await this.websitesGetByQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of websites by group name or id.
     */
    async websitesGetWebsitesByGroupRaw(requestParameters, initOverrides) {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError('query', 'Required parameter "query" was null or undefined when calling websitesGetWebsitesByGroup().');
        }
        const queryParameters = {};
        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }
        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }
        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/websites/getwebsitesbygroup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WebsiteListApiResultFromJSON)(jsonValue));
    }
    /**
     * Gets the list of websites by group name or id.
     */
    async websitesGetWebsitesByGroup(requestParameters, initOverrides) {
        const response = await this.websitesGetWebsitesByGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of websites.
     */
    async websitesListRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }
        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/websites/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WebsiteListApiResultFromJSON)(jsonValue));
    }
    /**
     * Gets the list of websites.
     */
    async websitesList(requestParameters = {}, initOverrides) {
        const response = await this.websitesListRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Creates a new website.
     */
    async websitesNewRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling websitesNew().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/websites/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.NewWebsiteApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WebsiteApiModelFromJSON)(jsonValue));
    }
    /**
     * Creates a new website.
     */
    async websitesNew(requestParameters, initOverrides) {
        const response = await this.websitesNewRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Sends the verification email if verification limit not exceeded yet.
     */
    async websitesSendVerificationEmailRaw(requestParameters, initOverrides) {
        if (requestParameters['websiteUrl'] == null) {
            throw new runtime.RequiredError('websiteUrl', 'Required parameter "websiteUrl" was null or undefined when calling websitesSendVerificationEmail().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/websites/sendverificationemail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['websiteUrl'],
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SendVerificationEmailModelFromJSON)(jsonValue));
    }
    /**
     * Sends the verification email if verification limit not exceeded yet.
     */
    async websitesSendVerificationEmail(requestParameters, initOverrides) {
        const response = await this.websitesSendVerificationEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Starts the verification with specified method.
     */
    async websitesStartVerificationRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling websitesStartVerification().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/websites/startverification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.StartVerificationApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StartVerificationResultFromJSON)(jsonValue));
    }
    /**
     * Starts the verification with specified method.
     */
    async websitesStartVerification(requestParameters, initOverrides) {
        const response = await this.websitesStartVerificationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Updates a website.
     */
    async websitesUpdateRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling websitesUpdate().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/websites/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.UpdateWebsiteApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WebsiteApiModelFromJSON)(jsonValue));
    }
    /**
     * Updates a website.
     */
    async websitesUpdate(requestParameters, initOverrides) {
        const response = await this.websitesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Renders verification file.
     */
    async websitesVerificationFileRaw(requestParameters, initOverrides) {
        if (requestParameters['websiteUrl'] == null) {
            throw new runtime.RequiredError('websiteUrl', 'Required parameter "websiteUrl" was null or undefined when calling websitesVerificationFile().');
        }
        const queryParameters = {};
        if (requestParameters['websiteUrl'] != null) {
            queryParameters['websiteUrl'] = requestParameters['websiteUrl'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/websites/verificationfile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Renders verification file.
     */
    async websitesVerificationFile(requestParameters, initOverrides) {
        await this.websitesVerificationFileRaw(requestParameters, initOverrides);
    }
    /**
     * Executes verification process.
     */
    async websitesVerifyRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling websitesVerify().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/websites/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.VerifyApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Executes verification process.
     */
    async websitesVerify(requestParameters, initOverrides) {
        const response = await this.websitesVerifyRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.WebsitesApi = WebsitesApi;
//# sourceMappingURL=WebsitesApi.js.map