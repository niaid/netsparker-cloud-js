/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { DeleteWebsiteApiModelToJSON, NewWebsiteApiModelToJSON, SendVerificationEmailModelFromJSON, StartVerificationApiModelToJSON, StartVerificationResultFromJSON, UpdateWebsiteApiModelToJSON, VerifyApiModelToJSON, WebsiteApiModelFromJSON, WebsiteListApiResultFromJSON, } from '../models/index';
/**
 *
 */
export class WebsitesApi extends runtime.BaseAPI {
    /**
     * Deletes a website.
     */
    async websitesDeleteRaw(requestParameters, initOverrides) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling websitesDelete.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/websites/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteWebsiteApiModelToJSON(requestParameters.model),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Deletes a website.
     */
    async websitesDelete(requestParameters, initOverrides) {
        const response = await this.websitesDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets website by id.
     */
    async websitesGetByIdRaw(requestParameters, initOverrides) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling websitesGetById.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/websites/get/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteApiModelFromJSON(jsonValue));
    }
    /**
     * Gets website by id.
     */
    async websitesGetById(requestParameters, initOverrides) {
        const response = await this.websitesGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets website by name or URL.
     */
    async websitesGetByQueryRaw(requestParameters, initOverrides) {
        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query', 'Required parameter requestParameters.query was null or undefined when calling websitesGetByQuery.');
        }
        const queryParameters = {};
        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/websites/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteApiModelFromJSON(jsonValue));
    }
    /**
     * Gets website by name or URL.
     */
    async websitesGetByQuery(requestParameters, initOverrides) {
        const response = await this.websitesGetByQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of websites by group name or id.
     */
    async websitesGetWebsitesByGroupRaw(requestParameters, initOverrides) {
        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query', 'Required parameter requestParameters.query was null or undefined when calling websitesGetWebsitesByGroup.');
        }
        const queryParameters = {};
        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/websites/getwebsitesbygroup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteListApiResultFromJSON(jsonValue));
    }
    /**
     * Gets the list of websites by group name or id.
     */
    async websitesGetWebsitesByGroup(requestParameters, initOverrides) {
        const response = await this.websitesGetWebsitesByGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of websites.
     */
    async websitesListRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/websites/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteListApiResultFromJSON(jsonValue));
    }
    /**
     * Gets the list of websites.
     */
    async websitesList(requestParameters = {}, initOverrides) {
        const response = await this.websitesListRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Creates a new website.
     */
    async websitesNewRaw(requestParameters, initOverrides) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling websitesNew.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/websites/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewWebsiteApiModelToJSON(requestParameters.model),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteApiModelFromJSON(jsonValue));
    }
    /**
     * Creates a new website.
     */
    async websitesNew(requestParameters, initOverrides) {
        const response = await this.websitesNewRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Sends the verification email if verification limit not exceeded yet.
     */
    async websitesSendVerificationEmailRaw(requestParameters, initOverrides) {
        if (requestParameters.websiteUrl === null || requestParameters.websiteUrl === undefined) {
            throw new runtime.RequiredError('websiteUrl', 'Required parameter requestParameters.websiteUrl was null or undefined when calling websitesSendVerificationEmail.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/websites/sendverificationemail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.websiteUrl,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SendVerificationEmailModelFromJSON(jsonValue));
    }
    /**
     * Sends the verification email if verification limit not exceeded yet.
     */
    async websitesSendVerificationEmail(requestParameters, initOverrides) {
        const response = await this.websitesSendVerificationEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Starts the verification with specified method.
     */
    async websitesStartVerificationRaw(requestParameters, initOverrides) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling websitesStartVerification.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/websites/startverification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartVerificationApiModelToJSON(requestParameters.model),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => StartVerificationResultFromJSON(jsonValue));
    }
    /**
     * Starts the verification with specified method.
     */
    async websitesStartVerification(requestParameters, initOverrides) {
        const response = await this.websitesStartVerificationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Updates a website.
     */
    async websitesUpdateRaw(requestParameters, initOverrides) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling websitesUpdate.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/websites/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWebsiteApiModelToJSON(requestParameters.model),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteApiModelFromJSON(jsonValue));
    }
    /**
     * Updates a website.
     */
    async websitesUpdate(requestParameters, initOverrides) {
        const response = await this.websitesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Renders verification file.
     */
    async websitesVerificationFileRaw(requestParameters, initOverrides) {
        if (requestParameters.websiteUrl === null || requestParameters.websiteUrl === undefined) {
            throw new runtime.RequiredError('websiteUrl', 'Required parameter requestParameters.websiteUrl was null or undefined when calling websitesVerificationFile.');
        }
        const queryParameters = {};
        if (requestParameters.websiteUrl !== undefined) {
            queryParameters['websiteUrl'] = requestParameters.websiteUrl;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/websites/verificationfile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Renders verification file.
     */
    async websitesVerificationFile(requestParameters, initOverrides) {
        await this.websitesVerificationFileRaw(requestParameters, initOverrides);
    }
    /**
     * Executes verification process.
     */
    async websitesVerifyRaw(requestParameters, initOverrides) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling websitesVerify.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/websites/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyApiModelToJSON(requestParameters.model),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Executes verification process.
     */
    async websitesVerify(requestParameters, initOverrides) {
        const response = await this.websitesVerifyRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
//# sourceMappingURL=WebsitesApi.js.map