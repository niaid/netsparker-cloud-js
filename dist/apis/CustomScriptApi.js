/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CustomScriptRequestApiModelToJSON, CustomScriptUpdateRequestApiModelToJSON, } from '../models/index';
/**
 *
 */
export class CustomScriptApi extends runtime.BaseAPI {
    /**
     * Deletes Custom Scripts
     */
    async customScriptDeleteRaw(requestParameters, initOverrides) {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError('ids', 'Required parameter requestParameters.ids was null or undefined when calling customScriptDelete.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/customscript/delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.ids,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Deletes Custom Scripts
     */
    async customScriptDelete(requestParameters, initOverrides) {
        const response = await this.customScriptDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Lists Custom Scripts
     */
    async customScriptListRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/customscript/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Lists Custom Scripts
     */
    async customScriptList(initOverrides) {
        const response = await this.customScriptListRaw(initOverrides);
        return await response.value();
    }
    /**
     * Creates Custom Scripts
     */
    async customScriptNewRaw(requestParameters, initOverrides) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling customScriptNew.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/customscript/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.model.map(CustomScriptRequestApiModelToJSON),
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Creates Custom Scripts
     */
    async customScriptNew(requestParameters, initOverrides) {
        const response = await this.customScriptNewRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Updates Custom Scripts
     */
    async customScriptUpdateRaw(requestParameters, initOverrides) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling customScriptUpdate.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/customscript/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.model.map(CustomScriptUpdateRequestApiModelToJSON),
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Updates Custom Scripts
     */
    async customScriptUpdate(requestParameters, initOverrides) {
        const response = await this.customScriptUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
//# sourceMappingURL=CustomScriptApi.js.map