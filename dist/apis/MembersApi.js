"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MembersApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class MembersApi extends runtime.BaseAPI {
    /**
     * Deletes a member
     */
    async membersDeleteRaw(requestParameters, initOverrides) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling membersDelete.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/members/delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Deletes a member
     */
    async membersDelete(requestParameters, initOverrides) {
        const response = await this.membersDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Deletes member invitation
     */
    async membersDeleteInvitationRaw(requestParameters, initOverrides) {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email', 'Required parameter requestParameters.email was null or undefined when calling membersDeleteInvitation.');
        }
        const queryParameters = {};
        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/members/deleteinvitation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Deletes member invitation
     */
    async membersDeleteInvitation(requestParameters, initOverrides) {
        await this.membersDeleteInvitationRaw(requestParameters, initOverrides);
    }
    /**
     * Gets the member by the specified id.
     */
    async membersGetRaw(requestParameters, initOverrides) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling membersGet.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/members/get/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MemberApiViewModelFromJSON)(jsonValue));
    }
    /**
     * Gets the member by the specified id.
     */
    async membersGet(requestParameters, initOverrides) {
        const response = await this.membersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets user api token.
     */
    async membersGetApiTokenRaw(requestParameters, initOverrides) {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email', 'Required parameter requestParameters.email was null or undefined when calling membersGetApiToken.');
        }
        const queryParameters = {};
        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/members/getapitoken`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UserApiTokenModelFromJSON)(jsonValue));
    }
    /**
     * Gets user api token.
     */
    async membersGetApiToken(requestParameters, initOverrides) {
        const response = await this.membersGetApiTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets user by email.
     */
    async membersGetByEmailRaw(requestParameters, initOverrides) {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email', 'Required parameter requestParameters.email was null or undefined when calling membersGetByEmail.');
        }
        const queryParameters = {};
        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/members/getbyemail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MemberApiViewModelFromJSON)(jsonValue));
    }
    /**
     * Gets user by email.
     */
    async membersGetByEmail(requestParameters, initOverrides) {
        const response = await this.membersGetByEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the member invitation by the specified id.
     */
    async membersGetInvitationRaw(requestParameters, initOverrides) {
        if (requestParameters.invitationId === null || requestParameters.invitationId === undefined) {
            throw new runtime.RequiredError('invitationId', 'Required parameter requestParameters.invitationId was null or undefined when calling membersGetInvitation.');
        }
        const queryParameters = {};
        if (requestParameters.invitationId !== undefined) {
            queryParameters['invitationId'] = requestParameters.invitationId;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/members/getinvitation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MemberInvitationDtoFromJSON)(jsonValue));
    }
    /**
     * Gets the member invitation by the specified id.
     */
    async membersGetInvitation(requestParameters, initOverrides) {
        const response = await this.membersGetInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets a list all of the time zones.
     */
    async membersGetTimezonesRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/members/gettimezones`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TimezoneApiModelFromJSON)(jsonValue));
    }
    /**
     * Gets a list all of the time zones.
     */
    async membersGetTimezones(initOverrides) {
        const response = await this.membersGetTimezonesRaw(initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of members.
     */
    async membersInvitationListRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/members/invitationlist`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MemberInvitationPagedListDtoFromJSON)(jsonValue));
    }
    /**
     * Gets the list of members.
     */
    async membersInvitationList(requestParameters = {}, initOverrides) {
        const response = await this.membersInvitationListRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of members.
     */
    async membersListRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/members/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MemberApiModelListApiResultFromJSON)(jsonValue));
    }
    /**
     * Gets the list of members.
     */
    async membersList(requestParameters = {}, initOverrides) {
        const response = await this.membersListRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Creates a new member.
     */
    async membersNewRaw(requestParameters, initOverrides) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling membersNew.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/members/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.NewMemberApiModelToJSON)(requestParameters.model),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MemberApiViewModelFromJSON)(jsonValue));
    }
    /**
     * Creates a new member.
     */
    async membersNew(requestParameters, initOverrides) {
        const response = await this.membersNewRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Creates a new member invitation
     */
    async membersNewInvitationRaw(requestParameters, initOverrides) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling membersNewInvitation.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/members/newinvitation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.NewMemberInvitationApiModelToJSON)(requestParameters.model),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Creates a new member invitation
     */
    async membersNewInvitation(requestParameters, initOverrides) {
        await this.membersNewInvitationRaw(requestParameters, initOverrides);
    }
    /**
     * Sends member invitation email
     */
    async membersSendInvitationEmailRaw(requestParameters, initOverrides) {
        if (requestParameters.invitationId === null || requestParameters.invitationId === undefined) {
            throw new runtime.RequiredError('invitationId', 'Required parameter requestParameters.invitationId was null or undefined when calling membersSendInvitationEmail.');
        }
        const queryParameters = {};
        if (requestParameters.invitationId !== undefined) {
            queryParameters['invitationId'] = requestParameters.invitationId;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/members/sendinvitationemail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Sends member invitation email
     */
    async membersSendInvitationEmail(requestParameters, initOverrides) {
        await this.membersSendInvitationEmailRaw(requestParameters, initOverrides);
    }
    /**
     * Updates a member
     */
    async membersUpdateRaw(requestParameters, initOverrides) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling membersUpdate.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/members/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.UpdateMemberApiModelToJSON)(requestParameters.model),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MemberApiViewModelFromJSON)(jsonValue));
    }
    /**
     * Updates a member
     */
    async membersUpdate(requestParameters, initOverrides) {
        const response = await this.membersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.MembersApi = MembersApi;
//# sourceMappingURL=MembersApi.js.map