"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScansValidateImportedLinksFileImportTypeEnum = exports.ScansReportContentFormatEnum = exports.ScansReportTypeEnum = exports.ScansReportFormatEnum = exports.ScansListByWebsiteInitiatedDateSortTypeEnum = exports.ScansListByStateScanTaskStateEnum = exports.ScansDownloadPciScanReportReportTypeEnum = exports.ScansCustomReportReportFormatEnum = exports.ScansApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class ScansApi extends runtime.BaseAPI {
    /**
     * Stops a scan in progress.
     */
    async scansCancelRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling scansCancel().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scans/cancel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['id'],
        }, initOverrides);
        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Stops a scan in progress.
     */
    async scansCancel(requestParameters, initOverrides) {
        const response = await this.scansCancelRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns the custom report of a scan in the specified format.
     */
    async scansCustomReportRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling scansCustomReport().');
        }
        if (requestParameters['reportName'] == null) {
            throw new runtime.RequiredError('reportName', 'Required parameter "reportName" was null or undefined when calling scansCustomReport().');
        }
        const queryParameters = {};
        if (requestParameters['excludeIgnoreds'] != null) {
            queryParameters['excludeIgnoreds'] = requestParameters['excludeIgnoreds'];
        }
        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }
        if (requestParameters['onlyConfirmedVulnerabilities'] != null) {
            queryParameters['onlyConfirmedVulnerabilities'] = requestParameters['onlyConfirmedVulnerabilities'];
        }
        if (requestParameters['onlyUnconfirmedVulnerabilities'] != null) {
            queryParameters['onlyUnconfirmedVulnerabilities'] = requestParameters['onlyUnconfirmedVulnerabilities'];
        }
        if (requestParameters['reportName'] != null) {
            queryParameters['reportName'] = requestParameters['reportName'];
        }
        if (requestParameters['reportFormat'] != null) {
            queryParameters['reportFormat'] = requestParameters['reportFormat'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scans/custom-report/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Returns the custom report of a scan in the specified format.
     */
    async scansCustomReport(requestParameters, initOverrides) {
        await this.scansCustomReportRaw(requestParameters, initOverrides);
    }
    /**
     * Deletes scan data.
     */
    async scansDeleteRaw(requestParameters, initOverrides) {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError('ids', 'Required parameter "ids" was null or undefined when calling scansDelete().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scans/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['ids'],
        }, initOverrides);
        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Deletes scan data.
     */
    async scansDelete(requestParameters, initOverrides) {
        const response = await this.scansDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the detail of a scan.
     */
    async scansDetailRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling scansDetail().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scans/detail/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScanTaskModelFromJSON)(jsonValue));
    }
    /**
     * Gets the detail of a scan.
     */
    async scansDetail(requestParameters, initOverrides) {
        const response = await this.scansDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Downloads the pci scan report based on report type
     */
    async scansDownloadPciScanReportRaw(requestParameters, initOverrides) {
        if (requestParameters['scanId'] == null) {
            throw new runtime.RequiredError('scanId', 'Required parameter "scanId" was null or undefined when calling scansDownloadPciScanReport().');
        }
        if (requestParameters['reportType'] == null) {
            throw new runtime.RequiredError('reportType', 'Required parameter "reportType" was null or undefined when calling scansDownloadPciScanReport().');
        }
        const queryParameters = {};
        if (requestParameters['scanId'] != null) {
            queryParameters['scanId'] = requestParameters['scanId'];
        }
        if (requestParameters['reportType'] != null) {
            queryParameters['reportType'] = requestParameters['reportType'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scans/downloadpciscanreport`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.BlobApiResponse(response);
    }
    /**
     * Downloads the pci scan report based on report type
     */
    async scansDownloadPciScanReport(requestParameters, initOverrides) {
        const response = await this.scansDownloadPciScanReportRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Downloads the scan file as zip
     */
    async scansDownloadScanFileRaw(requestParameters, initOverrides) {
        if (requestParameters['scanId'] == null) {
            throw new runtime.RequiredError('scanId', 'Required parameter "scanId" was null or undefined when calling scansDownloadScanFile().');
        }
        const queryParameters = {};
        if (requestParameters['scanId'] != null) {
            queryParameters['scanId'] = requestParameters['scanId'];
        }
        if (requestParameters['isWindowsCompatible'] != null) {
            queryParameters['isWindowsCompatible'] = requestParameters['isWindowsCompatible'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scans/downloadscanfile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.BlobApiResponse(response);
    }
    /**
     * Downloads the scan file as zip
     */
    async scansDownloadScanFile(requestParameters, initOverrides) {
        const response = await this.scansDownloadScanFileRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Downloads the scan file as zip
     */
    async scansDownloadScanFileCheckRaw(requestParameters, initOverrides) {
        if (requestParameters['scanId'] == null) {
            throw new runtime.RequiredError('scanId', 'Required parameter "scanId" was null or undefined when calling scansDownloadScanFileCheck().');
        }
        const queryParameters = {};
        if (requestParameters['scanId'] != null) {
            queryParameters['scanId'] = requestParameters['scanId'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scans/downloadscanfilecheck`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Downloads the scan file as zip
     */
    async scansDownloadScanFileCheck(requestParameters, initOverrides) {
        const response = await this.scansDownloadScanFileCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Launches an incremental scan based on the provided base scan identifier.
     */
    async scansIncrementalRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling scansIncremental().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scans/incremental`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.IncrementalApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScanTaskModelFromJSON)(jsonValue));
    }
    /**
     * Launches an incremental scan based on the provided base scan identifier.
     */
    async scansIncremental(requestParameters, initOverrides) {
        const response = await this.scansIncrementalRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of scans and their details.
     */
    async scansListRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }
        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scans/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScanTaskListApiResultFromJSON)(jsonValue));
    }
    /**
     * Gets the list of scans and their details.
     */
    async scansList(requestParameters = {}, initOverrides) {
        const response = await this.scansListRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of scans by state
     */
    async scansListByStateRaw(requestParameters, initOverrides) {
        if (requestParameters['scanTaskState'] == null) {
            throw new runtime.RequiredError('scanTaskState', 'Required parameter "scanTaskState" was null or undefined when calling scansListByState().');
        }
        const queryParameters = {};
        if (requestParameters['scanTaskState'] != null) {
            queryParameters['scanTaskState'] = requestParameters['scanTaskState'];
        }
        if (requestParameters['targetUrlCriteria'] != null) {
            queryParameters['targetUrlCriteria'] = requestParameters['targetUrlCriteria'];
        }
        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }
        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }
        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'].toISOString();
        }
        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'].toISOString();
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scans/listbystate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScanTaskListApiResultFromJSON)(jsonValue));
    }
    /**
     * Gets the list of scans by state
     */
    async scansListByState(requestParameters, initOverrides) {
        const response = await this.scansListByStateRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of scans by stateChanged
     */
    async scansListByStateChangedRaw(requestParameters, initOverrides) {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError('startDate', 'Required parameter "startDate" was null or undefined when calling scansListByStateChanged().');
        }
        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError('endDate', 'Required parameter "endDate" was null or undefined when calling scansListByStateChanged().');
        }
        const queryParameters = {};
        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'].toISOString();
        }
        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'].toISOString();
        }
        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }
        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scans/listbystatechanged`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScanTaskListApiResultFromJSON)(jsonValue));
    }
    /**
     * Gets the list of scans by stateChanged
     */
    async scansListByStateChanged(requestParameters, initOverrides) {
        const response = await this.scansListByStateChangedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of scans and their details.
     */
    async scansListByWebsiteRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['websiteUrl'] != null) {
            queryParameters['websiteUrl'] = requestParameters['websiteUrl'];
        }
        if (requestParameters['targetUrl'] != null) {
            queryParameters['targetUrl'] = requestParameters['targetUrl'];
        }
        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }
        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }
        if (requestParameters['initiatedDateSortType'] != null) {
            queryParameters['initiatedDateSortType'] = requestParameters['initiatedDateSortType'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scans/listbywebsite`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScanTaskListApiResultFromJSON)(jsonValue));
    }
    /**
     * Gets the list of scans and their details.
     */
    async scansListByWebsite(requestParameters = {}, initOverrides) {
        const response = await this.scansListByWebsiteRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of scheduled scans which are scheduled to be launched in the future.
     */
    async scansListScheduledRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }
        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scans/list-scheduled`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScheduledScanListApiResultFromJSON)(jsonValue));
    }
    /**
     * Gets the list of scheduled scans which are scheduled to be launched in the future.
     */
    async scansListScheduled(requestParameters = {}, initOverrides) {
        const response = await this.scansListScheduledRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Launches a new scan.
     */
    async scansNewRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling scansNew().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scans/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.NewScanTaskApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.ScanTaskModelFromJSON));
    }
    /**
     * Launches a new scan.
     */
    async scansNew(requestParameters, initOverrides) {
        const response = await this.scansNewRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Launches a new scan with same configuration from the scan specified with scan id.
     */
    async scansNewFromScanRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling scansNewFromScan().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scans/newfromscan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['id'],
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScanTaskModelFromJSON)(jsonValue));
    }
    /**
     * Launches a new scan with same configuration from the scan specified with scan id.
     */
    async scansNewFromScan(requestParameters, initOverrides) {
        const response = await this.scansNewFromScanRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Launches a new group scan.
     */
    async scansNewGroupScanRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling scansNewGroupScan().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scans/newgroupscan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.NewGroupScanApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.ScanTaskModelFromJSON));
    }
    /**
     * Launches a new group scan.
     */
    async scansNewGroupScan(requestParameters, initOverrides) {
        const response = await this.scansNewGroupScanRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Launches a new scan with profile id.
     */
    async scansNewWithProfileRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling scansNewWithProfile().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scans/newwithprofile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.NewScanTaskWithProfileApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScanTaskModelFromJSON)(jsonValue));
    }
    /**
     * Launches a new scan with profile id.
     */
    async scansNewWithProfile(requestParameters, initOverrides) {
        const response = await this.scansNewWithProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Pauses a scan in progress.
     */
    async scansPauseRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling scansPause().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scans/pause`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['id'],
        }, initOverrides);
        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Pauses a scan in progress.
     */
    async scansPause(requestParameters, initOverrides) {
        const response = await this.scansPauseRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Pausing scans in Scanning status.
     */
    async scansPauseActiveScansRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scans/pause-active-scans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Pausing scans in Scanning status.
     */
    async scansPauseActiveScans(initOverrides) {
        const response = await this.scansPauseActiveScansRaw(initOverrides);
        return await response.value();
    }
    /**
     * Returns the report of a scan in the specified format.
     */
    async scansReportRaw(requestParameters, initOverrides) {
        if (requestParameters['format'] == null) {
            throw new runtime.RequiredError('format', 'Required parameter "format" was null or undefined when calling scansReport().');
        }
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling scansReport().');
        }
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling scansReport().');
        }
        const queryParameters = {};
        if (requestParameters['contentFormat'] != null) {
            queryParameters['contentFormat'] = requestParameters['contentFormat'];
        }
        if (requestParameters['excludeResponseData'] != null) {
            queryParameters['excludeResponseData'] = requestParameters['excludeResponseData'];
        }
        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }
        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }
        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }
        if (requestParameters['onlyConfirmedIssues'] != null) {
            queryParameters['onlyConfirmedIssues'] = requestParameters['onlyConfirmedIssues'];
        }
        if (requestParameters['onlyUnconfirmedIssues'] != null) {
            queryParameters['onlyUnconfirmedIssues'] = requestParameters['onlyUnconfirmedIssues'];
        }
        if (requestParameters['excludeAddressedIssues'] != null) {
            queryParameters['excludeAddressedIssues'] = requestParameters['excludeAddressedIssues'];
        }
        if (requestParameters['excludeHistoryOfIssues'] != null) {
            queryParameters['excludeHistoryOfIssues'] = requestParameters['excludeHistoryOfIssues'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scans/report/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.BlobApiResponse(response);
    }
    /**
     * Returns the report of a scan in the specified format.
     */
    async scansReport(requestParameters, initOverrides) {
        const response = await this.scansReportRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the result of a scan.
     */
    async scansResultRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling scansResult().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scans/result/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.VulnerabilityModelFromJSON));
    }
    /**
     * Gets the result of a scan.
     */
    async scansResult(requestParameters, initOverrides) {
        const response = await this.scansResultRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Resumes a paused scan.
     */
    async scansResumeRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling scansResume().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scans/resume`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['id'],
        }, initOverrides);
        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Resumes a paused scan.
     */
    async scansResume(requestParameters, initOverrides) {
        const response = await this.scansResumeRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Resuming \"Paused scans\" with the Pause active scan endpoint.
     */
    async scansResumePausedScansRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scans/resume-paused-scans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Resuming \"Paused scans\" with the Pause active scan endpoint.
     */
    async scansResumePausedScans(initOverrides) {
        const response = await this.scansResumePausedScansRaw(initOverrides);
        return await response.value();
    }
    /**
     * Launches a retest scan based on the provided base scan identifier.
     */
    async scansRetestRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling scansRetest().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scans/retest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.BaseScanApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScanTaskModelFromJSON)(jsonValue));
    }
    /**
     * Launches a retest scan based on the provided base scan identifier.
     */
    async scansRetest(requestParameters, initOverrides) {
        const response = await this.scansRetestRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Schedules a scan to be launched in the future.
     */
    async scansScheduleRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling scansSchedule().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scans/schedule`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.NewScheduledScanApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UpdateScheduledScanModelFromJSON)(jsonValue));
    }
    /**
     * Schedules a scan to be launched in the future.
     */
    async scansSchedule(requestParameters, initOverrides) {
        const response = await this.scansScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Schedules an incremental scan to be launched in the future.
     */
    async scansScheduleIncrementalRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling scansScheduleIncremental().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scans/schedule-incremental`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.NewScheduledIncrementalScanApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UpdateScheduledScanModelFromJSON)(jsonValue));
    }
    /**
     * Schedules an incremental scan to be launched in the future.
     */
    async scansScheduleIncremental(requestParameters, initOverrides) {
        const response = await this.scansScheduleIncrementalRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Schedules a scan by a profile to be launched in the future.
     */
    async scansScheduleWithProfileRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling scansScheduleWithProfile().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scans/schedulewithprofile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.NewScheduledWithProfileApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UpdateScheduledScanModelFromJSON)(jsonValue));
    }
    /**
     * Schedules a scan by a profile to be launched in the future.
     */
    async scansScheduleWithProfile(requestParameters, initOverrides) {
        const response = await this.scansScheduleWithProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the status of a scan.
     */
    async scansStatusRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling scansStatus().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scans/status/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ApiScanStatusModelFromJSON)(jsonValue));
    }
    /**
     * Gets the status of a scan.
     */
    async scansStatus(requestParameters, initOverrides) {
        const response = await this.scansStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Tests the credentials of scan profile for specific url.
     */
    async scansTestScanProfileCredentialsRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling scansTestScanProfileCredentials().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scans/test-scan-profile-credentials`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.TestScanProfileCredentialsRequestModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TestScanProfileCredentialsRequestModelFromJSON)(jsonValue));
    }
    /**
     * Tests the credentials of scan profile for specific url.
     */
    async scansTestScanProfileCredentials(requestParameters, initOverrides) {
        const response = await this.scansTestScanProfileCredentialsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Removes and deletes a scheduled scan.
     */
    async scansUnscheduleRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling scansUnschedule().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scans/unschedule`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['id'],
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Removes and deletes a scheduled scan.
     */
    async scansUnschedule(requestParameters, initOverrides) {
        await this.scansUnscheduleRaw(requestParameters, initOverrides);
    }
    /**
     * Updates a scheduled scan.
     */
    async scansUpdateScheduledRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling scansUpdateScheduled().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scans/update-scheduled`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.UpdateScheduledScanApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UpdateScheduledScanApiModelFromJSON)(jsonValue));
    }
    /**
     * Updates a scheduled scan.
     */
    async scansUpdateScheduled(requestParameters, initOverrides) {
        const response = await this.scansUpdateScheduledRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Updates an incremental scheduled scan.
     */
    async scansUpdateScheduledIncrementalRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling scansUpdateScheduledIncremental().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scans/update-scheduled-incremental`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.UpdateScheduledIncrementalScanApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UpdateScheduledIncrementalScanApiModelFromJSON)(jsonValue));
    }
    /**
     * Updates an incremental scheduled scan.
     */
    async scansUpdateScheduledIncremental(requestParameters, initOverrides) {
        const response = await this.scansUpdateScheduledIncrementalRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async scansValidateImportedLinksFileRaw(requestParameters, initOverrides) {
        if (requestParameters['siteUrl'] == null) {
            throw new runtime.RequiredError('siteUrl', 'Required parameter "siteUrl" was null or undefined when calling scansValidateImportedLinksFile().');
        }
        if (requestParameters['scansValidateImportedLinksFileReq'] == null) {
            throw new runtime.RequiredError('scansValidateImportedLinksFileReq', 'Required parameter "scansValidateImportedLinksFileReq" was null or undefined when calling scansValidateImportedLinksFile().');
        }
        const queryParameters = {};
        if (requestParameters['siteUrl'] != null) {
            queryParameters['siteUrl'] = requestParameters['siteUrl'];
        }
        if (requestParameters['importType'] != null) {
            queryParameters['importType'] = requestParameters['importType'];
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/form-data';
        const response = await this.request({
            path: `/api/1.0/scans/validate-imported-links-file`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.ScansValidateImportedLinksFileReqToJSON)(requestParameters['scansValidateImportedLinksFileReq']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     */
    async scansValidateImportedLinksFile(requestParameters, initOverrides) {
        const response = await this.scansValidateImportedLinksFileRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Verifies the specified form authentication settings.
     */
    async scansVerifyFormAuthRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling scansVerifyFormAuth().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scans/verifyformauth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.FormAuthenticationVerificationApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AuthVerificationApiResultFromJSON)(jsonValue));
    }
    /**
     * Verifies the specified form authentication settings.
     */
    async scansVerifyFormAuth(requestParameters, initOverrides) {
        const response = await this.scansVerifyFormAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.ScansApi = ScansApi;
/**
 * @export
 */
exports.ScansCustomReportReportFormatEnum = {
    Xml: 'Xml',
    Csv: 'Csv',
    Pdf: 'Pdf',
    Html: 'Html',
    Txt: 'Txt',
    Json: 'Json'
};
/**
 * @export
 */
exports.ScansDownloadPciScanReportReportTypeEnum = {
    Attestation: 'Attestation',
    Detailed: 'Detailed',
    Executive: 'Executive'
};
/**
 * @export
 */
exports.ScansListByStateScanTaskStateEnum = {
    Queued: 'Queued',
    Scanning: 'Scanning',
    Archiving: 'Archiving',
    Complete: 'Complete',
    Failed: 'Failed',
    Cancelled: 'Cancelled',
    Delayed: 'Delayed',
    Pausing: 'Pausing',
    Paused: 'Paused',
    Resuming: 'Resuming',
    AsyncArchiving: 'AsyncArchiving'
};
/**
 * @export
 */
exports.ScansListByWebsiteInitiatedDateSortTypeEnum = {
    Ascending: 'Ascending',
    Descending: 'Descending'
};
/**
 * @export
 */
exports.ScansReportFormatEnum = {
    Xml: 'Xml',
    Csv: 'Csv',
    Pdf: 'Pdf',
    Html: 'Html',
    Txt: 'Txt',
    Json: 'Json'
};
/**
 * @export
 */
exports.ScansReportTypeEnum = {
    Crawled: 'Crawled',
    Scanned: 'Scanned',
    Vulnerabilities: 'Vulnerabilities',
    ScanDetail: 'ScanDetail',
    ModSecurityWafRules: 'ModSecurityWafRules',
    OwaspTopTen2013: 'OwaspTopTen2013',
    HipaaCompliance: 'HIPAACompliance',
    Pci32: 'Pci32',
    KnowledgeBase: 'KnowledgeBase',
    ExecutiveSummary: 'ExecutiveSummary',
    FullScanDetail: 'FullScanDetail',
    OwaspTopTen2017: 'OwaspTopTen2017',
    CustomReport: 'CustomReport',
    Iso27001Compliance: 'Iso27001Compliance',
    F5BigIpAsmWafRules: 'F5BigIpAsmWafRules',
    Wasc: 'WASC',
    SansTop25: 'SansTop25',
    Asvs40: 'Asvs40',
    Nistsp80053: 'Nistsp80053',
    DisaStig: 'DisaStig',
    OwaspApiTop10: 'OwaspApiTop10',
    OwaspTopTen2021: 'OwaspTopTen2021',
    VulnerabilitiesPerWebsite: 'VulnerabilitiesPerWebsite',
    OwaspApiTopTen2023: 'OwaspApiTopTen2023',
    PciDss40: 'PciDss40'
};
/**
 * @export
 */
exports.ScansReportContentFormatEnum = {
    Html: 'Html',
    Markdown: 'Markdown'
};
/**
 * @export
 */
exports.ScansValidateImportedLinksFileImportTypeEnum = {
    None: 'None',
    Fiddler: 'Fiddler',
    Burp: 'Burp',
    Swagger: 'Swagger',
    OwaspZap: 'OwaspZap',
    AspNet: 'AspNet',
    HttpArchive: 'HttpArchive',
    Wadl: 'Wadl',
    Wsdl: 'Wsdl',
    Postman: 'Postman',
    InvictiSessionFile: 'InvictiSessionFile',
    CsvImporter: 'CsvImporter',
    Iodocs: 'Iodocs',
    WordPress: 'WordPress',
    Raml: 'Raml',
    GraphQl: 'GraphQl'
};
//# sourceMappingURL=ScansApi.js.map