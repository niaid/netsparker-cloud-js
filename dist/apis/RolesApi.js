/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { NewRoleApiModelToJSON, PermissionApiModelFromJSON, RoleApiModelListApiResultFromJSON, RoleApiViewModelFromJSON, UpdateRoleApiModelToJSON, } from '../models/index';
/**
 *
 */
export class RolesApi extends runtime.BaseAPI {
    /**
     * Deletes a role.
     */
    async rolesDeleteRaw(requestParameters, initOverrides) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling rolesDelete.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/roles/delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Deletes a role.
     */
    async rolesDelete(requestParameters, initOverrides) {
        const response = await this.rolesDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the role by the specified id.
     */
    async rolesGetRaw(requestParameters, initOverrides) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling rolesGet.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/roles/get/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => RoleApiViewModelFromJSON(jsonValue));
    }
    /**
     * Gets the role by the specified id.
     */
    async rolesGet(requestParameters, initOverrides) {
        const response = await this.rolesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of roles.
     */
    async rolesListRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/roles/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => RoleApiModelListApiResultFromJSON(jsonValue));
    }
    /**
     * Gets the list of roles.
     */
    async rolesList(requestParameters = {}, initOverrides) {
        const response = await this.rolesListRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of permissions.
     */
    async rolesListPermissionsRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/roles/listpermissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PermissionApiModelFromJSON));
    }
    /**
     * Gets the list of permissions.
     */
    async rolesListPermissions(initOverrides) {
        const response = await this.rolesListPermissionsRaw(initOverrides);
        return await response.value();
    }
    /**
     * Creates a new role
     */
    async rolesNewRaw(requestParameters, initOverrides) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling rolesNew.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/roles/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewRoleApiModelToJSON(requestParameters.model),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => RoleApiViewModelFromJSON(jsonValue));
    }
    /**
     * Creates a new role
     */
    async rolesNew(requestParameters, initOverrides) {
        const response = await this.rolesNewRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Updates a role
     */
    async rolesUpdateRaw(requestParameters, initOverrides) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling rolesUpdate.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/roles/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRoleApiModelToJSON(requestParameters.model),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => RoleApiViewModelFromJSON(jsonValue));
    }
    /**
     * Updates a role
     */
    async rolesUpdate(requestParameters, initOverrides) {
        const response = await this.rolesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
//# sourceMappingURL=RolesApi.js.map