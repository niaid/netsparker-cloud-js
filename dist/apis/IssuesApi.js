"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssuesWaitingForRetestSeverityEnum = exports.IssuesTodoSeverityEnum = exports.IssuesReportSeverityEnum = exports.IssuesReportCsvSeparatorEnum = exports.IssuesAllIssuesIntegrationEnum = exports.IssuesAllIssuesSortTypeEnum = exports.IssuesAllIssuesSeverityEnum = exports.IssuesAddressedIssuesSeverityEnum = exports.IssuesApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class IssuesApi extends runtime.BaseAPI {
    /**
     * Gets the list of addressed issues.
     */
    async issuesAddressedIssuesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.severity !== undefined) {
            queryParameters['severity'] = requestParameters.severity;
        }
        if (requestParameters.webSiteName !== undefined) {
            queryParameters['webSiteName'] = requestParameters.webSiteName;
        }
        if (requestParameters.websiteGroupName !== undefined) {
            queryParameters['websiteGroupName'] = requestParameters.websiteGroupName;
        }
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/issues/addressedissues`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.IssueApiResultFromJSON)(jsonValue));
    }
    /**
     * Gets the list of addressed issues.
     */
    async issuesAddressedIssues(requestParameters = {}, initOverrides) {
        const response = await this.issuesAddressedIssuesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of all issues.
     */
    async issuesAllIssuesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.severity !== undefined) {
            queryParameters['severity'] = requestParameters.severity;
        }
        if (requestParameters.webSiteName !== undefined) {
            queryParameters['webSiteName'] = requestParameters.webSiteName;
        }
        if (requestParameters.websiteGroupName !== undefined) {
            queryParameters['websiteGroupName'] = requestParameters.websiteGroupName;
        }
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }
        if (requestParameters.sortType !== undefined) {
            queryParameters['sortType'] = requestParameters.sortType;
        }
        if (requestParameters.lastSeenDate !== undefined) {
            queryParameters['lastSeenDate'] = requestParameters.lastSeenDate;
        }
        if (requestParameters.rawDetails !== undefined) {
            queryParameters['rawDetails'] = requestParameters.rawDetails;
        }
        if (requestParameters.integration !== undefined) {
            queryParameters['integration'] = requestParameters.integration;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/issues/allissues`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.IssueApiResultFromJSON)(jsonValue));
    }
    /**
     * Gets the list of all issues.
     */
    async issuesAllIssues(requestParameters = {}, initOverrides) {
        const response = await this.issuesAllIssuesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets issues by id. Returns with encoded(raw html) vulnerability template data by default.
     */
    async issuesGetRaw(requestParameters, initOverrides) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling issuesGet.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/issues/get/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AllIssuesApiModelFromJSON)(jsonValue));
    }
    /**
     * Gets issues by id. Returns with encoded(raw html) vulnerability template data by default.
     */
    async issuesGet(requestParameters, initOverrides) {
        const response = await this.issuesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets vulnerability request/response content by id.
     */
    async issuesGetVulnerabilityContentRaw(requestParameters, initOverrides) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling issuesGetVulnerabilityContent.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/issues/getvulnerabilitycontent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.VulnerabilityContentApiModelFromJSON)(jsonValue));
    }
    /**
     * Gets vulnerability request/response content by id.
     */
    async issuesGetVulnerabilityContent(requestParameters, initOverrides) {
        const response = await this.issuesGetVulnerabilityContentRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Generates a report of issues in the CSV format.
     */
    async issuesReportRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.csvSeparator !== undefined) {
            queryParameters['csvSeparator'] = requestParameters.csvSeparator;
        }
        if (requestParameters.severity !== undefined) {
            queryParameters['severity'] = requestParameters.severity;
        }
        if (requestParameters.websiteGroupName !== undefined) {
            queryParameters['websiteGroupName'] = requestParameters.websiteGroupName;
        }
        if (requestParameters.webSiteName !== undefined) {
            queryParameters['webSiteName'] = requestParameters.webSiteName;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString();
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString();
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/issues/report`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Generates a report of issues in the CSV format.
     */
    async issuesReport(requestParameters = {}, initOverrides) {
        await this.issuesReportRaw(requestParameters, initOverrides);
    }
    /**
     * Gets the summary of vulnerabilities
     */
    async issuesSummaryRaw(requestParameters, initOverrides) {
        if (requestParameters.targetUri === null || requestParameters.targetUri === undefined) {
            throw new runtime.RequiredError('targetUri', 'Required parameter requestParameters.targetUri was null or undefined when calling issuesSummary.');
        }
        if (requestParameters.websiteRoot === null || requestParameters.websiteRoot === undefined) {
            throw new runtime.RequiredError('websiteRoot', 'Required parameter requestParameters.websiteRoot was null or undefined when calling issuesSummary.');
        }
        const queryParameters = {};
        if (requestParameters.targetUri !== undefined) {
            queryParameters['targetUri'] = requestParameters.targetUri;
        }
        if (requestParameters.websiteRoot !== undefined) {
            queryParameters['websiteRoot'] = requestParameters.websiteRoot;
        }
        if (requestParameters.sinceDate !== undefined) {
            queryParameters['sinceDate'] = requestParameters.sinceDate;
        }
        if (requestParameters.scanTaskGroupId !== undefined) {
            queryParameters['scanTaskGroupId'] = requestParameters.scanTaskGroupId;
        }
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/issues/summary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.IssueSummaryApiResultFromJSON)(jsonValue));
    }
    /**
     * Gets the summary of vulnerabilities
     */
    async issuesSummary(requestParameters, initOverrides) {
        const response = await this.issuesSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of to-do issues.
     */
    async issuesTodoRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.severity !== undefined) {
            queryParameters['severity'] = requestParameters.severity;
        }
        if (requestParameters.webSiteName !== undefined) {
            queryParameters['webSiteName'] = requestParameters.webSiteName;
        }
        if (requestParameters.websiteGroupName !== undefined) {
            queryParameters['websiteGroupName'] = requestParameters.websiteGroupName;
        }
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/issues/todo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.IssueApiResultFromJSON)(jsonValue));
    }
    /**
     * Gets the list of to-do issues.
     */
    async issuesTodo(requestParameters = {}, initOverrides) {
        const response = await this.issuesTodoRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Updates an existing issue.
     */
    async issuesUpdateRaw(requestParameters, initOverrides) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling issuesUpdate.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/issues/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.IssueApiUpdateModelToJSON)(requestParameters.model),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Updates an existing issue.
     */
    async issuesUpdate(requestParameters, initOverrides) {
        await this.issuesUpdateRaw(requestParameters, initOverrides);
    }
    /**
     * Gets the list of retest issues.
     */
    async issuesWaitingForRetestRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.severity !== undefined) {
            queryParameters['severity'] = requestParameters.severity;
        }
        if (requestParameters.webSiteName !== undefined) {
            queryParameters['webSiteName'] = requestParameters.webSiteName;
        }
        if (requestParameters.websiteGroupName !== undefined) {
            queryParameters['websiteGroupName'] = requestParameters.websiteGroupName;
        }
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/issues/waitingforretest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.IssueApiResultFromJSON)(jsonValue));
    }
    /**
     * Gets the list of retest issues.
     */
    async issuesWaitingForRetest(requestParameters = {}, initOverrides) {
        const response = await this.issuesWaitingForRetestRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.IssuesApi = IssuesApi;
/**
  * @export
  * @enum {string}
  */
var IssuesAddressedIssuesSeverityEnum;
(function (IssuesAddressedIssuesSeverityEnum) {
    IssuesAddressedIssuesSeverityEnum["BestPractice"] = "BestPractice";
    IssuesAddressedIssuesSeverityEnum["Information"] = "Information";
    IssuesAddressedIssuesSeverityEnum["Low"] = "Low";
    IssuesAddressedIssuesSeverityEnum["Medium"] = "Medium";
    IssuesAddressedIssuesSeverityEnum["High"] = "High";
    IssuesAddressedIssuesSeverityEnum["Critical"] = "Critical";
})(IssuesAddressedIssuesSeverityEnum = exports.IssuesAddressedIssuesSeverityEnum || (exports.IssuesAddressedIssuesSeverityEnum = {}));
/**
  * @export
  * @enum {string}
  */
var IssuesAllIssuesSeverityEnum;
(function (IssuesAllIssuesSeverityEnum) {
    IssuesAllIssuesSeverityEnum["BestPractice"] = "BestPractice";
    IssuesAllIssuesSeverityEnum["Information"] = "Information";
    IssuesAllIssuesSeverityEnum["Low"] = "Low";
    IssuesAllIssuesSeverityEnum["Medium"] = "Medium";
    IssuesAllIssuesSeverityEnum["High"] = "High";
    IssuesAllIssuesSeverityEnum["Critical"] = "Critical";
})(IssuesAllIssuesSeverityEnum = exports.IssuesAllIssuesSeverityEnum || (exports.IssuesAllIssuesSeverityEnum = {}));
/**
  * @export
  * @enum {string}
  */
var IssuesAllIssuesSortTypeEnum;
(function (IssuesAllIssuesSortTypeEnum) {
    IssuesAllIssuesSortTypeEnum["Ascending"] = "Ascending";
    IssuesAllIssuesSortTypeEnum["Descending"] = "Descending";
})(IssuesAllIssuesSortTypeEnum = exports.IssuesAllIssuesSortTypeEnum || (exports.IssuesAllIssuesSortTypeEnum = {}));
/**
  * @export
  * @enum {string}
  */
var IssuesAllIssuesIntegrationEnum;
(function (IssuesAllIssuesIntegrationEnum) {
    IssuesAllIssuesIntegrationEnum["Jira"] = "Jira";
    IssuesAllIssuesIntegrationEnum["GitHub"] = "GitHub";
    IssuesAllIssuesIntegrationEnum["Tfs"] = "TFS";
    IssuesAllIssuesIntegrationEnum["FogBugz"] = "FogBugz";
    IssuesAllIssuesIntegrationEnum["ServiceNow"] = "ServiceNow";
    IssuesAllIssuesIntegrationEnum["Slack"] = "Slack";
    IssuesAllIssuesIntegrationEnum["GitLab"] = "GitLab";
    IssuesAllIssuesIntegrationEnum["Bitbucket"] = "Bitbucket";
    IssuesAllIssuesIntegrationEnum["Unfuddle"] = "Unfuddle";
    IssuesAllIssuesIntegrationEnum["Zapier"] = "Zapier";
    IssuesAllIssuesIntegrationEnum["AzureDevOps"] = "AzureDevOps";
    IssuesAllIssuesIntegrationEnum["Redmine"] = "Redmine";
    IssuesAllIssuesIntegrationEnum["Bugzilla"] = "Bugzilla";
    IssuesAllIssuesIntegrationEnum["Kafka"] = "Kafka";
    IssuesAllIssuesIntegrationEnum["PagerDuty"] = "PagerDuty";
    IssuesAllIssuesIntegrationEnum["MicrosoftTeams"] = "MicrosoftTeams";
    IssuesAllIssuesIntegrationEnum["Clubhouse"] = "Clubhouse";
    IssuesAllIssuesIntegrationEnum["Trello"] = "Trello";
    IssuesAllIssuesIntegrationEnum["Asana"] = "Asana";
    IssuesAllIssuesIntegrationEnum["Webhook"] = "Webhook";
    IssuesAllIssuesIntegrationEnum["Kenna"] = "Kenna";
    IssuesAllIssuesIntegrationEnum["Freshservice"] = "Freshservice";
    IssuesAllIssuesIntegrationEnum["YouTrack"] = "YouTrack";
    IssuesAllIssuesIntegrationEnum["NetsparkerEnterprise"] = "NetsparkerEnterprise";
    IssuesAllIssuesIntegrationEnum["Splunk"] = "Splunk";
    IssuesAllIssuesIntegrationEnum["Mattermost"] = "Mattermost";
    IssuesAllIssuesIntegrationEnum["Hashicorp"] = "Hashicorp";
    IssuesAllIssuesIntegrationEnum["PivotalTracker"] = "PivotalTracker";
    IssuesAllIssuesIntegrationEnum["CyberArk"] = "CyberArk";
    IssuesAllIssuesIntegrationEnum["DefectDojo"] = "DefectDojo";
    IssuesAllIssuesIntegrationEnum["JazzTeam"] = "JazzTeam";
    IssuesAllIssuesIntegrationEnum["AzureKeyVault"] = "AzureKeyVault";
    IssuesAllIssuesIntegrationEnum["ServiceNowVrm"] = "ServiceNowVRM";
})(IssuesAllIssuesIntegrationEnum = exports.IssuesAllIssuesIntegrationEnum || (exports.IssuesAllIssuesIntegrationEnum = {}));
/**
  * @export
  * @enum {string}
  */
var IssuesReportCsvSeparatorEnum;
(function (IssuesReportCsvSeparatorEnum) {
    IssuesReportCsvSeparatorEnum["Comma"] = "Comma";
    IssuesReportCsvSeparatorEnum["Semicolon"] = "Semicolon";
    IssuesReportCsvSeparatorEnum["Pipe"] = "Pipe";
    IssuesReportCsvSeparatorEnum["Tab"] = "Tab";
})(IssuesReportCsvSeparatorEnum = exports.IssuesReportCsvSeparatorEnum || (exports.IssuesReportCsvSeparatorEnum = {}));
/**
  * @export
  * @enum {string}
  */
var IssuesReportSeverityEnum;
(function (IssuesReportSeverityEnum) {
    IssuesReportSeverityEnum["BestPractice"] = "BestPractice";
    IssuesReportSeverityEnum["Information"] = "Information";
    IssuesReportSeverityEnum["Low"] = "Low";
    IssuesReportSeverityEnum["Medium"] = "Medium";
    IssuesReportSeverityEnum["High"] = "High";
    IssuesReportSeverityEnum["Critical"] = "Critical";
})(IssuesReportSeverityEnum = exports.IssuesReportSeverityEnum || (exports.IssuesReportSeverityEnum = {}));
/**
  * @export
  * @enum {string}
  */
var IssuesTodoSeverityEnum;
(function (IssuesTodoSeverityEnum) {
    IssuesTodoSeverityEnum["BestPractice"] = "BestPractice";
    IssuesTodoSeverityEnum["Information"] = "Information";
    IssuesTodoSeverityEnum["Low"] = "Low";
    IssuesTodoSeverityEnum["Medium"] = "Medium";
    IssuesTodoSeverityEnum["High"] = "High";
    IssuesTodoSeverityEnum["Critical"] = "Critical";
})(IssuesTodoSeverityEnum = exports.IssuesTodoSeverityEnum || (exports.IssuesTodoSeverityEnum = {}));
/**
  * @export
  * @enum {string}
  */
var IssuesWaitingForRetestSeverityEnum;
(function (IssuesWaitingForRetestSeverityEnum) {
    IssuesWaitingForRetestSeverityEnum["BestPractice"] = "BestPractice";
    IssuesWaitingForRetestSeverityEnum["Information"] = "Information";
    IssuesWaitingForRetestSeverityEnum["Low"] = "Low";
    IssuesWaitingForRetestSeverityEnum["Medium"] = "Medium";
    IssuesWaitingForRetestSeverityEnum["High"] = "High";
    IssuesWaitingForRetestSeverityEnum["Critical"] = "Critical";
})(IssuesWaitingForRetestSeverityEnum = exports.IssuesWaitingForRetestSeverityEnum || (exports.IssuesWaitingForRetestSeverityEnum = {}));
//# sourceMappingURL=IssuesApi.js.map