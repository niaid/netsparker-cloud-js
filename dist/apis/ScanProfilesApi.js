/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { SaveScanProfileApiModelFromJSON, SaveScanProfileApiModelToJSON, ScanProfilesListApiResultFromJSON, } from '../models/index';
/**
 *
 */
export class ScanProfilesApi extends runtime.BaseAPI {
    /**
     * Deletes a scan profiles.
     */
    async scanProfilesDeleteRaw(requestParameters, initOverrides) {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId', 'Required parameter requestParameters.profileId was null or undefined when calling scanProfilesDelete.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scanprofiles/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.profileId,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Deletes a scan profiles.
     */
    async scanProfilesDelete(requestParameters, initOverrides) {
        const response = await this.scanProfilesDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the scan profiles by the specified id.
     */
    async scanProfilesGetByIdRaw(requestParameters, initOverrides) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling scanProfilesGetById.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scanprofiles/get/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SaveScanProfileApiModelFromJSON(jsonValue));
    }
    /**
     * Gets the scan profiles by the specified id.
     */
    async scanProfilesGetById(requestParameters, initOverrides) {
        const response = await this.scanProfilesGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the scan profiles by the specified name.
     */
    async scanProfilesGetByNameRaw(requestParameters, initOverrides) {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling scanProfilesGetByName.');
        }
        const queryParameters = {};
        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scanprofiles/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SaveScanProfileApiModelFromJSON(jsonValue));
    }
    /**
     * Gets the scan profiles by the specified name.
     */
    async scanProfilesGetByName(requestParameters, initOverrides) {
        const response = await this.scanProfilesGetByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of scan profiles.
     */
    async scanProfilesListRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scanprofiles/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ScanProfilesListApiResultFromJSON(jsonValue));
    }
    /**
     * Gets the list of scan profiles.
     */
    async scanProfilesList(requestParameters = {}, initOverrides) {
        const response = await this.scanProfilesListRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Creates a new scan profiles.
     */
    async scanProfilesNewRaw(requestParameters, initOverrides) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling scanProfilesNew.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scanprofiles/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveScanProfileApiModelToJSON(requestParameters.model),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SaveScanProfileApiModelFromJSON(jsonValue));
    }
    /**
     * Creates a new scan profiles.
     */
    async scanProfilesNew(requestParameters, initOverrides) {
        const response = await this.scanProfilesNewRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Updates a scan profiles.
     */
    async scanProfilesUpdateRaw(requestParameters, initOverrides) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling scanProfilesUpdate.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scanprofiles/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveScanProfileApiModelToJSON(requestParameters.model),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SaveScanProfileApiModelFromJSON(jsonValue));
    }
    /**
     * Updates a scan profiles.
     */
    async scanProfilesUpdate(requestParameters, initOverrides) {
        const response = await this.scanProfilesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
//# sourceMappingURL=ScanProfilesApi.js.map