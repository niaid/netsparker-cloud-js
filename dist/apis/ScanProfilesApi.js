"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScanProfilesApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class ScanProfilesApi extends runtime.BaseAPI {
    /**
     * Deletes a scan profiles.
     */
    async scanProfilesDeleteRaw(requestParameters, initOverrides) {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError('profileId', 'Required parameter "profileId" was null or undefined when calling scanProfilesDelete().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scanprofiles/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['profileId'],
        }, initOverrides);
        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Deletes a scan profiles.
     */
    async scanProfilesDelete(requestParameters, initOverrides) {
        const response = await this.scanProfilesDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the scan profiles by the specified id.
     */
    async scanProfilesGetByIdRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling scanProfilesGetById().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scanprofiles/get/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SaveScanProfileApiModelFromJSON)(jsonValue));
    }
    /**
     * Gets the scan profiles by the specified id.
     */
    async scanProfilesGetById(requestParameters, initOverrides) {
        const response = await this.scanProfilesGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the scan profiles by the specified name.
     */
    async scanProfilesGetByNameRaw(requestParameters, initOverrides) {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling scanProfilesGetByName().');
        }
        const queryParameters = {};
        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scanprofiles/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SaveScanProfileApiModelFromJSON)(jsonValue));
    }
    /**
     * Gets the scan profiles by the specified name.
     */
    async scanProfilesGetByName(requestParameters, initOverrides) {
        const response = await this.scanProfilesGetByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of scan profiles.
     */
    async scanProfilesListRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }
        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/scanprofiles/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScanProfilesListApiResultFromJSON)(jsonValue));
    }
    /**
     * Gets the list of scan profiles.
     */
    async scanProfilesList(requestParameters = {}, initOverrides) {
        const response = await this.scanProfilesListRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Creates a new scan profiles.
     */
    async scanProfilesNewRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling scanProfilesNew().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scanprofiles/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SaveScanProfileApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SaveScanProfileApiModelFromJSON)(jsonValue));
    }
    /**
     * Creates a new scan profiles.
     */
    async scanProfilesNew(requestParameters, initOverrides) {
        const response = await this.scanProfilesNewRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Updates a scan profiles.
     */
    async scanProfilesUpdateRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling scanProfilesUpdate().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/scanprofiles/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SaveScanProfileApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SaveScanProfileApiModelFromJSON)(jsonValue));
    }
    /**
     * Updates a scan profiles.
     */
    async scanProfilesUpdate(requestParameters, initOverrides) {
        const response = await this.scanProfilesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.ScanProfilesApi = ScanProfilesApi;
//# sourceMappingURL=ScanProfilesApi.js.map