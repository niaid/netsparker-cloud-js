"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationsGetPrioritiesEventEnum = exports.NotificationsApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class NotificationsApi extends runtime.BaseAPI {
    /**
     * Deletes an existing scan notification definition.
     */
    async notificationsDeleteRaw(requestParameters, initOverrides) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling notificationsDelete.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/notifications/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.DeleteScanNotificationApiModelToJSON)(requestParameters.model),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Deletes an existing scan notification definition.
     */
    async notificationsDelete(requestParameters, initOverrides) {
        await this.notificationsDeleteRaw(requestParameters, initOverrides);
    }
    /**
     * Gets the notification.
     */
    async notificationsGetRaw(requestParameters, initOverrides) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling notificationsGet.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/notifications/get/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScanNotificationApiModelFromJSON)(jsonValue));
    }
    /**
     * Gets the notification.
     */
    async notificationsGet(requestParameters, initOverrides) {
        const response = await this.notificationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of notifications grouped by their Scopes and ordered by priorities for the given event.
     */
    async notificationsGetPrioritiesRaw(requestParameters, initOverrides) {
        if (requestParameters.event === null || requestParameters.event === undefined) {
            throw new runtime.RequiredError('event', 'Required parameter requestParameters.event was null or undefined when calling notificationsGetPriorities.');
        }
        const queryParameters = {};
        if (requestParameters.event !== undefined) {
            queryParameters['event'] = requestParameters.event;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/notifications/getpriorities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScanNotificationApiModelFromJSON)(jsonValue));
    }
    /**
     * Gets the list of notifications grouped by their Scopes and ordered by priorities for the given event.
     */
    async notificationsGetPriorities(requestParameters, initOverrides) {
        const response = await this.notificationsGetPrioritiesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the scan groups of website.
     */
    async notificationsGetScanGroupsRaw(requestParameters, initOverrides) {
        if (requestParameters.websiteId === null || requestParameters.websiteId === undefined) {
            throw new runtime.RequiredError('websiteId', 'Required parameter requestParameters.websiteId was null or undefined when calling notificationsGetScanGroups.');
        }
        const queryParameters = {};
        if (requestParameters.websiteId !== undefined) {
            queryParameters['WebsiteId'] = requestParameters.websiteId;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/notifications/getscangroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScanNotificationScanTaskGroupApiModelFromJSON)(jsonValue));
    }
    /**
     * Gets the scan groups of website.
     */
    async notificationsGetScanGroups(requestParameters, initOverrides) {
        const response = await this.notificationsGetScanGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of notifications.
     */
    async notificationsListRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/notifications/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScanNotificationListApiResultFromJSON)(jsonValue));
    }
    /**
     * Gets the list of notifications.
     */
    async notificationsList(requestParameters = {}, initOverrides) {
        const response = await this.notificationsListRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Creates a new scan notification definition.
     */
    async notificationsNewRaw(requestParameters, initOverrides) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling notificationsNew.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/notifications/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.NewScanNotificationApiModelToJSON)(requestParameters.model),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScanNotificationApiModelFromJSON)(jsonValue));
    }
    /**
     * Creates a new scan notification definition.
     */
    async notificationsNew(requestParameters, initOverrides) {
        const response = await this.notificationsNewRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Sets the priorities of notifications.
     */
    async notificationsSetPrioritiesRaw(requestParameters, initOverrides) {
        if (requestParameters.priorities === null || requestParameters.priorities === undefined) {
            throw new runtime.RequiredError('priorities', 'Required parameter requestParameters.priorities was null or undefined when calling notificationsSetPriorities.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/notifications/setpriorities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.priorities.map(index_1.NotificationPriorityPairToJSON),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Sets the priorities of notifications.
     */
    async notificationsSetPriorities(requestParameters, initOverrides) {
        await this.notificationsSetPrioritiesRaw(requestParameters, initOverrides);
    }
    /**
     * Updates an existing scan notification definition.
     */
    async notificationsUpdateRaw(requestParameters, initOverrides) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling notificationsUpdate.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/notifications/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.UpdateScanNotificationApiModelToJSON)(requestParameters.model),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScanNotificationApiModelFromJSON)(jsonValue));
    }
    /**
     * Updates an existing scan notification definition.
     */
    async notificationsUpdate(requestParameters, initOverrides) {
        const response = await this.notificationsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.NotificationsApi = NotificationsApi;
/**
  * @export
  * @enum {string}
  */
var NotificationsGetPrioritiesEventEnum;
(function (NotificationsGetPrioritiesEventEnum) {
    NotificationsGetPrioritiesEventEnum["NewScan"] = "NewScan";
    NotificationsGetPrioritiesEventEnum["ScanCompleted"] = "ScanCompleted";
    NotificationsGetPrioritiesEventEnum["ScanCancelled"] = "ScanCancelled";
    NotificationsGetPrioritiesEventEnum["ScanFailed"] = "ScanFailed";
    NotificationsGetPrioritiesEventEnum["ScheduledScanLaunchFailed"] = "ScheduledScanLaunchFailed";
    NotificationsGetPrioritiesEventEnum["OutOfDateTechnology"] = "OutOfDateTechnology";
})(NotificationsGetPrioritiesEventEnum = exports.NotificationsGetPrioritiesEventEnum || (exports.NotificationsGetPrioritiesEventEnum = {}));
//# sourceMappingURL=NotificationsApi.js.map