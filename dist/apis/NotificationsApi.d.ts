/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { DeleteScanNotificationApiModel, NewScanNotificationApiModel, NotificationPriorityPair, ScanNotificationApiModel, ScanNotificationListApiResult, ScanNotificationScanTaskGroupApiModel, UpdateScanNotificationApiModel } from '../models/index';
export interface NotificationsDeleteRequest {
    model: DeleteScanNotificationApiModel;
}
export interface NotificationsGetRequest {
    id: string;
}
export interface NotificationsGetPrioritiesRequest {
    event: NotificationsGetPrioritiesEventEnum;
}
export interface NotificationsGetScanGroupsRequest {
    websiteId: string;
}
export interface NotificationsListRequest {
    page?: number;
    pageSize?: number;
}
export interface NotificationsNewRequest {
    model: NewScanNotificationApiModel;
}
export interface NotificationsSetPrioritiesRequest {
    priorities: Array<NotificationPriorityPair>;
}
export interface NotificationsUpdateRequest {
    model: UpdateScanNotificationApiModel;
}
/**
 *
 */
export declare class NotificationsApi extends runtime.BaseAPI {
    /**
     * Deletes an existing scan notification definition.
     */
    notificationsDeleteRaw(requestParameters: NotificationsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Deletes an existing scan notification definition.
     */
    notificationsDelete(requestParameters: NotificationsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Gets the notification.
     */
    notificationsGetRaw(requestParameters: NotificationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanNotificationApiModel>>;
    /**
     * Gets the notification.
     */
    notificationsGet(requestParameters: NotificationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanNotificationApiModel>;
    /**
     * Gets the list of notifications grouped by their Scopes and ordered by priorities for the given event.
     */
    notificationsGetPrioritiesRaw(requestParameters: NotificationsGetPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanNotificationApiModel>>;
    /**
     * Gets the list of notifications grouped by their Scopes and ordered by priorities for the given event.
     */
    notificationsGetPriorities(requestParameters: NotificationsGetPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanNotificationApiModel>;
    /**
     * Gets the scan groups of website.
     */
    notificationsGetScanGroupsRaw(requestParameters: NotificationsGetScanGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanNotificationScanTaskGroupApiModel>>;
    /**
     * Gets the scan groups of website.
     */
    notificationsGetScanGroups(requestParameters: NotificationsGetScanGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanNotificationScanTaskGroupApiModel>;
    /**
     * Gets the list of notifications.
     */
    notificationsListRaw(requestParameters: NotificationsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanNotificationListApiResult>>;
    /**
     * Gets the list of notifications.
     */
    notificationsList(requestParameters?: NotificationsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanNotificationListApiResult>;
    /**
     * Creates a new scan notification definition.
     */
    notificationsNewRaw(requestParameters: NotificationsNewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanNotificationApiModel>>;
    /**
     * Creates a new scan notification definition.
     */
    notificationsNew(requestParameters: NotificationsNewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanNotificationApiModel>;
    /**
     * Sets the priorities of notifications.
     */
    notificationsSetPrioritiesRaw(requestParameters: NotificationsSetPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Sets the priorities of notifications.
     */
    notificationsSetPriorities(requestParameters: NotificationsSetPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Updates an existing scan notification definition.
     */
    notificationsUpdateRaw(requestParameters: NotificationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanNotificationApiModel>>;
    /**
     * Updates an existing scan notification definition.
     */
    notificationsUpdate(requestParameters: NotificationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanNotificationApiModel>;
}
/**
 * @export
 */
export declare const NotificationsGetPrioritiesEventEnum: {
    readonly NewScan: "NewScan";
    readonly ScanCompleted: "ScanCompleted";
    readonly ScanCancelled: "ScanCancelled";
    readonly ScanFailed: "ScanFailed";
    readonly ScheduledScanLaunchFailed: "ScheduledScanLaunchFailed";
    readonly OutOfDateTechnology: "OutOfDateTechnology";
};
export type NotificationsGetPrioritiesEventEnum = typeof NotificationsGetPrioritiesEventEnum[keyof typeof NotificationsGetPrioritiesEventEnum];
