"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebsiteGroupsApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class WebsiteGroupsApi extends runtime.BaseAPI {
    /**
     * Deletes a website group.
     */
    async websiteGroupsDeleteRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling websiteGroupsDelete().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/websitegroups/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.DeleteWebsiteGroupApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DeleteWebsiteGroupResponseFromJSON)(jsonValue));
    }
    /**
     * Deletes a website group.
     */
    async websiteGroupsDelete(requestParameters, initOverrides) {
        const response = await this.websiteGroupsDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Deletes a website group with given id
     */
    async websiteGroupsDeleteByIdRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling websiteGroupsDeleteById().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/websitegroups/delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DeleteWebsiteGroupResponseFromJSON)(jsonValue));
    }
    /**
     * Deletes a website group with given id
     */
    async websiteGroupsDeleteById(requestParameters, initOverrides) {
        const response = await this.websiteGroupsDeleteByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets website group by id.
     */
    async websiteGroupsGetByIdRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling websiteGroupsGetById().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/websitegroups/get/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WebsiteGroupApiModelFromJSON)(jsonValue));
    }
    /**
     * Gets website group by id.
     */
    async websiteGroupsGetById(requestParameters, initOverrides) {
        const response = await this.websiteGroupsGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets website group by name.
     */
    async websiteGroupsGetByQueryRaw(requestParameters, initOverrides) {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError('query', 'Required parameter "query" was null or undefined when calling websiteGroupsGetByQuery().');
        }
        const queryParameters = {};
        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/websitegroups/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WebsiteGroupApiModelFromJSON)(jsonValue));
    }
    /**
     * Gets website group by name.
     */
    async websiteGroupsGetByQuery(requestParameters, initOverrides) {
        const response = await this.websiteGroupsGetByQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets the list of website groups.
     */
    async websiteGroupsListRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }
        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1.0/websitegroups/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WebsiteGroupListApiResultFromJSON)(jsonValue));
    }
    /**
     * Gets the list of website groups.
     */
    async websiteGroupsList(requestParameters = {}, initOverrides) {
        const response = await this.websiteGroupsListRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Creates a new website group.
     */
    async websiteGroupsNewRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling websiteGroupsNew().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/websitegroups/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.NewWebsiteGroupApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WebsiteGroupApiModelFromJSON)(jsonValue));
    }
    /**
     * Creates a new website group.
     */
    async websiteGroupsNew(requestParameters, initOverrides) {
        const response = await this.websiteGroupsNewRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Updates a website group.
     */
    async websiteGroupsUpdateRaw(requestParameters, initOverrides) {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling websiteGroupsUpdate().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/api/1.0/websitegroups/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.UpdateWebsiteGroupApiModelToJSON)(requestParameters['model']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WebsiteGroupApiModelFromJSON)(jsonValue));
    }
    /**
     * Updates a website group.
     */
    async websiteGroupsUpdate(requestParameters, initOverrides) {
        const response = await this.websiteGroupsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.WebsiteGroupsApi = WebsiteGroupsApi;
//# sourceMappingURL=WebsiteGroupsApi.js.map