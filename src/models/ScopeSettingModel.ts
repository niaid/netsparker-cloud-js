/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ContentTypeModel } from './ContentTypeModel';
import {
    ContentTypeModelFromJSON,
    ContentTypeModelFromJSONTyped,
    ContentTypeModelToJSON,
} from './ContentTypeModel';

/**
 * Represents a model for carrying out scope settings.
 * @export
 * @interface ScopeSettingModel
 */
export interface ScopeSettingModel {
    /**
     * Gets or sets a value indicating whether to block ad networks.
     * @type {boolean}
     * @memberof ScopeSettingModel
     */
    blockAdNetworks?: boolean;
    /**
     * Gets or sets a value indicating whether scope should be bypassed for static checks.
     * @type {boolean}
     * @memberof ScopeSettingModel
     */
    byPassScopeForStaticChecks?: boolean;
    /**
     * Gets or sets a value indicating whether case sensitive scope is enabled.
     * @type {boolean}
     * @memberof ScopeSettingModel
     */
    caseSensitiveScope?: boolean;
    /**
     * Gets or sets a value indicating whether content type check enabled.
     * @type {boolean}
     * @memberof ScopeSettingModel
     */
    contentTypeCheckEnabled?: boolean;
    /**
     * Gets or sets the ignored content types.
     * @type {Array<ContentTypeModel>}
     * @memberof ScopeSettingModel
     */
    ignoredContentTypes?: Array<ContentTypeModel>;
}

/**
 * Check if a given object implements the ScopeSettingModel interface.
 */
export function instanceOfScopeSettingModel(value: object): boolean {
    return true;
}

export function ScopeSettingModelFromJSON(json: any): ScopeSettingModel {
    return ScopeSettingModelFromJSONTyped(json, false);
}

export function ScopeSettingModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScopeSettingModel {
    if (json == null) {
        return json;
    }
    return {
        
        'blockAdNetworks': json['BlockAdNetworks'] == null ? undefined : json['BlockAdNetworks'],
        'byPassScopeForStaticChecks': json['ByPassScopeForStaticChecks'] == null ? undefined : json['ByPassScopeForStaticChecks'],
        'caseSensitiveScope': json['CaseSensitiveScope'] == null ? undefined : json['CaseSensitiveScope'],
        'contentTypeCheckEnabled': json['ContentTypeCheckEnabled'] == null ? undefined : json['ContentTypeCheckEnabled'],
        'ignoredContentTypes': json['IgnoredContentTypes'] == null ? undefined : ((json['IgnoredContentTypes'] as Array<any>).map(ContentTypeModelFromJSON)),
    };
}

export function ScopeSettingModelToJSON(value?: ScopeSettingModel | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'BlockAdNetworks': value['blockAdNetworks'],
        'ByPassScopeForStaticChecks': value['byPassScopeForStaticChecks'],
        'CaseSensitiveScope': value['caseSensitiveScope'],
        'ContentTypeCheckEnabled': value['contentTypeCheckEnabled'],
        'IgnoredContentTypes': value['ignoredContentTypes'] == null ? undefined : ((value['ignoredContentTypes'] as Array<any>).map(ContentTypeModelToJSON)),
    };
}

