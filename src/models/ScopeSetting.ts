/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExcludedLinkModel } from './ExcludedLinkModel';
import {
    ExcludedLinkModelFromJSON,
    ExcludedLinkModelFromJSONTyped,
    ExcludedLinkModelToJSON,
} from './ExcludedLinkModel';
import type { ExcludedUsageTrackerModel } from './ExcludedUsageTrackerModel';
import {
    ExcludedUsageTrackerModelFromJSON,
    ExcludedUsageTrackerModelFromJSONTyped,
    ExcludedUsageTrackerModelToJSON,
} from './ExcludedUsageTrackerModel';

/**
 * Represents a class that carries out scope settings.
 * @export
 * @interface ScopeSetting
 */
export interface ScopeSetting {
    /**
     * Gets or sets the excluded links.
     * @type {Array<ExcludedLinkModel>}
     * @memberof ScopeSetting
     */
    excludedLinks?: Array<ExcludedLinkModel>;
    /**
     * Gets or sets a value indicating whether links should be excluded/included.
     * @type {boolean}
     * @memberof ScopeSetting
     */
    excludeLinks?: boolean;
    /**
     * Gets or sets the excluded usage trackers.
     * @type {Array<ExcludedUsageTrackerModel>}
     * @memberof ScopeSetting
     */
    excludedUsageTrackers?: Array<ExcludedUsageTrackerModel>;
    /**
     * Specifies whether the authentication related pages like login, logout etc. should be excluded from the scan..
     * @type {boolean}
     * @memberof ScopeSetting
     */
    excludeAuthenticationPages?: boolean;
    /**
     * Gets or sets the disallowed http methods.
     * @type {Array<string>}
     * @memberof ScopeSetting
     */
    disallowedHttpMethods?: Array<ScopeSettingDisallowedHttpMethodsEnum>;
    /**
     * Gets or sets the scan scope.
     * @type {string}
     * @memberof ScopeSetting
     */
    scope?: ScopeSettingScopeEnum;
    /**
     * Gets or sets a value indicating whether http and https protocols are differentiated.
     * @type {boolean}
     * @memberof ScopeSetting
     */
    doNotDifferentiateProtocols?: boolean;
}

/**
* @export
* @enum {string}
*/
export enum ScopeSettingDisallowedHttpMethodsEnum {
    Get = 'GET',
    Post = 'POST',
    Connect = 'CONNECT',
    Head = 'HEAD',
    Trace = 'TRACE',
    Debug = 'DEBUG',
    Track = 'TRACK',
    Put = 'PUT',
    Options = 'OPTIONS',
    Delete = 'DELETE',
    Link = 'LINK',
    Unlink = 'UNLINK',
    Patch = 'PATCH'
}
/**
* @export
* @enum {string}
*/
export enum ScopeSettingScopeEnum {
    EnteredPathAndBelow = 'EnteredPathAndBelow',
    OnlyEnteredUrl = 'OnlyEnteredUrl',
    WholeDomain = 'WholeDomain'
}


/**
 * Check if a given object implements the ScopeSetting interface.
 */
export function instanceOfScopeSetting(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ScopeSettingFromJSON(json: any): ScopeSetting {
    return ScopeSettingFromJSONTyped(json, false);
}

export function ScopeSettingFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScopeSetting {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'excludedLinks': !exists(json, 'ExcludedLinks') ? undefined : ((json['ExcludedLinks'] as Array<any>).map(ExcludedLinkModelFromJSON)),
        'excludeLinks': !exists(json, 'ExcludeLinks') ? undefined : json['ExcludeLinks'],
        'excludedUsageTrackers': !exists(json, 'ExcludedUsageTrackers') ? undefined : ((json['ExcludedUsageTrackers'] as Array<any>).map(ExcludedUsageTrackerModelFromJSON)),
        'excludeAuthenticationPages': !exists(json, 'ExcludeAuthenticationPages') ? undefined : json['ExcludeAuthenticationPages'],
        'disallowedHttpMethods': !exists(json, 'DisallowedHttpMethods') ? undefined : json['DisallowedHttpMethods'],
        'scope': !exists(json, 'Scope') ? undefined : json['Scope'],
        'doNotDifferentiateProtocols': !exists(json, 'DoNotDifferentiateProtocols') ? undefined : json['DoNotDifferentiateProtocols'],
    };
}

export function ScopeSettingToJSON(value?: ScopeSetting | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ExcludedLinks': value.excludedLinks === undefined ? undefined : ((value.excludedLinks as Array<any>).map(ExcludedLinkModelToJSON)),
        'ExcludeLinks': value.excludeLinks,
        'ExcludedUsageTrackers': value.excludedUsageTrackers === undefined ? undefined : ((value.excludedUsageTrackers as Array<any>).map(ExcludedUsageTrackerModelToJSON)),
        'ExcludeAuthenticationPages': value.excludeAuthenticationPages,
        'DisallowedHttpMethods': value.disallowedHttpMethods,
        'Scope': value.scope,
        'DoNotDifferentiateProtocols': value.doNotDifferentiateProtocols,
    };
}

