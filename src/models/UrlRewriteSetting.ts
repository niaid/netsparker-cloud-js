/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UrlRewriteExcludedPathModel } from './UrlRewriteExcludedPathModel';
import {
    UrlRewriteExcludedPathModelFromJSON,
    UrlRewriteExcludedPathModelFromJSONTyped,
    UrlRewriteExcludedPathModelToJSON,
} from './UrlRewriteExcludedPathModel';
import type { UrlRewriteRuleModel } from './UrlRewriteRuleModel';
import {
    UrlRewriteRuleModelFromJSON,
    UrlRewriteRuleModelFromJSONTyped,
    UrlRewriteRuleModelToJSON,
} from './UrlRewriteRuleModel';

/**
 * Represents a class that carries out url rewrite settings.
 * @export
 * @interface UrlRewriteSetting
 */
export interface UrlRewriteSetting {
    /**
     * Gets or sets a value indicating whether Heuristic URL Rewrite support is enabled together with custom URL Rewrite
     * support.
     * @type {boolean}
     * @memberof UrlRewriteSetting
     */
    enableHeuristicChecksInCustomUrlRewrite?: boolean;
    /**
     * Gets or sets the root path maximum dynamic signatures for heuristic URL Rewrite detection.
     * @type {number}
     * @memberof UrlRewriteSetting
     */
    maxDynamicSignatures: number;
    /**
     * Gets or sets the sub path maximum dynamic signatures for heuristic URL Rewrite detection.
     * @type {number}
     * @memberof UrlRewriteSetting
     */
    subPathMaxDynamicSignatures: number;
    /**
     * Gets or sets the extensions that will be analyzed for heuristic URL Rewrite detection.
     * @type {string}
     * @memberof UrlRewriteSetting
     */
    urlRewriteAnalyzableExtensions?: string;
    /**
     * Gets or sets the block separators for heuristic URL Rewrite detection.
     * @type {string}
     * @memberof UrlRewriteSetting
     */
    urlRewriteBlockSeparators: string;
    /**
     * Gets or sets the URL Rewrite mode.
     * @type {string}
     * @memberof UrlRewriteSetting
     */
    urlRewriteMode?: UrlRewriteSettingUrlRewriteModeEnum;
    /**
     * Gets or sets the URL Rewrite rules.
     * @type {Array<UrlRewriteRuleModel>}
     * @memberof UrlRewriteSetting
     */
    urlRewriteRules?: Array<UrlRewriteRuleModel>;
    /**
     * Gets or sets the URL rewrite excluded rules.
     * @type {Array<UrlRewriteExcludedPathModel>}
     * @memberof UrlRewriteSetting
     */
    urlRewriteExcludedLinks?: Array<UrlRewriteExcludedPathModel>;
}

/**
* @export
* @enum {string}
*/
export enum UrlRewriteSettingUrlRewriteModeEnum {
    None = 'None',
    Heuristic = 'Heuristic',
    Custom = 'Custom'
}


/**
 * Check if a given object implements the UrlRewriteSetting interface.
 */
export function instanceOfUrlRewriteSetting(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "maxDynamicSignatures" in value;
    isInstance = isInstance && "subPathMaxDynamicSignatures" in value;
    isInstance = isInstance && "urlRewriteBlockSeparators" in value;

    return isInstance;
}

export function UrlRewriteSettingFromJSON(json: any): UrlRewriteSetting {
    return UrlRewriteSettingFromJSONTyped(json, false);
}

export function UrlRewriteSettingFromJSONTyped(json: any, ignoreDiscriminator: boolean): UrlRewriteSetting {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'enableHeuristicChecksInCustomUrlRewrite': !exists(json, 'EnableHeuristicChecksInCustomUrlRewrite') ? undefined : json['EnableHeuristicChecksInCustomUrlRewrite'],
        'maxDynamicSignatures': json['MaxDynamicSignatures'],
        'subPathMaxDynamicSignatures': json['SubPathMaxDynamicSignatures'],
        'urlRewriteAnalyzableExtensions': !exists(json, 'UrlRewriteAnalyzableExtensions') ? undefined : json['UrlRewriteAnalyzableExtensions'],
        'urlRewriteBlockSeparators': json['UrlRewriteBlockSeparators'],
        'urlRewriteMode': !exists(json, 'UrlRewriteMode') ? undefined : json['UrlRewriteMode'],
        'urlRewriteRules': !exists(json, 'UrlRewriteRules') ? undefined : ((json['UrlRewriteRules'] as Array<any>).map(UrlRewriteRuleModelFromJSON)),
        'urlRewriteExcludedLinks': !exists(json, 'UrlRewriteExcludedLinks') ? undefined : ((json['UrlRewriteExcludedLinks'] as Array<any>).map(UrlRewriteExcludedPathModelFromJSON)),
    };
}

export function UrlRewriteSettingToJSON(value?: UrlRewriteSetting | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'EnableHeuristicChecksInCustomUrlRewrite': value.enableHeuristicChecksInCustomUrlRewrite,
        'MaxDynamicSignatures': value.maxDynamicSignatures,
        'SubPathMaxDynamicSignatures': value.subPathMaxDynamicSignatures,
        'UrlRewriteAnalyzableExtensions': value.urlRewriteAnalyzableExtensions,
        'UrlRewriteBlockSeparators': value.urlRewriteBlockSeparators,
        'UrlRewriteMode': value.urlRewriteMode,
        'UrlRewriteRules': value.urlRewriteRules === undefined ? undefined : ((value.urlRewriteRules as Array<any>).map(UrlRewriteRuleModelToJSON)),
        'UrlRewriteExcludedLinks': value.urlRewriteExcludedLinks === undefined ? undefined : ((value.urlRewriteExcludedLinks as Array<any>).map(UrlRewriteExcludedPathModelToJSON)),
    };
}

