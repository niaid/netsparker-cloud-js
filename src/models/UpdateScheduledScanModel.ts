/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { HeaderAuthenticationModel } from './HeaderAuthenticationModel';
import {
    HeaderAuthenticationModelFromJSON,
    HeaderAuthenticationModelFromJSONTyped,
    HeaderAuthenticationModelToJSON,
} from './HeaderAuthenticationModel';
import type { PreRequestScriptSettingModel } from './PreRequestScriptSettingModel';
import {
    PreRequestScriptSettingModelFromJSON,
    PreRequestScriptSettingModelFromJSONTyped,
    PreRequestScriptSettingModelToJSON,
} from './PreRequestScriptSettingModel';
import type { TagViewModel } from './TagViewModel';
import {
    TagViewModelFromJSON,
    TagViewModelFromJSONTyped,
    TagViewModelToJSON,
} from './TagViewModel';
import type { FormAuthenticationSettingModel } from './FormAuthenticationSettingModel';
import {
    FormAuthenticationSettingModelFromJSON,
    FormAuthenticationSettingModelFromJSONTyped,
    FormAuthenticationSettingModelToJSON,
} from './FormAuthenticationSettingModel';
import type { ScheduledScanUpdateViewModel } from './ScheduledScanUpdateViewModel';
import {
    ScheduledScanUpdateViewModelFromJSON,
    ScheduledScanUpdateViewModelFromJSONTyped,
    ScheduledScanUpdateViewModelToJSON,
} from './ScheduledScanUpdateViewModel';
import type { ScheduledScanRecurrenceViewModel } from './ScheduledScanRecurrenceViewModel';
import {
    ScheduledScanRecurrenceViewModelFromJSON,
    ScheduledScanRecurrenceViewModelFromJSONTyped,
    ScheduledScanRecurrenceViewModelToJSON,
} from './ScheduledScanRecurrenceViewModel';
import type { BusinessLogicRecorderSettingModel } from './BusinessLogicRecorderSettingModel';
import {
    BusinessLogicRecorderSettingModelFromJSON,
    BusinessLogicRecorderSettingModelFromJSONTyped,
    BusinessLogicRecorderSettingModelToJSON,
} from './BusinessLogicRecorderSettingModel';
import type { ClientCertificateAuthenticationViewModel } from './ClientCertificateAuthenticationViewModel';
import {
    ClientCertificateAuthenticationViewModelFromJSON,
    ClientCertificateAuthenticationViewModelFromJSONTyped,
    ClientCertificateAuthenticationViewModelToJSON,
} from './ClientCertificateAuthenticationViewModel';
import type { OAuth2SettingModel } from './OAuth2SettingModel';
import {
    OAuth2SettingModelFromJSON,
    OAuth2SettingModelFromJSONTyped,
    OAuth2SettingModelToJSON,
} from './OAuth2SettingModel';
import type { AgentSelectionModel } from './AgentSelectionModel';
import {
    AgentSelectionModelFromJSON,
    AgentSelectionModelFromJSONTyped,
    AgentSelectionModelToJSON,
} from './AgentSelectionModel';
import type { ImportedLinksSetting } from './ImportedLinksSetting';
import {
    ImportedLinksSettingFromJSON,
    ImportedLinksSettingFromJSONTyped,
    ImportedLinksSettingToJSON,
} from './ImportedLinksSetting';
import type { ScanTimeWindowViewModel } from './ScanTimeWindowViewModel';
import {
    ScanTimeWindowViewModelFromJSON,
    ScanTimeWindowViewModelFromJSONTyped,
    ScanTimeWindowViewModelToJSON,
} from './ScanTimeWindowViewModel';
import type { BasicAuthenticationSettingModel } from './BasicAuthenticationSettingModel';
import {
    BasicAuthenticationSettingModelFromJSON,
    BasicAuthenticationSettingModelFromJSONTyped,
    BasicAuthenticationSettingModelToJSON,
} from './BasicAuthenticationSettingModel';
import type { UrlRewriteSetting } from './UrlRewriteSetting';
import {
    UrlRewriteSettingFromJSON,
    UrlRewriteSettingFromJSONTyped,
    UrlRewriteSettingToJSON,
} from './UrlRewriteSetting';
import type { SharkModel } from './SharkModel';
import {
    SharkModelFromJSON,
    SharkModelFromJSONTyped,
    SharkModelToJSON,
} from './SharkModel';
import type { AdditionalWebsitesSettingModel } from './AdditionalWebsitesSettingModel';
import {
    AdditionalWebsitesSettingModelFromJSON,
    AdditionalWebsitesSettingModelFromJSONTyped,
    AdditionalWebsitesSettingModelToJSON,
} from './AdditionalWebsitesSettingModel';
import type { ScopeSetting } from './ScopeSetting';
import {
    ScopeSettingFromJSON,
    ScopeSettingFromJSONTyped,
    ScopeSettingToJSON,
} from './ScopeSetting';

/**
 * Contains properties that required to update scheduled scan.
 * @export
 * @interface UpdateScheduledScanModel
 */
export interface UpdateScheduledScanModel {
    /**
     * Gets or sets the identifier.
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    id?: string;
    /**
     * Gets or sets the how many times a scheduled scan triggered.
     * @type {number}
     * @memberof UpdateScheduledScanModel
     */
    occurencesCount?: number;
    /**
     * Gets or sets a value indicating whether scheduled scan is disabled.
     * @type {boolean}
     * @memberof UpdateScheduledScanModel
     */
    disabled?: boolean;
    /**
     * Gets or sets a value indicating whether scheduling enabled.
     * @type {boolean}
     * @memberof UpdateScheduledScanModel
     */
    enableScheduling?: boolean;
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    name?: string;
    /**
     * Gets or sets the next execution time.
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    nextExecutionTime?: string;
    /**
     * Gets or sets scan group id
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    scanGroupId?: string;
    /**
     * Gets or sets scan type.
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    scanType?: UpdateScheduledScanModelScanTypeEnum;
    /**
     * Gets or sets the run interval of scheduled scan.
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    scheduleRunType?: UpdateScheduledScanModelScheduleRunTypeEnum;
    /**
     * 
     * @type {ScheduledScanRecurrenceViewModel}
     * @memberof UpdateScheduledScanModel
     */
    customRecurrence?: ScheduledScanRecurrenceViewModel;
    /**
     * The Template Type
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    readonly customScriptTemplateType?: UpdateScheduledScanModelCustomScriptTemplateTypeEnum;
    /**
     * Gets or sets whether is target URL required.
     * @type {boolean}
     * @memberof UpdateScheduledScanModel
     */
    readonly isTargetUrlRequired?: boolean;
    /**
     * Get or set the is generate optimize css or not.
     * @type {boolean}
     * @memberof UpdateScheduledScanModel
     */
    isGenerateOptimizedCss?: boolean;
    /**
     * 
     * @type {Array<TagViewModel>}
     * @memberof UpdateScheduledScanModel
     */
    accountTags?: Array<TagViewModel>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateScheduledScanModel
     */
    entityCurrentTags?: Array<string>;
    /**
     * Gets or sets scheduledTaskNames
     * @type {Array<ScheduledScanUpdateViewModel>}
     * @memberof UpdateScheduledScanModel
     */
    scheduledTaskNames?: Array<ScheduledScanUpdateViewModel>;
    /**
     * Gets or sets the foreign key reference to the related Launch Setting Id.
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    launchSettingId?: string;
    /**
     * 
     * @type {AdditionalWebsitesSettingModel}
     * @memberof UpdateScheduledScanModel
     */
    additionalWebsites?: AdditionalWebsitesSettingModel;
    /**
     * Gets or sets the agent group identifier
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    agentGroupId?: string;
    /**
     * Gets or sets the agent identifier.
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    agentId?: string;
    /**
     * 
     * @type {BasicAuthenticationSettingModel}
     * @memberof UpdateScheduledScanModel
     */
    basicAuthenticationSetting?: BasicAuthenticationSettingModel;
    /**
     * Gets or sets the can edit.
     * @type {boolean}
     * @memberof UpdateScheduledScanModel
     */
    readonly canEdit?: boolean;
    /**
     * 
     * @type {ClientCertificateAuthenticationViewModel}
     * @memberof UpdateScheduledScanModel
     */
    clientCertificateAuthentication?: ClientCertificateAuthenticationViewModel;
    /**
     * Gets or sets the cookies.
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    cookies?: string;
    /**
     * Gets or sets the comments.
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    comments?: string;
    /**
     * Gets or sets a value indicating whether parallel attacker is enabled.
     * @type {boolean}
     * @memberof UpdateScheduledScanModel
     */
    crawlAndAttack?: boolean;
    /**
     * Gets or sets the type of the create.
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    createType?: UpdateScheduledScanModelCreateTypeEnum;
    /**
     * Gets or sets the type of the authentication profile.
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    authenticationProfileOption?: string;
    /**
     * Gets or sets the type of the authentication profile name.
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    authenticationProfileName?: string;
    /**
     * Gets or sets a value indicating whether automatic crawling is enabled.
     * @type {boolean}
     * @memberof UpdateScheduledScanModel
     */
    findAndFollowNewLinks?: boolean;
    /**
     * 
     * @type {FormAuthenticationSettingModel}
     * @memberof UpdateScheduledScanModel
     */
    formAuthenticationSetting?: FormAuthenticationSettingModel;
    /**
     * 
     * @type {HeaderAuthenticationModel}
     * @memberof UpdateScheduledScanModel
     */
    headerAuthentication?: HeaderAuthenticationModel;
    /**
     * 
     * @type {SharkModel}
     * @memberof UpdateScheduledScanModel
     */
    shark?: SharkModel;
    /**
     * 
     * @type {ImportedLinksSetting}
     * @memberof UpdateScheduledScanModel
     */
    importedLinks?: ImportedLinksSetting;
    /**
     * Gets or sets a value indicating whether max scan duration is enabled.
     * This is only used for scheduled group scan and regular group scan.
     * @type {boolean}
     * @memberof UpdateScheduledScanModel
     */
    isMaxScanDurationEnabled?: boolean;
    /**
     * Gets or sets a value indicating whether this instance is primary.
     * @type {boolean}
     * @memberof UpdateScheduledScanModel
     */
    isPrimary?: boolean;
    /**
     * Gets or sets a value indicating whether this instance is shared.
     * @type {boolean}
     * @memberof UpdateScheduledScanModel
     */
    isShared?: boolean;
    /**
     * Gets or sets the maximum duration of the scan in hours.
     * @type {number}
     * @memberof UpdateScheduledScanModel
     */
    maxScanDuration?: number;
    /**
     * Gets or sets the scan policy identifier. This property is required if CreateType is Website
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    policyId?: string;
    /**
     * Gets or sets scan policy name
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    policyName?: string;
    /**
     * Gets or sets the profile identifier.
     * Keep this up-to-date with the UniqueProfileNameAttribute.ProfileIdPropertyName const
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    profileId?: string;
    /**
     * Gets or sets a name for this instance.
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    profileName?: string;
    /**
     * Gets or sets the report policy identifier. This property is required if CreateType is Website
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    reportPolicyId?: string;
    /**
     * Gets or sets report policy name
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    reportPolicyName?: string;
    /**
     * Gets or sets the save scan profile.
     * @type {boolean}
     * @memberof UpdateScheduledScanModel
     */
    saveScanProfile?: boolean;
    /**
     * 
     * @type {ScopeSetting}
     * @memberof UpdateScheduledScanModel
     */
    scopeSetting?: ScopeSetting;
    /**
     * Gets or sets the agent selections for the websites that use custom agent. This property is needed for Gorup Scans.
     * @type {Array<AgentSelectionModel>}
     * @memberof UpdateScheduledScanModel
     */
    selectedAgents?: Array<AgentSelectionModel>;
    /**
     * Gets or sets the selected scan profile identifier.
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    selectedScanProfileId?: string;
    /**
     * Gets or sets the name of the selected scan profile.
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    selectedScanProfileName?: string;
    /**
     * Gets or sets the target website URL. This property is required if CreateType is Website
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    targetUrl?: string;
    /**
     * Gets or sets the target website's Descripition. This property is used if CreateType is Website
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    description?: string;
    /**
     * 
     * @type {ScanTimeWindowViewModel}
     * @memberof UpdateScheduledScanModel
     */
    timeWindow?: ScanTimeWindowViewModel;
    /**
     * 
     * @type {UrlRewriteSetting}
     * @memberof UpdateScheduledScanModel
     */
    urlRewriteSetting?: UrlRewriteSetting;
    /**
     * 
     * @type {PreRequestScriptSettingModel}
     * @memberof UpdateScheduledScanModel
     */
    preRequestScriptSetting?: PreRequestScriptSettingModel;
    /**
     * Gets or sets the user identifier.
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    userId?: string;
    /**
     * Gets or sets the website group identifier. This property is required if CreateType is WebsiteGroup
     * @type {string}
     * @memberof UpdateScheduledScanModel
     */
    websiteGroupId?: string;
    /**
     * Defines whether a pci scan task going to be started.
     * @type {boolean}
     * @memberof UpdateScheduledScanModel
     */
    enablePciScanTask?: boolean;
    /**
     * 
     * @type {OAuth2SettingModel}
     * @memberof UpdateScheduledScanModel
     */
    oAuth2Setting?: OAuth2SettingModel;
    /**
     * 
     * @type {BusinessLogicRecorderSettingModel}
     * @memberof UpdateScheduledScanModel
     */
    businessLogicRecorder?: BusinessLogicRecorderSettingModel;
}


/**
 * @export
 */
export const UpdateScheduledScanModelScanTypeEnum = {
    Full: 'Full',
    Retest: 'Retest',
    Incremental: 'Incremental'
} as const;
export type UpdateScheduledScanModelScanTypeEnum = typeof UpdateScheduledScanModelScanTypeEnum[keyof typeof UpdateScheduledScanModelScanTypeEnum];

/**
 * @export
 */
export const UpdateScheduledScanModelScheduleRunTypeEnum = {
    Once: 'Once',
    Daily: 'Daily',
    Weekly: 'Weekly',
    Monthly: 'Monthly',
    Quarterly: 'Quarterly',
    Biannually: 'Biannually',
    Yearly: 'Yearly',
    Custom: 'Custom'
} as const;
export type UpdateScheduledScanModelScheduleRunTypeEnum = typeof UpdateScheduledScanModelScheduleRunTypeEnum[keyof typeof UpdateScheduledScanModelScheduleRunTypeEnum];

/**
 * @export
 */
export const UpdateScheduledScanModelCustomScriptTemplateTypeEnum = {
    Default: 'Default',
    SimpleLoginForm: 'SimpleLoginForm',
    SimpleLoginFormQuery: 'SimpleLoginFormQuery',
    SimpleLoginFormDelay: 'SimpleLoginFormDelay'
} as const;
export type UpdateScheduledScanModelCustomScriptTemplateTypeEnum = typeof UpdateScheduledScanModelCustomScriptTemplateTypeEnum[keyof typeof UpdateScheduledScanModelCustomScriptTemplateTypeEnum];

/**
 * @export
 */
export const UpdateScheduledScanModelCreateTypeEnum = {
    Website: 'Website',
    WebsiteGroup: 'WebsiteGroup'
} as const;
export type UpdateScheduledScanModelCreateTypeEnum = typeof UpdateScheduledScanModelCreateTypeEnum[keyof typeof UpdateScheduledScanModelCreateTypeEnum];


/**
 * Check if a given object implements the UpdateScheduledScanModel interface.
 */
export function instanceOfUpdateScheduledScanModel(value: object): boolean {
    return true;
}

export function UpdateScheduledScanModelFromJSON(json: any): UpdateScheduledScanModel {
    return UpdateScheduledScanModelFromJSONTyped(json, false);
}

export function UpdateScheduledScanModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateScheduledScanModel {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['Id'] == null ? undefined : json['Id'],
        'occurencesCount': json['OccurencesCount'] == null ? undefined : json['OccurencesCount'],
        'disabled': json['Disabled'] == null ? undefined : json['Disabled'],
        'enableScheduling': json['EnableScheduling'] == null ? undefined : json['EnableScheduling'],
        'name': json['Name'] == null ? undefined : json['Name'],
        'nextExecutionTime': json['NextExecutionTime'] == null ? undefined : json['NextExecutionTime'],
        'scanGroupId': json['ScanGroupId'] == null ? undefined : json['ScanGroupId'],
        'scanType': json['ScanType'] == null ? undefined : json['ScanType'],
        'scheduleRunType': json['ScheduleRunType'] == null ? undefined : json['ScheduleRunType'],
        'customRecurrence': json['CustomRecurrence'] == null ? undefined : ScheduledScanRecurrenceViewModelFromJSON(json['CustomRecurrence']),
        'customScriptTemplateType': json['CustomScriptTemplateType'] == null ? undefined : json['CustomScriptTemplateType'],
        'isTargetUrlRequired': json['IsTargetUrlRequired'] == null ? undefined : json['IsTargetUrlRequired'],
        'isGenerateOptimizedCss': json['IsGenerateOptimizedCss'] == null ? undefined : json['IsGenerateOptimizedCss'],
        'accountTags': json['AccountTags'] == null ? undefined : ((json['AccountTags'] as Array<any>).map(TagViewModelFromJSON)),
        'entityCurrentTags': json['EntityCurrentTags'] == null ? undefined : json['EntityCurrentTags'],
        'scheduledTaskNames': json['ScheduledTaskNames'] == null ? undefined : ((json['ScheduledTaskNames'] as Array<any>).map(ScheduledScanUpdateViewModelFromJSON)),
        'launchSettingId': json['LaunchSettingId'] == null ? undefined : json['LaunchSettingId'],
        'additionalWebsites': json['AdditionalWebsites'] == null ? undefined : AdditionalWebsitesSettingModelFromJSON(json['AdditionalWebsites']),
        'agentGroupId': json['AgentGroupId'] == null ? undefined : json['AgentGroupId'],
        'agentId': json['AgentId'] == null ? undefined : json['AgentId'],
        'basicAuthenticationSetting': json['BasicAuthenticationSetting'] == null ? undefined : BasicAuthenticationSettingModelFromJSON(json['BasicAuthenticationSetting']),
        'canEdit': json['CanEdit'] == null ? undefined : json['CanEdit'],
        'clientCertificateAuthentication': json['ClientCertificateAuthentication'] == null ? undefined : ClientCertificateAuthenticationViewModelFromJSON(json['ClientCertificateAuthentication']),
        'cookies': json['Cookies'] == null ? undefined : json['Cookies'],
        'comments': json['Comments'] == null ? undefined : json['Comments'],
        'crawlAndAttack': json['CrawlAndAttack'] == null ? undefined : json['CrawlAndAttack'],
        'createType': json['CreateType'] == null ? undefined : json['CreateType'],
        'authenticationProfileOption': json['AuthenticationProfileOption'] == null ? undefined : json['AuthenticationProfileOption'],
        'authenticationProfileName': json['AuthenticationProfileName'] == null ? undefined : json['AuthenticationProfileName'],
        'findAndFollowNewLinks': json['FindAndFollowNewLinks'] == null ? undefined : json['FindAndFollowNewLinks'],
        'formAuthenticationSetting': json['FormAuthenticationSetting'] == null ? undefined : FormAuthenticationSettingModelFromJSON(json['FormAuthenticationSetting']),
        'headerAuthentication': json['HeaderAuthentication'] == null ? undefined : HeaderAuthenticationModelFromJSON(json['HeaderAuthentication']),
        'shark': json['Shark'] == null ? undefined : SharkModelFromJSON(json['Shark']),
        'importedLinks': json['ImportedLinks'] == null ? undefined : ImportedLinksSettingFromJSON(json['ImportedLinks']),
        'isMaxScanDurationEnabled': json['IsMaxScanDurationEnabled'] == null ? undefined : json['IsMaxScanDurationEnabled'],
        'isPrimary': json['IsPrimary'] == null ? undefined : json['IsPrimary'],
        'isShared': json['IsShared'] == null ? undefined : json['IsShared'],
        'maxScanDuration': json['MaxScanDuration'] == null ? undefined : json['MaxScanDuration'],
        'policyId': json['PolicyId'] == null ? undefined : json['PolicyId'],
        'policyName': json['PolicyName'] == null ? undefined : json['PolicyName'],
        'profileId': json['ProfileId'] == null ? undefined : json['ProfileId'],
        'profileName': json['ProfileName'] == null ? undefined : json['ProfileName'],
        'reportPolicyId': json['ReportPolicyId'] == null ? undefined : json['ReportPolicyId'],
        'reportPolicyName': json['ReportPolicyName'] == null ? undefined : json['ReportPolicyName'],
        'saveScanProfile': json['SaveScanProfile'] == null ? undefined : json['SaveScanProfile'],
        'scopeSetting': json['ScopeSetting'] == null ? undefined : ScopeSettingFromJSON(json['ScopeSetting']),
        'selectedAgents': json['SelectedAgents'] == null ? undefined : ((json['SelectedAgents'] as Array<any>).map(AgentSelectionModelFromJSON)),
        'selectedScanProfileId': json['SelectedScanProfileId'] == null ? undefined : json['SelectedScanProfileId'],
        'selectedScanProfileName': json['SelectedScanProfileName'] == null ? undefined : json['SelectedScanProfileName'],
        'targetUrl': json['TargetUrl'] == null ? undefined : json['TargetUrl'],
        'description': json['Description'] == null ? undefined : json['Description'],
        'timeWindow': json['TimeWindow'] == null ? undefined : ScanTimeWindowViewModelFromJSON(json['TimeWindow']),
        'urlRewriteSetting': json['UrlRewriteSetting'] == null ? undefined : UrlRewriteSettingFromJSON(json['UrlRewriteSetting']),
        'preRequestScriptSetting': json['PreRequestScriptSetting'] == null ? undefined : PreRequestScriptSettingModelFromJSON(json['PreRequestScriptSetting']),
        'userId': json['UserId'] == null ? undefined : json['UserId'],
        'websiteGroupId': json['WebsiteGroupId'] == null ? undefined : json['WebsiteGroupId'],
        'enablePciScanTask': json['EnablePciScanTask'] == null ? undefined : json['EnablePciScanTask'],
        'oAuth2Setting': json['OAuth2Setting'] == null ? undefined : OAuth2SettingModelFromJSON(json['OAuth2Setting']),
        'businessLogicRecorder': json['BusinessLogicRecorder'] == null ? undefined : BusinessLogicRecorderSettingModelFromJSON(json['BusinessLogicRecorder']),
    };
}

export function UpdateScheduledScanModelToJSON(value?: Omit<UpdateScheduledScanModel, 'CustomScriptTemplateType'|'IsTargetUrlRequired'|'CanEdit'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'Id': value['id'],
        'OccurencesCount': value['occurencesCount'],
        'Disabled': value['disabled'],
        'EnableScheduling': value['enableScheduling'],
        'Name': value['name'],
        'NextExecutionTime': value['nextExecutionTime'],
        'ScanGroupId': value['scanGroupId'],
        'ScanType': value['scanType'],
        'ScheduleRunType': value['scheduleRunType'],
        'CustomRecurrence': ScheduledScanRecurrenceViewModelToJSON(value['customRecurrence']),
        'IsGenerateOptimizedCss': value['isGenerateOptimizedCss'],
        'AccountTags': value['accountTags'] == null ? undefined : ((value['accountTags'] as Array<any>).map(TagViewModelToJSON)),
        'EntityCurrentTags': value['entityCurrentTags'],
        'ScheduledTaskNames': value['scheduledTaskNames'] == null ? undefined : ((value['scheduledTaskNames'] as Array<any>).map(ScheduledScanUpdateViewModelToJSON)),
        'LaunchSettingId': value['launchSettingId'],
        'AdditionalWebsites': AdditionalWebsitesSettingModelToJSON(value['additionalWebsites']),
        'AgentGroupId': value['agentGroupId'],
        'AgentId': value['agentId'],
        'BasicAuthenticationSetting': BasicAuthenticationSettingModelToJSON(value['basicAuthenticationSetting']),
        'ClientCertificateAuthentication': ClientCertificateAuthenticationViewModelToJSON(value['clientCertificateAuthentication']),
        'Cookies': value['cookies'],
        'Comments': value['comments'],
        'CrawlAndAttack': value['crawlAndAttack'],
        'CreateType': value['createType'],
        'AuthenticationProfileOption': value['authenticationProfileOption'],
        'AuthenticationProfileName': value['authenticationProfileName'],
        'FindAndFollowNewLinks': value['findAndFollowNewLinks'],
        'FormAuthenticationSetting': FormAuthenticationSettingModelToJSON(value['formAuthenticationSetting']),
        'HeaderAuthentication': HeaderAuthenticationModelToJSON(value['headerAuthentication']),
        'Shark': SharkModelToJSON(value['shark']),
        'ImportedLinks': ImportedLinksSettingToJSON(value['importedLinks']),
        'IsMaxScanDurationEnabled': value['isMaxScanDurationEnabled'],
        'IsPrimary': value['isPrimary'],
        'IsShared': value['isShared'],
        'MaxScanDuration': value['maxScanDuration'],
        'PolicyId': value['policyId'],
        'PolicyName': value['policyName'],
        'ProfileId': value['profileId'],
        'ProfileName': value['profileName'],
        'ReportPolicyId': value['reportPolicyId'],
        'ReportPolicyName': value['reportPolicyName'],
        'SaveScanProfile': value['saveScanProfile'],
        'ScopeSetting': ScopeSettingToJSON(value['scopeSetting']),
        'SelectedAgents': value['selectedAgents'] == null ? undefined : ((value['selectedAgents'] as Array<any>).map(AgentSelectionModelToJSON)),
        'SelectedScanProfileId': value['selectedScanProfileId'],
        'SelectedScanProfileName': value['selectedScanProfileName'],
        'TargetUrl': value['targetUrl'],
        'Description': value['description'],
        'TimeWindow': ScanTimeWindowViewModelToJSON(value['timeWindow']),
        'UrlRewriteSetting': UrlRewriteSettingToJSON(value['urlRewriteSetting']),
        'PreRequestScriptSetting': PreRequestScriptSettingModelToJSON(value['preRequestScriptSetting']),
        'UserId': value['userId'],
        'WebsiteGroupId': value['websiteGroupId'],
        'EnablePciScanTask': value['enablePciScanTask'],
        'OAuth2Setting': OAuth2SettingModelToJSON(value['oAuth2Setting']),
        'BusinessLogicRecorder': BusinessLogicRecorderSettingModelToJSON(value['businessLogicRecorder']),
    };
}

