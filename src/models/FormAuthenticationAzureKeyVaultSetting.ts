/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * FormAuthenticationAzureKeyVaultSetting
 * @export
 * @interface FormAuthenticationAzureKeyVaultSetting
 */
export interface FormAuthenticationAzureKeyVaultSetting {
    /**
     * Gets or sets the integration id.
     * @type {string}
     * @memberof FormAuthenticationAzureKeyVaultSetting
     */
    integrationId?: string;
    /**
     * Gets or sets the username is static or not.
     * @type {boolean}
     * @memberof FormAuthenticationAzureKeyVaultSetting
     */
    useStaticUsername?: boolean;
    /**
     * Gets or sets the static username.
     * @type {string}
     * @memberof FormAuthenticationAzureKeyVaultSetting
     */
    staticUsername?: string;
    /**
     * Gets or sets the username key.
     * @type {string}
     * @memberof FormAuthenticationAzureKeyVaultSetting
     */
    usernameKey?: string;
    /**
     * Gets or sets the password key.
     * @type {string}
     * @memberof FormAuthenticationAzureKeyVaultSetting
     */
    passwordKey?: string;
    /**
     * Gets or sets the clientId.
     * @type {string}
     * @memberof FormAuthenticationAzureKeyVaultSetting
     */
    clientID?: string;
    /**
     * Gets or sets the secret.
     * @type {string}
     * @memberof FormAuthenticationAzureKeyVaultSetting
     */
    clientSecret?: string;
    /**
     * Gets or sets the TenantId.
     * @type {string}
     * @memberof FormAuthenticationAzureKeyVaultSetting
     */
    tenantId?: string;
    /**
     * Gets or sets the Vault Name.
     * @type {string}
     * @memberof FormAuthenticationAzureKeyVaultSetting
     */
    vaultName?: string;
    /**
     * Gets or sets website agent mode.
     * @type {string}
     * @memberof FormAuthenticationAzureKeyVaultSetting
     */
    agentMode?: FormAuthenticationAzureKeyVaultSettingAgentModeEnum;
}


/**
 * @export
 */
export const FormAuthenticationAzureKeyVaultSettingAgentModeEnum = {
    Cloud: 'Cloud',
    Internal: 'Internal'
} as const;
export type FormAuthenticationAzureKeyVaultSettingAgentModeEnum = typeof FormAuthenticationAzureKeyVaultSettingAgentModeEnum[keyof typeof FormAuthenticationAzureKeyVaultSettingAgentModeEnum];


/**
 * Check if a given object implements the FormAuthenticationAzureKeyVaultSetting interface.
 */
export function instanceOfFormAuthenticationAzureKeyVaultSetting(value: object): boolean {
    return true;
}

export function FormAuthenticationAzureKeyVaultSettingFromJSON(json: any): FormAuthenticationAzureKeyVaultSetting {
    return FormAuthenticationAzureKeyVaultSettingFromJSONTyped(json, false);
}

export function FormAuthenticationAzureKeyVaultSettingFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormAuthenticationAzureKeyVaultSetting {
    if (json == null) {
        return json;
    }
    return {
        
        'integrationId': json['IntegrationId'] == null ? undefined : json['IntegrationId'],
        'useStaticUsername': json['UseStaticUsername'] == null ? undefined : json['UseStaticUsername'],
        'staticUsername': json['StaticUsername'] == null ? undefined : json['StaticUsername'],
        'usernameKey': json['UsernameKey'] == null ? undefined : json['UsernameKey'],
        'passwordKey': json['PasswordKey'] == null ? undefined : json['PasswordKey'],
        'clientID': json['ClientID'] == null ? undefined : json['ClientID'],
        'clientSecret': json['ClientSecret'] == null ? undefined : json['ClientSecret'],
        'tenantId': json['TenantId'] == null ? undefined : json['TenantId'],
        'vaultName': json['VaultName'] == null ? undefined : json['VaultName'],
        'agentMode': json['AgentMode'] == null ? undefined : json['AgentMode'],
    };
}

export function FormAuthenticationAzureKeyVaultSettingToJSON(value?: FormAuthenticationAzureKeyVaultSetting | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'IntegrationId': value['integrationId'],
        'UseStaticUsername': value['useStaticUsername'],
        'StaticUsername': value['staticUsername'],
        'UsernameKey': value['usernameKey'],
        'PasswordKey': value['passwordKey'],
        'ClientID': value['clientID'],
        'ClientSecret': value['clientSecret'],
        'TenantId': value['tenantId'],
        'VaultName': value['vaultName'],
        'AgentMode': value['agentMode'],
    };
}

