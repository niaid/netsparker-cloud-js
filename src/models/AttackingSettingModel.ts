/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Represents a model for carrying out attacking settings.
 * @export
 * @interface AttackingSettingModel
 */
export interface AttackingSettingModel {
    /**
     * Gets or sets the anti CSRF token names.
     * @type {string}
     * @memberof AttackingSettingModel
     */
    antiCsrfTokenNames?: string;
    /**
     * Gets or sets a value indicating whether parameter name attacking is enabled.
     * @type {boolean}
     * @memberof AttackingSettingModel
     */
    attackParameterName?: boolean;
    /**
     * Gets or sets a value indicating whether attacking to Referer header is enabled.
     * @type {boolean}
     * @memberof AttackingSettingModel
     */
    attackRefererHeader?: boolean;
    /**
     * Gets or sets a value indicating whether attacking to User-Agent header is enabled.
     * @type {boolean}
     * @memberof AttackingSettingModel
     */
    attackUserAgentHeader?: boolean;
    /**
     * Gets or sets a value indicating whether attacking to cookies is enabled.
     * @type {boolean}
     * @memberof AttackingSettingModel
     */
    attackCookies?: boolean;
    /**
     * Gets or sets the maximum parameters to attack.
     * @type {number}
     * @memberof AttackingSettingModel
     */
    maxParametersToAttack?: number;
    /**
     * Gets or sets a value indicating whether optimization for recurring parameters is enabled.
     * @type {boolean}
     * @memberof AttackingSettingModel
     */
    optimizeAttacksToRecurringParameters?: boolean;
    /**
     * Gets or sets a value indicating whether optimization for header attacks is enabled.
     * @type {boolean}
     * @memberof AttackingSettingModel
     */
    optimizeHeaderAttacks?: boolean;
    /**
     * Gets or sets a value indicating whether the version vulnerability severities should be overridden.
     * @type {boolean}
     * @memberof AttackingSettingModel
     */
    overrideVersionVulnerabilitySeverity?: boolean;
    /**
     * Gets or sets a value indicating whether proof generation is enabled.
     * @type {boolean}
     * @memberof AttackingSettingModel
     */
    proofGenerationEnabled?: boolean;
    /**
     * Gets or sets the page attack limit for links containing recurring parameters.
     * @type {number}
     * @memberof AttackingSettingModel
     */
    recurringParametersPageAttackLimit?: number;
    /**
     * Gets or sets a value indicating whether extra parameters should be used.
     * @type {boolean}
     * @memberof AttackingSettingModel
     */
    useExtraParameters?: boolean;
    /**
     * Gets or sets a value including the attacks on anti-CSRF tokens.
     * @type {boolean}
     * @memberof AttackingSettingModel
     */
    attackCsrfToken?: boolean;
}

/**
 * Check if a given object implements the AttackingSettingModel interface.
 */
export function instanceOfAttackingSettingModel(value: object): boolean {
    return true;
}

export function AttackingSettingModelFromJSON(json: any): AttackingSettingModel {
    return AttackingSettingModelFromJSONTyped(json, false);
}

export function AttackingSettingModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): AttackingSettingModel {
    if (json == null) {
        return json;
    }
    return {
        
        'antiCsrfTokenNames': json['AntiCsrfTokenNames'] == null ? undefined : json['AntiCsrfTokenNames'],
        'attackParameterName': json['AttackParameterName'] == null ? undefined : json['AttackParameterName'],
        'attackRefererHeader': json['AttackRefererHeader'] == null ? undefined : json['AttackRefererHeader'],
        'attackUserAgentHeader': json['AttackUserAgentHeader'] == null ? undefined : json['AttackUserAgentHeader'],
        'attackCookies': json['AttackCookies'] == null ? undefined : json['AttackCookies'],
        'maxParametersToAttack': json['MaxParametersToAttack'] == null ? undefined : json['MaxParametersToAttack'],
        'optimizeAttacksToRecurringParameters': json['OptimizeAttacksToRecurringParameters'] == null ? undefined : json['OptimizeAttacksToRecurringParameters'],
        'optimizeHeaderAttacks': json['OptimizeHeaderAttacks'] == null ? undefined : json['OptimizeHeaderAttacks'],
        'overrideVersionVulnerabilitySeverity': json['OverrideVersionVulnerabilitySeverity'] == null ? undefined : json['OverrideVersionVulnerabilitySeverity'],
        'proofGenerationEnabled': json['ProofGenerationEnabled'] == null ? undefined : json['ProofGenerationEnabled'],
        'recurringParametersPageAttackLimit': json['RecurringParametersPageAttackLimit'] == null ? undefined : json['RecurringParametersPageAttackLimit'],
        'useExtraParameters': json['UseExtraParameters'] == null ? undefined : json['UseExtraParameters'],
        'attackCsrfToken': json['AttackCsrfToken'] == null ? undefined : json['AttackCsrfToken'],
    };
}

export function AttackingSettingModelToJSON(value?: AttackingSettingModel | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'AntiCsrfTokenNames': value['antiCsrfTokenNames'],
        'AttackParameterName': value['attackParameterName'],
        'AttackRefererHeader': value['attackRefererHeader'],
        'AttackUserAgentHeader': value['attackUserAgentHeader'],
        'AttackCookies': value['attackCookies'],
        'MaxParametersToAttack': value['maxParametersToAttack'],
        'OptimizeAttacksToRecurringParameters': value['optimizeAttacksToRecurringParameters'],
        'OptimizeHeaderAttacks': value['optimizeHeaderAttacks'],
        'OverrideVersionVulnerabilitySeverity': value['overrideVersionVulnerabilitySeverity'],
        'ProofGenerationEnabled': value['proofGenerationEnabled'],
        'RecurringParametersPageAttackLimit': value['recurringParametersPageAttackLimit'],
        'UseExtraParameters': value['useExtraParameters'],
        'AttackCsrfToken': value['attackCsrfToken'],
    };
}

