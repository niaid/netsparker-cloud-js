/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { IntegrationCustomFieldVm } from './IntegrationCustomFieldVm';
import {
    IntegrationCustomFieldVmFromJSON,
    IntegrationCustomFieldVmFromJSONTyped,
    IntegrationCustomFieldVmToJSON,
} from './IntegrationCustomFieldVm';
import type { IntegrationWizardResultModel } from './IntegrationWizardResultModel';
import {
    IntegrationWizardResultModelFromJSON,
    IntegrationWizardResultModelFromJSONTyped,
    IntegrationWizardResultModelToJSON,
} from './IntegrationWizardResultModel';

/**
 * The GitLab integration info
 * @export
 * @interface GitLabIntegrationInfoModel
 */
export interface GitLabIntegrationInfoModel {
    /**
     * Gets or sets the access token.
     * @type {string}
     * @memberof GitLabIntegrationInfoModel
     */
    accessToken: string;
    /**
     * Gets or sets the assignee id.
     * @type {number}
     * @memberof GitLabIntegrationInfoModel
     */
    assigneeId?: number;
    /**
     * Gets or sets the due days.
     * @type {number}
     * @memberof GitLabIntegrationInfoModel
     */
    dueDays?: number;
    /**
     * Gets or sets the labels.
     * @type {string}
     * @memberof GitLabIntegrationInfoModel
     */
    labels?: string;
    /**
     * Gets or sets the milestone id.
     * @type {number}
     * @memberof GitLabIntegrationInfoModel
     */
    milestoneId?: number;
    /**
     * Gets or sets the on-premise base url.
     * @type {string}
     * @memberof GitLabIntegrationInfoModel
     */
    onPremiseBaseURL?: string;
    /**
     * Gets or sets the project id.
     * @type {number}
     * @memberof GitLabIntegrationInfoModel
     */
    projectId: number;
    /**
     * Gets or sets the weight.
     * @type {number}
     * @memberof GitLabIntegrationInfoModel
     */
    weight?: number;
    /**
     * 
     * @type {string}
     * @memberof GitLabIntegrationInfoModel
     */
    readonly type?: GitLabIntegrationInfoModelTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof GitLabIntegrationInfoModel
     */
    readonly genericErrorMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof GitLabIntegrationInfoModel
     */
    readonly identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof GitLabIntegrationInfoModel
     */
    readonly testMessageBody?: string;
    /**
     * 
     * @type {string}
     * @memberof GitLabIntegrationInfoModel
     */
    readonly testMessageTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof GitLabIntegrationInfoModel
     */
    readonly webhookUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof GitLabIntegrationInfoModel
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof GitLabIntegrationInfoModel
     */
    integrationVersion?: number;
    /**
     * 
     * @type {string}
     * @memberof GitLabIntegrationInfoModel
     */
    accountID?: string;
    /**
     * 
     * @type {Array<IntegrationCustomFieldVm>}
     * @memberof GitLabIntegrationInfoModel
     */
    customFields?: Array<IntegrationCustomFieldVm>;
    /**
     * 
     * @type {string}
     * @memberof GitLabIntegrationInfoModel
     */
    templateType?: GitLabIntegrationInfoModelTemplateTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof GitLabIntegrationInfoModel
     */
    reopenStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof GitLabIntegrationInfoModel
     */
    resolvedStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof GitLabIntegrationInfoModel
     */
    titleFormat: string;
    /**
     * 
     * @type {IntegrationWizardResultModel}
     * @memberof GitLabIntegrationInfoModel
     */
    integrationWizardResultModel?: IntegrationWizardResultModel;
}

/**
* @export
* @enum {string}
*/
export enum GitLabIntegrationInfoModelTypeEnum {
    Jira = 'Jira',
    GitHub = 'GitHub',
    Tfs = 'TFS',
    FogBugz = 'FogBugz',
    ServiceNow = 'ServiceNow',
    Slack = 'Slack',
    GitLab = 'GitLab',
    Bitbucket = 'Bitbucket',
    Unfuddle = 'Unfuddle',
    Zapier = 'Zapier',
    AzureDevOps = 'AzureDevOps',
    Redmine = 'Redmine',
    Bugzilla = 'Bugzilla',
    Kafka = 'Kafka',
    PagerDuty = 'PagerDuty',
    MicrosoftTeams = 'MicrosoftTeams',
    Clubhouse = 'Clubhouse',
    Trello = 'Trello',
    Asana = 'Asana',
    Webhook = 'Webhook',
    Kenna = 'Kenna',
    Freshservice = 'Freshservice',
    YouTrack = 'YouTrack',
    NetsparkerEnterprise = 'NetsparkerEnterprise',
    Splunk = 'Splunk',
    Mattermost = 'Mattermost',
    Hashicorp = 'Hashicorp',
    PivotalTracker = 'PivotalTracker',
    CyberArk = 'CyberArk',
    DefectDojo = 'DefectDojo',
    JazzTeam = 'JazzTeam',
    AzureKeyVault = 'AzureKeyVault',
    ServiceNowVrm = 'ServiceNowVRM'
}
/**
* @export
* @enum {string}
*/
export enum GitLabIntegrationInfoModelTemplateTypeEnum {
    Standard = 'Standard',
    Detailed = 'Detailed'
}


/**
 * Check if a given object implements the GitLabIntegrationInfoModel interface.
 */
export function instanceOfGitLabIntegrationInfoModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accessToken" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "titleFormat" in value;

    return isInstance;
}

export function GitLabIntegrationInfoModelFromJSON(json: any): GitLabIntegrationInfoModel {
    return GitLabIntegrationInfoModelFromJSONTyped(json, false);
}

export function GitLabIntegrationInfoModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): GitLabIntegrationInfoModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessToken': json['AccessToken'],
        'assigneeId': !exists(json, 'AssigneeId') ? undefined : json['AssigneeId'],
        'dueDays': !exists(json, 'DueDays') ? undefined : json['DueDays'],
        'labels': !exists(json, 'Labels') ? undefined : json['Labels'],
        'milestoneId': !exists(json, 'MilestoneId') ? undefined : json['MilestoneId'],
        'onPremiseBaseURL': !exists(json, 'OnPremiseBaseURL') ? undefined : json['OnPremiseBaseURL'],
        'projectId': json['ProjectId'],
        'weight': !exists(json, 'Weight') ? undefined : json['Weight'],
        'type': !exists(json, 'Type') ? undefined : json['Type'],
        'genericErrorMessage': !exists(json, 'GenericErrorMessage') ? undefined : json['GenericErrorMessage'],
        'identifier': !exists(json, 'Identifier') ? undefined : json['Identifier'],
        'testMessageBody': !exists(json, 'TestMessageBody') ? undefined : json['TestMessageBody'],
        'testMessageTitle': !exists(json, 'TestMessageTitle') ? undefined : json['TestMessageTitle'],
        'webhookUrl': !exists(json, 'WebhookUrl') ? undefined : json['WebhookUrl'],
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'integrationVersion': !exists(json, 'IntegrationVersion') ? undefined : json['IntegrationVersion'],
        'accountID': !exists(json, 'AccountID') ? undefined : json['AccountID'],
        'customFields': !exists(json, 'CustomFields') ? undefined : ((json['CustomFields'] as Array<any>).map(IntegrationCustomFieldVmFromJSON)),
        'templateType': !exists(json, 'TemplateType') ? undefined : json['TemplateType'],
        'reopenStatus': !exists(json, 'ReopenStatus') ? undefined : json['ReopenStatus'],
        'resolvedStatus': !exists(json, 'ResolvedStatus') ? undefined : json['ResolvedStatus'],
        'titleFormat': json['TitleFormat'],
        'integrationWizardResultModel': !exists(json, 'IntegrationWizardResultModel') ? undefined : IntegrationWizardResultModelFromJSON(json['IntegrationWizardResultModel']),
    };
}

export function GitLabIntegrationInfoModelToJSON(value?: GitLabIntegrationInfoModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'AccessToken': value.accessToken,
        'AssigneeId': value.assigneeId,
        'DueDays': value.dueDays,
        'Labels': value.labels,
        'MilestoneId': value.milestoneId,
        'OnPremiseBaseURL': value.onPremiseBaseURL,
        'ProjectId': value.projectId,
        'Weight': value.weight,
        'Name': value.name,
        'IntegrationVersion': value.integrationVersion,
        'AccountID': value.accountID,
        'CustomFields': value.customFields === undefined ? undefined : ((value.customFields as Array<any>).map(IntegrationCustomFieldVmToJSON)),
        'TemplateType': value.templateType,
        'ReopenStatus': value.reopenStatus,
        'ResolvedStatus': value.resolvedStatus,
        'TitleFormat': value.titleFormat,
        'IntegrationWizardResultModel': IntegrationWizardResultModelToJSON(value.integrationWizardResultModel),
    };
}

