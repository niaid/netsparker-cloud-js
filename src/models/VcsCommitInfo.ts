/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface VcsCommitInfo
 */
export interface VcsCommitInfo {
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    ciBuildConfigurationName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof VcsCommitInfo
     */
    ciBuildHasChange?: boolean;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    ciBuildId?: string;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    readonly ciBuildServerName?: string;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    ciBuildServerVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    ciBuildUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    ciNcPluginVersion?: string;
    /**
     * 
     * @type {Date}
     * @memberof VcsCommitInfo
     */
    ciTimestamp?: Date;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    comitterId?: string;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    committer?: string;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    committerName?: string;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    committerOverride?: string;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    integrationSystem?: VcsCommitInfoIntegrationSystemEnum;
    /**
     * 
     * @type {boolean}
     * @memberof VcsCommitInfo
     */
    isCommiterExistAndAuthorizedInNc?: boolean;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    vcsName?: string;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    vcsVersion?: string;
}

/**
* @export
* @enum {string}
*/
export enum VcsCommitInfoIntegrationSystemEnum {
    Teamcity = 'Teamcity',
    Jenkins = 'Jenkins',
    Bamboo = 'Bamboo',
    GitLab = 'GitLab',
    AzureDevOps = 'AzureDevOps',
    Jira = 'Jira',
    CircleCi = 'CircleCI',
    TravisCi = 'TravisCI',
    UrbanCodeDeploy = 'UrbanCodeDeploy',
    GitHubActions = 'GitHubActions'
}


/**
 * Check if a given object implements the VcsCommitInfo interface.
 */
export function instanceOfVcsCommitInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function VcsCommitInfoFromJSON(json: any): VcsCommitInfo {
    return VcsCommitInfoFromJSONTyped(json, false);
}

export function VcsCommitInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): VcsCommitInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ciBuildConfigurationName': !exists(json, 'CiBuildConfigurationName') ? undefined : json['CiBuildConfigurationName'],
        'ciBuildHasChange': !exists(json, 'CiBuildHasChange') ? undefined : json['CiBuildHasChange'],
        'ciBuildId': !exists(json, 'CiBuildId') ? undefined : json['CiBuildId'],
        'ciBuildServerName': !exists(json, 'CiBuildServerName') ? undefined : json['CiBuildServerName'],
        'ciBuildServerVersion': !exists(json, 'CiBuildServerVersion') ? undefined : json['CiBuildServerVersion'],
        'ciBuildUrl': !exists(json, 'CiBuildUrl') ? undefined : json['CiBuildUrl'],
        'ciNcPluginVersion': !exists(json, 'CiNcPluginVersion') ? undefined : json['CiNcPluginVersion'],
        'ciTimestamp': !exists(json, 'CiTimestamp') ? undefined : (new Date(json['CiTimestamp'])),
        'comitterId': !exists(json, 'ComitterId') ? undefined : json['ComitterId'],
        'committer': !exists(json, 'Committer') ? undefined : json['Committer'],
        'committerName': !exists(json, 'CommitterName') ? undefined : json['CommitterName'],
        'committerOverride': !exists(json, 'CommitterOverride') ? undefined : json['CommitterOverride'],
        'integrationSystem': !exists(json, 'IntegrationSystem') ? undefined : json['IntegrationSystem'],
        'isCommiterExistAndAuthorizedInNc': !exists(json, 'IsCommiterExistAndAuthorizedInNc') ? undefined : json['IsCommiterExistAndAuthorizedInNc'],
        'vcsName': !exists(json, 'VcsName') ? undefined : json['VcsName'],
        'vcsVersion': !exists(json, 'VcsVersion') ? undefined : json['VcsVersion'],
    };
}

export function VcsCommitInfoToJSON(value?: VcsCommitInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'CiBuildConfigurationName': value.ciBuildConfigurationName,
        'CiBuildHasChange': value.ciBuildHasChange,
        'CiBuildId': value.ciBuildId,
        'CiBuildServerVersion': value.ciBuildServerVersion,
        'CiBuildUrl': value.ciBuildUrl,
        'CiNcPluginVersion': value.ciNcPluginVersion,
        'CiTimestamp': value.ciTimestamp === undefined ? undefined : (value.ciTimestamp.toISOString()),
        'ComitterId': value.comitterId,
        'Committer': value.committer,
        'CommitterName': value.committerName,
        'CommitterOverride': value.committerOverride,
        'IntegrationSystem': value.integrationSystem,
        'IsCommiterExistAndAuthorizedInNc': value.isCommiterExistAndAuthorizedInNc,
        'VcsName': value.vcsName,
        'VcsVersion': value.vcsVersion,
    };
}

