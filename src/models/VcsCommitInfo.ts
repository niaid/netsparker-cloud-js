/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface VcsCommitInfo
 */
export interface VcsCommitInfo {
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    ciBuildConfigurationName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof VcsCommitInfo
     */
    ciBuildHasChange?: boolean;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    ciBuildId?: string;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    readonly ciBuildServerName?: string;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    ciBuildServerVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    ciBuildUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    ciNcPluginVersion?: string;
    /**
     * 
     * @type {Date}
     * @memberof VcsCommitInfo
     */
    ciTimestamp?: Date;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    comitterId?: string;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    committer?: string;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    committerName?: string;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    committerOverride?: string;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    integrationSystem?: VcsCommitInfoIntegrationSystemEnum;
    /**
     * 
     * @type {boolean}
     * @memberof VcsCommitInfo
     */
    isCommiterExistAndAuthorizedInNc?: boolean;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    vcsName?: string;
    /**
     * 
     * @type {string}
     * @memberof VcsCommitInfo
     */
    vcsVersion?: string;
}


/**
 * @export
 */
export const VcsCommitInfoIntegrationSystemEnum = {
    Teamcity: 'Teamcity',
    Jenkins: 'Jenkins',
    Bamboo: 'Bamboo',
    GitLab: 'GitLab',
    AzureDevOps: 'AzureDevOps',
    Jira: 'Jira',
    CircleCi: 'CircleCI',
    TravisCi: 'TravisCI',
    UrbanCodeDeploy: 'UrbanCodeDeploy',
    GitHubActions: 'GitHubActions'
} as const;
export type VcsCommitInfoIntegrationSystemEnum = typeof VcsCommitInfoIntegrationSystemEnum[keyof typeof VcsCommitInfoIntegrationSystemEnum];


/**
 * Check if a given object implements the VcsCommitInfo interface.
 */
export function instanceOfVcsCommitInfo(value: object): boolean {
    return true;
}

export function VcsCommitInfoFromJSON(json: any): VcsCommitInfo {
    return VcsCommitInfoFromJSONTyped(json, false);
}

export function VcsCommitInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): VcsCommitInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'ciBuildConfigurationName': json['CiBuildConfigurationName'] == null ? undefined : json['CiBuildConfigurationName'],
        'ciBuildHasChange': json['CiBuildHasChange'] == null ? undefined : json['CiBuildHasChange'],
        'ciBuildId': json['CiBuildId'] == null ? undefined : json['CiBuildId'],
        'ciBuildServerName': json['CiBuildServerName'] == null ? undefined : json['CiBuildServerName'],
        'ciBuildServerVersion': json['CiBuildServerVersion'] == null ? undefined : json['CiBuildServerVersion'],
        'ciBuildUrl': json['CiBuildUrl'] == null ? undefined : json['CiBuildUrl'],
        'ciNcPluginVersion': json['CiNcPluginVersion'] == null ? undefined : json['CiNcPluginVersion'],
        'ciTimestamp': json['CiTimestamp'] == null ? undefined : (new Date(json['CiTimestamp'])),
        'comitterId': json['ComitterId'] == null ? undefined : json['ComitterId'],
        'committer': json['Committer'] == null ? undefined : json['Committer'],
        'committerName': json['CommitterName'] == null ? undefined : json['CommitterName'],
        'committerOverride': json['CommitterOverride'] == null ? undefined : json['CommitterOverride'],
        'integrationSystem': json['IntegrationSystem'] == null ? undefined : json['IntegrationSystem'],
        'isCommiterExistAndAuthorizedInNc': json['IsCommiterExistAndAuthorizedInNc'] == null ? undefined : json['IsCommiterExistAndAuthorizedInNc'],
        'vcsName': json['VcsName'] == null ? undefined : json['VcsName'],
        'vcsVersion': json['VcsVersion'] == null ? undefined : json['VcsVersion'],
    };
}

export function VcsCommitInfoToJSON(value?: Omit<VcsCommitInfo, 'CiBuildServerName'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'CiBuildConfigurationName': value['ciBuildConfigurationName'],
        'CiBuildHasChange': value['ciBuildHasChange'],
        'CiBuildId': value['ciBuildId'],
        'CiBuildServerVersion': value['ciBuildServerVersion'],
        'CiBuildUrl': value['ciBuildUrl'],
        'CiNcPluginVersion': value['ciNcPluginVersion'],
        'CiTimestamp': value['ciTimestamp'] == null ? undefined : ((value['ciTimestamp']).toISOString()),
        'ComitterId': value['comitterId'],
        'Committer': value['committer'],
        'CommitterName': value['committerName'],
        'CommitterOverride': value['committerOverride'],
        'IntegrationSystem': value['integrationSystem'],
        'IsCommiterExistAndAuthorizedInNc': value['isCommiterExistAndAuthorizedInNc'],
        'VcsName': value['vcsName'],
        'VcsVersion': value['vcsVersion'],
    };
}

