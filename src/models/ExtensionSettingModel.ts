/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ExtensionSettingModel
 */
export interface ExtensionSettingModel {
    /**
     * 
     * @type {string}
     * @memberof ExtensionSettingModel
     */
    attackOption: ExtensionSettingModelAttackOptionEnum;
    /**
     * 
     * @type {string}
     * @memberof ExtensionSettingModel
     */
    crawlOption: ExtensionSettingModelCrawlOptionEnum;
    /**
     * 
     * @type {string}
     * @memberof ExtensionSettingModel
     */
    extension: string;
}


/**
 * @export
 */
export const ExtensionSettingModelAttackOptionEnum = {
    DoNotAttack: 'DoNotAttack',
    AttackParameters: 'AttackParameters',
    AttackParametersAndQueryString: 'AttackParametersAndQueryString'
} as const;
export type ExtensionSettingModelAttackOptionEnum = typeof ExtensionSettingModelAttackOptionEnum[keyof typeof ExtensionSettingModelAttackOptionEnum];

/**
 * @export
 */
export const ExtensionSettingModelCrawlOptionEnum = {
    DoNotCrawl: 'DoNotCrawl',
    Crawl: 'Crawl',
    CrawlOnlyParameter: 'CrawlOnlyParameter'
} as const;
export type ExtensionSettingModelCrawlOptionEnum = typeof ExtensionSettingModelCrawlOptionEnum[keyof typeof ExtensionSettingModelCrawlOptionEnum];


/**
 * Check if a given object implements the ExtensionSettingModel interface.
 */
export function instanceOfExtensionSettingModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "attackOption" in value;
    isInstance = isInstance && "crawlOption" in value;
    isInstance = isInstance && "extension" in value;

    return isInstance;
}

export function ExtensionSettingModelFromJSON(json: any): ExtensionSettingModel {
    return ExtensionSettingModelFromJSONTyped(json, false);
}

export function ExtensionSettingModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtensionSettingModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attackOption': json['AttackOption'],
        'crawlOption': json['CrawlOption'],
        'extension': json['Extension'],
    };
}

export function ExtensionSettingModelToJSON(value?: ExtensionSettingModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'AttackOption': value.attackOption,
        'CrawlOption': value.crawlOption,
        'Extension': value.extension,
    };
}

