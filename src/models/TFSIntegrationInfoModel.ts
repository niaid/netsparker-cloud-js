/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { IntegrationWizardResultModel } from './IntegrationWizardResultModel';
import {
    IntegrationWizardResultModelFromJSON,
    IntegrationWizardResultModelFromJSONTyped,
    IntegrationWizardResultModelToJSON,
} from './IntegrationWizardResultModel';
import type { IntegrationCustomFieldVm } from './IntegrationCustomFieldVm';
import {
    IntegrationCustomFieldVmFromJSON,
    IntegrationCustomFieldVmFromJSONTyped,
    IntegrationCustomFieldVmToJSON,
} from './IntegrationCustomFieldVm';

/**
 * The TFS integration info
 * @export
 * @interface TFSIntegrationInfoModel
 */
export interface TFSIntegrationInfoModel {
    /**
     * Gets or sets the assigned to.
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    assignedTo?: string;
    /**
     * Gets or sets the domain.
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    domain?: string;
    /**
     * Gets or sets the password.
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    password: string;
    /**
     * Gets or sets the project uri.
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    projectUri: string;
    /**
     * Gets or sets the tags.
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    tags?: string;
    /**
     * Gets or sets the username.
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    username: string;
    /**
     * Gets or sets the type of the work item type name.
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    workItemTypeName: string;
    /**
     * 
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    readonly type?: TFSIntegrationInfoModelTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    readonly genericErrorMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    readonly identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    readonly testMessageBody?: string;
    /**
     * 
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    readonly testMessageTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    readonly webhookUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof TFSIntegrationInfoModel
     */
    integrationVersion?: number;
    /**
     * 
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    accountID?: string;
    /**
     * 
     * @type {Array<IntegrationCustomFieldVm>}
     * @memberof TFSIntegrationInfoModel
     */
    customFields?: Array<IntegrationCustomFieldVm>;
    /**
     * 
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    templateType?: TFSIntegrationInfoModelTemplateTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    reopenStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    resolvedStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    titleFormat: string;
    /**
     * 
     * @type {IntegrationWizardResultModel}
     * @memberof TFSIntegrationInfoModel
     */
    integrationWizardResultModel?: IntegrationWizardResultModel;
    /**
     * 
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TFSIntegrationInfoModel
     */
    state?: TFSIntegrationInfoModelStateEnum;
}


/**
 * @export
 */
export const TFSIntegrationInfoModelTypeEnum = {
    NetsparkerEnterprise: 'NetsparkerEnterprise',
    Webhook: 'Webhook',
    Zapier: 'Zapier',
    Slack: 'Slack',
    Mattermost: 'Mattermost',
    MicrosoftTeams: 'MicrosoftTeams',
    AzureDevOps: 'AzureDevOps',
    Bitbucket: 'Bitbucket',
    Bugzilla: 'Bugzilla',
    Clubhouse: 'Clubhouse',
    DefectDojo: 'DefectDojo',
    PivotalTracker: 'PivotalTracker',
    Jira: 'Jira',
    FogBugz: 'FogBugz',
    GitHub: 'GitHub',
    PagerDuty: 'PagerDuty',
    Kafka: 'Kafka',
    Kenna: 'Kenna',
    Redmine: 'Redmine',
    ServiceNow: 'ServiceNow',
    Tfs: 'TFS',
    Unfuddle: 'Unfuddle',
    YouTrack: 'YouTrack',
    Freshservice: 'Freshservice',
    Splunk: 'Splunk',
    JazzTeam: 'JazzTeam',
    ServiceNowVrm: 'ServiceNowVRM',
    Asana: 'Asana',
    Trello: 'Trello',
    Hashicorp: 'Hashicorp',
    CyberArk: 'CyberArk',
    AzureKeyVault: 'AzureKeyVault',
    GitLab: 'GitLab'
} as const;
export type TFSIntegrationInfoModelTypeEnum = typeof TFSIntegrationInfoModelTypeEnum[keyof typeof TFSIntegrationInfoModelTypeEnum];

/**
 * @export
 */
export const TFSIntegrationInfoModelTemplateTypeEnum = {
    Standard: 'Standard',
    Detailed: 'Detailed'
} as const;
export type TFSIntegrationInfoModelTemplateTypeEnum = typeof TFSIntegrationInfoModelTemplateTypeEnum[keyof typeof TFSIntegrationInfoModelTemplateTypeEnum];

/**
 * @export
 */
export const TFSIntegrationInfoModelStateEnum = {
    Active: 'Active',
    Suspended: 'Suspended'
} as const;
export type TFSIntegrationInfoModelStateEnum = typeof TFSIntegrationInfoModelStateEnum[keyof typeof TFSIntegrationInfoModelStateEnum];


/**
 * Check if a given object implements the TFSIntegrationInfoModel interface.
 */
export function instanceOfTFSIntegrationInfoModel(value: object): boolean {
    if (!('password' in value)) return false;
    if (!('projectUri' in value)) return false;
    if (!('username' in value)) return false;
    if (!('workItemTypeName' in value)) return false;
    if (!('titleFormat' in value)) return false;
    return true;
}

export function TFSIntegrationInfoModelFromJSON(json: any): TFSIntegrationInfoModel {
    return TFSIntegrationInfoModelFromJSONTyped(json, false);
}

export function TFSIntegrationInfoModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): TFSIntegrationInfoModel {
    if (json == null) {
        return json;
    }
    return {
        
        'assignedTo': json['AssignedTo'] == null ? undefined : json['AssignedTo'],
        'domain': json['Domain'] == null ? undefined : json['Domain'],
        'password': json['Password'],
        'projectUri': json['ProjectUri'],
        'tags': json['Tags'] == null ? undefined : json['Tags'],
        'username': json['Username'],
        'workItemTypeName': json['WorkItemTypeName'],
        'type': json['Type'] == null ? undefined : json['Type'],
        'genericErrorMessage': json['GenericErrorMessage'] == null ? undefined : json['GenericErrorMessage'],
        'identifier': json['Identifier'] == null ? undefined : json['Identifier'],
        'testMessageBody': json['TestMessageBody'] == null ? undefined : json['TestMessageBody'],
        'testMessageTitle': json['TestMessageTitle'] == null ? undefined : json['TestMessageTitle'],
        'webhookUrl': json['WebhookUrl'] == null ? undefined : json['WebhookUrl'],
        'name': json['Name'] == null ? undefined : json['Name'],
        'integrationVersion': json['IntegrationVersion'] == null ? undefined : json['IntegrationVersion'],
        'accountID': json['AccountID'] == null ? undefined : json['AccountID'],
        'customFields': json['CustomFields'] == null ? undefined : ((json['CustomFields'] as Array<any>).map(IntegrationCustomFieldVmFromJSON)),
        'templateType': json['TemplateType'] == null ? undefined : json['TemplateType'],
        'reopenStatus': json['ReopenStatus'] == null ? undefined : json['ReopenStatus'],
        'resolvedStatus': json['ResolvedStatus'] == null ? undefined : json['ResolvedStatus'],
        'titleFormat': json['TitleFormat'],
        'integrationWizardResultModel': json['IntegrationWizardResultModel'] == null ? undefined : IntegrationWizardResultModelFromJSON(json['IntegrationWizardResultModel']),
        'id': json['Id'] == null ? undefined : json['Id'],
        'state': json['State'] == null ? undefined : json['State'],
    };
}

export function TFSIntegrationInfoModelToJSON(value?: Omit<TFSIntegrationInfoModel, 'Type'|'GenericErrorMessage'|'Identifier'|'TestMessageBody'|'TestMessageTitle'|'WebhookUrl'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'AssignedTo': value['assignedTo'],
        'Domain': value['domain'],
        'Password': value['password'],
        'ProjectUri': value['projectUri'],
        'Tags': value['tags'],
        'Username': value['username'],
        'WorkItemTypeName': value['workItemTypeName'],
        'Name': value['name'],
        'IntegrationVersion': value['integrationVersion'],
        'AccountID': value['accountID'],
        'CustomFields': value['customFields'] == null ? undefined : ((value['customFields'] as Array<any>).map(IntegrationCustomFieldVmToJSON)),
        'TemplateType': value['templateType'],
        'ReopenStatus': value['reopenStatus'],
        'ResolvedStatus': value['resolvedStatus'],
        'TitleFormat': value['titleFormat'],
        'IntegrationWizardResultModel': IntegrationWizardResultModelToJSON(value['integrationWizardResultModel']),
        'Id': value['id'],
        'State': value['state'],
    };
}

