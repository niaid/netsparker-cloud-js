/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Scan Policy web storage settings
 * @export
 * @interface WebStorageSetting
 */
export interface WebStorageSetting {
    /**
     * Web storage key.
     * @type {string}
     * @memberof WebStorageSetting
     */
    key: string;
    /**
     * Web storage origin.
     * @type {string}
     * @memberof WebStorageSetting
     */
    origin?: string;
    /**
     * Web settings storage types
     * @type {string}
     * @memberof WebStorageSetting
     */
    type: WebStorageSettingTypeEnum;
    /**
     * Web storage value.
     * @type {string}
     * @memberof WebStorageSetting
     */
    value: string;
}


/**
 * @export
 */
export const WebStorageSettingTypeEnum = {
    Local: 'Local',
    Session: 'Session'
} as const;
export type WebStorageSettingTypeEnum = typeof WebStorageSettingTypeEnum[keyof typeof WebStorageSettingTypeEnum];


/**
 * Check if a given object implements the WebStorageSetting interface.
 */
export function instanceOfWebStorageSetting(value: object): boolean {
    if (!('key' in value)) return false;
    if (!('type' in value)) return false;
    if (!('value' in value)) return false;
    return true;
}

export function WebStorageSettingFromJSON(json: any): WebStorageSetting {
    return WebStorageSettingFromJSONTyped(json, false);
}

export function WebStorageSettingFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebStorageSetting {
    if (json == null) {
        return json;
    }
    return {
        
        'key': json['Key'],
        'origin': json['Origin'] == null ? undefined : json['Origin'],
        'type': json['Type'],
        'value': json['Value'],
    };
}

export function WebStorageSettingToJSON(value?: WebStorageSetting | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'Key': value['key'],
        'Origin': value['origin'],
        'Type': value['type'],
        'Value': value['value'],
    };
}

