/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Represents a Form Authentication persona.
 * @export
 * @interface FormAuthenticationPersona
 */
export interface FormAuthenticationPersona {
    /**
     * Gets or sets a value indicating whether this persona is the active one to use for a scan.
     * @type {boolean}
     * @memberof FormAuthenticationPersona
     */
    isActive?: boolean;
    /**
     * Gets or sets the password.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    password?: string;
    /**
     * Gets or sets the user name.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    userName?: string;
    /**
     * Gets or sets OtpType.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    otpType?: FormAuthenticationPersonaOtpTypeEnum;
    /**
     * Gets or sets secret key.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    secretKey?: string;
    /**
     * Gets or sets digit.
     * @type {number}
     * @memberof FormAuthenticationPersona
     */
    digit?: number;
    /**
     * Gets or sets period (seconds).
     * @type {number}
     * @memberof FormAuthenticationPersona
     */
    period?: number;
    /**
     * Gets or sets hash algorithm.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    algorithm?: FormAuthenticationPersonaAlgorithmEnum;
    /**
     * Gets or sets the type of form authentication.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    formAuthType?: FormAuthenticationPersonaFormAuthTypeEnum;
    /**
     * Gets or sets the integration id.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    integrationId?: string;
    /**
     * Gets or sets the KV Secret engine version.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    version?: FormAuthenticationPersonaVersionEnum;
    /**
     * Gets or sets the secret engine.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    secretEngine?: string;
    /**
     * Gets or sets the secret.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    secret?: string;
    /**
     * Gets or sets the username is static or not.
     * @type {boolean}
     * @memberof FormAuthenticationPersona
     */
    useStaticUsername?: boolean;
    /**
     * Gets or sets the static username.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    staticUsername?: string;
    /**
     * Gets or sets the username key.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    usernameKey?: string;
    /**
     * Gets or sets the password key.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    passwordKey?: string;
    /**
     * Gets or sets the username is static or not.
     * @type {boolean}
     * @memberof FormAuthenticationPersona
     */
    cyberArkUseStaticUsername?: boolean;
    /**
     * Gets or sets the AppID.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    cyberArkStaticUsername?: string;
    /**
     * Gets or sets the Query.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    cyberArkUserNameQuery?: string;
    /**
     * Gets or sets the Query.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    cyberArkPasswordQuery?: string;
    /**
     * Gets or sets the Azure username is static or not.
     * @type {boolean}
     * @memberof FormAuthenticationPersona
     */
    azureUseStaticUsername?: boolean;
    /**
     * Gets or sets the Azure AppID.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    azureStaticUsername?: string;
    /**
     * Gets or sets the Azure Secret.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    azureSecret?: string;
    /**
     * Gets or sets the Azure Vault Name.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    azureVaultName?: string;
    /**
     * Gets or sets the Azure username key.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    azureUsernameKey?: string;
    /**
     * Gets or sets the Azure password key.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    azurePasswordKey?: string;
    /**
     * Gets or sets the user name that not modified by user on client side.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    originalUserName?: string;
    /**
     * Gets or sets a value indicating whether the placeholders is replaced with actual credentials.
     * @type {boolean}
     * @memberof FormAuthenticationPersona
     */
    isReplacedCredentials?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FormAuthenticationPersona
     */
    index?: number;
}


/**
 * @export
 */
export const FormAuthenticationPersonaOtpTypeEnum = {
    Totp: 'Totp',
    Hotp: 'Hotp'
} as const;
export type FormAuthenticationPersonaOtpTypeEnum = typeof FormAuthenticationPersonaOtpTypeEnum[keyof typeof FormAuthenticationPersonaOtpTypeEnum];

/**
 * @export
 */
export const FormAuthenticationPersonaAlgorithmEnum = {
    Sha1: 'Sha1',
    Sha256: 'Sha256',
    Sha512: 'Sha512'
} as const;
export type FormAuthenticationPersonaAlgorithmEnum = typeof FormAuthenticationPersonaAlgorithmEnum[keyof typeof FormAuthenticationPersonaAlgorithmEnum];

/**
 * @export
 */
export const FormAuthenticationPersonaFormAuthTypeEnum = {
    Manual: 'Manual',
    Integration: 'Integration'
} as const;
export type FormAuthenticationPersonaFormAuthTypeEnum = typeof FormAuthenticationPersonaFormAuthTypeEnum[keyof typeof FormAuthenticationPersonaFormAuthTypeEnum];

/**
 * @export
 */
export const FormAuthenticationPersonaVersionEnum = {
    V1: 'V1',
    V2: 'V2'
} as const;
export type FormAuthenticationPersonaVersionEnum = typeof FormAuthenticationPersonaVersionEnum[keyof typeof FormAuthenticationPersonaVersionEnum];


/**
 * Check if a given object implements the FormAuthenticationPersona interface.
 */
export function instanceOfFormAuthenticationPersona(value: object): boolean {
    return true;
}

export function FormAuthenticationPersonaFromJSON(json: any): FormAuthenticationPersona {
    return FormAuthenticationPersonaFromJSONTyped(json, false);
}

export function FormAuthenticationPersonaFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormAuthenticationPersona {
    if (json == null) {
        return json;
    }
    return {
        
        'isActive': json['IsActive'] == null ? undefined : json['IsActive'],
        'password': json['Password'] == null ? undefined : json['Password'],
        'userName': json['UserName'] == null ? undefined : json['UserName'],
        'otpType': json['OtpType'] == null ? undefined : json['OtpType'],
        'secretKey': json['SecretKey'] == null ? undefined : json['SecretKey'],
        'digit': json['Digit'] == null ? undefined : json['Digit'],
        'period': json['Period'] == null ? undefined : json['Period'],
        'algorithm': json['Algorithm'] == null ? undefined : json['Algorithm'],
        'formAuthType': json['FormAuthType'] == null ? undefined : json['FormAuthType'],
        'integrationId': json['IntegrationId'] == null ? undefined : json['IntegrationId'],
        'version': json['Version'] == null ? undefined : json['Version'],
        'secretEngine': json['SecretEngine'] == null ? undefined : json['SecretEngine'],
        'secret': json['Secret'] == null ? undefined : json['Secret'],
        'useStaticUsername': json['UseStaticUsername'] == null ? undefined : json['UseStaticUsername'],
        'staticUsername': json['StaticUsername'] == null ? undefined : json['StaticUsername'],
        'usernameKey': json['UsernameKey'] == null ? undefined : json['UsernameKey'],
        'passwordKey': json['PasswordKey'] == null ? undefined : json['PasswordKey'],
        'cyberArkUseStaticUsername': json['CyberArkUseStaticUsername'] == null ? undefined : json['CyberArkUseStaticUsername'],
        'cyberArkStaticUsername': json['CyberArkStaticUsername'] == null ? undefined : json['CyberArkStaticUsername'],
        'cyberArkUserNameQuery': json['CyberArkUserNameQuery'] == null ? undefined : json['CyberArkUserNameQuery'],
        'cyberArkPasswordQuery': json['CyberArkPasswordQuery'] == null ? undefined : json['CyberArkPasswordQuery'],
        'azureUseStaticUsername': json['AzureUseStaticUsername'] == null ? undefined : json['AzureUseStaticUsername'],
        'azureStaticUsername': json['AzureStaticUsername'] == null ? undefined : json['AzureStaticUsername'],
        'azureSecret': json['AzureSecret'] == null ? undefined : json['AzureSecret'],
        'azureVaultName': json['AzureVaultName'] == null ? undefined : json['AzureVaultName'],
        'azureUsernameKey': json['AzureUsernameKey'] == null ? undefined : json['AzureUsernameKey'],
        'azurePasswordKey': json['AzurePasswordKey'] == null ? undefined : json['AzurePasswordKey'],
        'originalUserName': json['OriginalUserName'] == null ? undefined : json['OriginalUserName'],
        'isReplacedCredentials': json['IsReplacedCredentials'] == null ? undefined : json['IsReplacedCredentials'],
        'index': json['Index'] == null ? undefined : json['Index'],
    };
}

export function FormAuthenticationPersonaToJSON(value?: FormAuthenticationPersona | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'IsActive': value['isActive'],
        'Password': value['password'],
        'UserName': value['userName'],
        'OtpType': value['otpType'],
        'SecretKey': value['secretKey'],
        'Digit': value['digit'],
        'Period': value['period'],
        'Algorithm': value['algorithm'],
        'FormAuthType': value['formAuthType'],
        'IntegrationId': value['integrationId'],
        'Version': value['version'],
        'SecretEngine': value['secretEngine'],
        'Secret': value['secret'],
        'UseStaticUsername': value['useStaticUsername'],
        'StaticUsername': value['staticUsername'],
        'UsernameKey': value['usernameKey'],
        'PasswordKey': value['passwordKey'],
        'CyberArkUseStaticUsername': value['cyberArkUseStaticUsername'],
        'CyberArkStaticUsername': value['cyberArkStaticUsername'],
        'CyberArkUserNameQuery': value['cyberArkUserNameQuery'],
        'CyberArkPasswordQuery': value['cyberArkPasswordQuery'],
        'AzureUseStaticUsername': value['azureUseStaticUsername'],
        'AzureStaticUsername': value['azureStaticUsername'],
        'AzureSecret': value['azureSecret'],
        'AzureVaultName': value['azureVaultName'],
        'AzureUsernameKey': value['azureUsernameKey'],
        'AzurePasswordKey': value['azurePasswordKey'],
        'OriginalUserName': value['originalUserName'],
        'IsReplacedCredentials': value['isReplacedCredentials'],
        'Index': value['index'],
    };
}

