/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents a Form Authentication persona.
 * @export
 * @interface FormAuthenticationPersona
 */
export interface FormAuthenticationPersona {
    /**
     * Gets or sets a value indicating whether this persona is the active one to use for a scan.
     * @type {boolean}
     * @memberof FormAuthenticationPersona
     */
    isActive?: boolean;
    /**
     * Gets or sets the password.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    password?: string;
    /**
     * Gets or sets the user name.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    userName?: string;
    /**
     * Gets or sets OtpType.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    otpType?: FormAuthenticationPersonaOtpTypeEnum;
    /**
     * Gets or sets secret key.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    secretKey?: string;
    /**
     * Gets or sets digit.
     * @type {number}
     * @memberof FormAuthenticationPersona
     */
    digit?: number;
    /**
     * Gets or sets period (seconds).
     * @type {number}
     * @memberof FormAuthenticationPersona
     */
    period?: number;
    /**
     * Gets or sets hash algorithm.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    algorithm?: FormAuthenticationPersonaAlgorithmEnum;
    /**
     * Gets or sets the type of form authentication.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    formAuthType?: FormAuthenticationPersonaFormAuthTypeEnum;
    /**
     * Gets or sets the integration id.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    integrationId?: string;
    /**
     * Gets or sets the KV Secret engine version.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    version?: FormAuthenticationPersonaVersionEnum;
    /**
     * Gets or sets the secret engine.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    secretEngine?: string;
    /**
     * Gets or sets the secret.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    secret?: string;
    /**
     * Gets or sets the username is static or not.
     * @type {boolean}
     * @memberof FormAuthenticationPersona
     */
    useStaticUsername?: boolean;
    /**
     * Gets or sets the static username.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    staticUsername?: string;
    /**
     * Gets or sets the username key.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    usernameKey?: string;
    /**
     * Gets or sets the password key.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    passwordKey?: string;
    /**
     * Gets or sets the username is static or not.
     * @type {boolean}
     * @memberof FormAuthenticationPersona
     */
    cyberArkUseStaticUsername?: boolean;
    /**
     * Gets or sets the AppID.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    cyberArkStaticUsername?: string;
    /**
     * Gets or sets the Query.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    cyberArkUserNameQuery?: string;
    /**
     * Gets or sets the Query.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    cyberArkPasswordQuery?: string;
    /**
     * Gets or sets the Azure username is static or not.
     * @type {boolean}
     * @memberof FormAuthenticationPersona
     */
    azureUseStaticUsername?: boolean;
    /**
     * Gets or sets the Azure AppID.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    azureStaticUsername?: string;
    /**
     * Gets or sets the Azure Secret.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    azureSecret?: string;
    /**
     * Gets or sets the Azure Vault Name.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    azureVaultName?: string;
    /**
     * Gets or sets the Azure username key.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    azureUsernameKey?: string;
    /**
     * Gets or sets the Azure password key.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    azurePasswordKey?: string;
    /**
     * Gets or sets the user name that not modified by user on client side.
     * @type {string}
     * @memberof FormAuthenticationPersona
     */
    originalUserName?: string;
    /**
     * Gets or sets a value indicating whether the placeholders is replaced with actual credentials.
     * @type {boolean}
     * @memberof FormAuthenticationPersona
     */
    isReplacedCredentials?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FormAuthenticationPersona
     */
    index?: number;
}

/**
* @export
* @enum {string}
*/
export enum FormAuthenticationPersonaOtpTypeEnum {
    Totp = 'Totp',
    Hotp = 'Hotp'
}
/**
* @export
* @enum {string}
*/
export enum FormAuthenticationPersonaAlgorithmEnum {
    Sha1 = 'Sha1',
    Sha256 = 'Sha256',
    Sha512 = 'Sha512'
}
/**
* @export
* @enum {string}
*/
export enum FormAuthenticationPersonaFormAuthTypeEnum {
    Manual = 'Manual',
    Integration = 'Integration'
}
/**
* @export
* @enum {string}
*/
export enum FormAuthenticationPersonaVersionEnum {
    V1 = 'V1',
    V2 = 'V2'
}


/**
 * Check if a given object implements the FormAuthenticationPersona interface.
 */
export function instanceOfFormAuthenticationPersona(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FormAuthenticationPersonaFromJSON(json: any): FormAuthenticationPersona {
    return FormAuthenticationPersonaFromJSONTyped(json, false);
}

export function FormAuthenticationPersonaFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormAuthenticationPersona {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'isActive': !exists(json, 'IsActive') ? undefined : json['IsActive'],
        'password': !exists(json, 'Password') ? undefined : json['Password'],
        'userName': !exists(json, 'UserName') ? undefined : json['UserName'],
        'otpType': !exists(json, 'OtpType') ? undefined : json['OtpType'],
        'secretKey': !exists(json, 'SecretKey') ? undefined : json['SecretKey'],
        'digit': !exists(json, 'Digit') ? undefined : json['Digit'],
        'period': !exists(json, 'Period') ? undefined : json['Period'],
        'algorithm': !exists(json, 'Algorithm') ? undefined : json['Algorithm'],
        'formAuthType': !exists(json, 'FormAuthType') ? undefined : json['FormAuthType'],
        'integrationId': !exists(json, 'IntegrationId') ? undefined : json['IntegrationId'],
        'version': !exists(json, 'Version') ? undefined : json['Version'],
        'secretEngine': !exists(json, 'SecretEngine') ? undefined : json['SecretEngine'],
        'secret': !exists(json, 'Secret') ? undefined : json['Secret'],
        'useStaticUsername': !exists(json, 'UseStaticUsername') ? undefined : json['UseStaticUsername'],
        'staticUsername': !exists(json, 'StaticUsername') ? undefined : json['StaticUsername'],
        'usernameKey': !exists(json, 'UsernameKey') ? undefined : json['UsernameKey'],
        'passwordKey': !exists(json, 'PasswordKey') ? undefined : json['PasswordKey'],
        'cyberArkUseStaticUsername': !exists(json, 'CyberArkUseStaticUsername') ? undefined : json['CyberArkUseStaticUsername'],
        'cyberArkStaticUsername': !exists(json, 'CyberArkStaticUsername') ? undefined : json['CyberArkStaticUsername'],
        'cyberArkUserNameQuery': !exists(json, 'CyberArkUserNameQuery') ? undefined : json['CyberArkUserNameQuery'],
        'cyberArkPasswordQuery': !exists(json, 'CyberArkPasswordQuery') ? undefined : json['CyberArkPasswordQuery'],
        'azureUseStaticUsername': !exists(json, 'AzureUseStaticUsername') ? undefined : json['AzureUseStaticUsername'],
        'azureStaticUsername': !exists(json, 'AzureStaticUsername') ? undefined : json['AzureStaticUsername'],
        'azureSecret': !exists(json, 'AzureSecret') ? undefined : json['AzureSecret'],
        'azureVaultName': !exists(json, 'AzureVaultName') ? undefined : json['AzureVaultName'],
        'azureUsernameKey': !exists(json, 'AzureUsernameKey') ? undefined : json['AzureUsernameKey'],
        'azurePasswordKey': !exists(json, 'AzurePasswordKey') ? undefined : json['AzurePasswordKey'],
        'originalUserName': !exists(json, 'OriginalUserName') ? undefined : json['OriginalUserName'],
        'isReplacedCredentials': !exists(json, 'IsReplacedCredentials') ? undefined : json['IsReplacedCredentials'],
        'index': !exists(json, 'Index') ? undefined : json['Index'],
    };
}

export function FormAuthenticationPersonaToJSON(value?: FormAuthenticationPersona | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'IsActive': value.isActive,
        'Password': value.password,
        'UserName': value.userName,
        'OtpType': value.otpType,
        'SecretKey': value.secretKey,
        'Digit': value.digit,
        'Period': value.period,
        'Algorithm': value.algorithm,
        'FormAuthType': value.formAuthType,
        'IntegrationId': value.integrationId,
        'Version': value.version,
        'SecretEngine': value.secretEngine,
        'Secret': value.secret,
        'UseStaticUsername': value.useStaticUsername,
        'StaticUsername': value.staticUsername,
        'UsernameKey': value.usernameKey,
        'PasswordKey': value.passwordKey,
        'CyberArkUseStaticUsername': value.cyberArkUseStaticUsername,
        'CyberArkStaticUsername': value.cyberArkStaticUsername,
        'CyberArkUserNameQuery': value.cyberArkUserNameQuery,
        'CyberArkPasswordQuery': value.cyberArkPasswordQuery,
        'AzureUseStaticUsername': value.azureUseStaticUsername,
        'AzureStaticUsername': value.azureStaticUsername,
        'AzureSecret': value.azureSecret,
        'AzureVaultName': value.azureVaultName,
        'AzureUsernameKey': value.azureUsernameKey,
        'AzurePasswordKey': value.azurePasswordKey,
        'OriginalUserName': value.originalUserName,
        'IsReplacedCredentials': value.isReplacedCredentials,
        'Index': value.index,
    };
}

