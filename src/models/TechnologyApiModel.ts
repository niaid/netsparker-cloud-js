/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents a model for carrying out technology.
 * @export
 * @interface TechnologyApiModel
 */
export interface TechnologyApiModel {
    /**
     * Gets or sets name of the technology's category.
     * @type {string}
     * @memberof TechnologyApiModel
     */
    category?: string;
    /**
     * Gets or sets display name of the technology.
     * @type {string}
     * @memberof TechnologyApiModel
     */
    displayName?: string;
    /**
     * Gets or sets indicating a value whether the technology's version is ended up.
     * Returns a date value if the version is ended up; otherwise, null.
     * @type {string}
     * @memberof TechnologyApiModel
     */
    endOfLife?: string;
    /**
     * Gets or sets unique identifier of the technology.
     * @type {string}
     * @memberof TechnologyApiModel
     */
    id?: string;
    /**
     * Gets or sets version of a technology.
     * @type {string}
     * @memberof TechnologyApiModel
     */
    identifiedVersion?: string;
    /**
     * Gets or sets a value indicating whether notifications is disabled.
     * @type {boolean}
     * @memberof TechnologyApiModel
     */
    isNotificationDisabled?: boolean;
    /**
     * Gets or sets whether a technology is out-of-date.
     * Returns a boolean value if there is out-of-date information about the version; otherwise, null.
     * @type {boolean}
     * @memberof TechnologyApiModel
     */
    isOutofDate?: boolean;
    /**
     * Gets or sets the count of issues with critical level severity.
     * @type {number}
     * @memberof TechnologyApiModel
     */
    issueCriticalCount?: number;
    /**
     * Gets or sets the count of issues with high level severity.
     * @type {number}
     * @memberof TechnologyApiModel
     */
    issueHighCount?: number;
    /**
     * Gets or sets the count of issues with information level severity.
     * @type {number}
     * @memberof TechnologyApiModel
     */
    issueInfoCount?: number;
    /**
     * Gets or sets the count of issues with low level severity.
     * @type {number}
     * @memberof TechnologyApiModel
     */
    issueLowCount?: number;
    /**
     * Gets or sets the count of issues with medium level severity.
     * @type {number}
     * @memberof TechnologyApiModel
     */
    issueMediumCount?: number;
    /**
     * Gets or sets last seen date of the technology.
     * @type {string}
     * @memberof TechnologyApiModel
     */
    lastSeenDate?: string;
    /**
     * Gets or sets latest version of the technology.
     * @type {string}
     * @memberof TechnologyApiModel
     */
    latestVersion?: string;
    /**
     * Gets or sets name of the technology.
     * @type {string}
     * @memberof TechnologyApiModel
     */
    name?: string;
    /**
     * Gets or sets the scan task identifier.
     * @type {string}
     * @memberof TechnologyApiModel
     */
    scanTaskId?: string;
    /**
     * Gets or sets the website identifier.
     * @type {string}
     * @memberof TechnologyApiModel
     */
    websiteId?: string;
    /**
     * Gets or sets name of the website.
     * @type {string}
     * @memberof TechnologyApiModel
     */
    websiteName?: string;
    /**
     * Gets or sets overall latest version of the technology.
     * @type {string}
     * @memberof TechnologyApiModel
     */
    overallLatestVersion?: string;
}

/**
 * Check if a given object implements the TechnologyApiModel interface.
 */
export function instanceOfTechnologyApiModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TechnologyApiModelFromJSON(json: any): TechnologyApiModel {
    return TechnologyApiModelFromJSONTyped(json, false);
}

export function TechnologyApiModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): TechnologyApiModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'category': !exists(json, 'Category') ? undefined : json['Category'],
        'displayName': !exists(json, 'DisplayName') ? undefined : json['DisplayName'],
        'endOfLife': !exists(json, 'EndOfLife') ? undefined : json['EndOfLife'],
        'id': !exists(json, 'Id') ? undefined : json['Id'],
        'identifiedVersion': !exists(json, 'IdentifiedVersion') ? undefined : json['IdentifiedVersion'],
        'isNotificationDisabled': !exists(json, 'IsNotificationDisabled') ? undefined : json['IsNotificationDisabled'],
        'isOutofDate': !exists(json, 'IsOutofDate') ? undefined : json['IsOutofDate'],
        'issueCriticalCount': !exists(json, 'IssueCriticalCount') ? undefined : json['IssueCriticalCount'],
        'issueHighCount': !exists(json, 'IssueHighCount') ? undefined : json['IssueHighCount'],
        'issueInfoCount': !exists(json, 'IssueInfoCount') ? undefined : json['IssueInfoCount'],
        'issueLowCount': !exists(json, 'IssueLowCount') ? undefined : json['IssueLowCount'],
        'issueMediumCount': !exists(json, 'IssueMediumCount') ? undefined : json['IssueMediumCount'],
        'lastSeenDate': !exists(json, 'LastSeenDate') ? undefined : json['LastSeenDate'],
        'latestVersion': !exists(json, 'LatestVersion') ? undefined : json['LatestVersion'],
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'scanTaskId': !exists(json, 'ScanTaskId') ? undefined : json['ScanTaskId'],
        'websiteId': !exists(json, 'WebsiteId') ? undefined : json['WebsiteId'],
        'websiteName': !exists(json, 'WebsiteName') ? undefined : json['WebsiteName'],
        'overallLatestVersion': !exists(json, 'OverallLatestVersion') ? undefined : json['OverallLatestVersion'],
    };
}

export function TechnologyApiModelToJSON(value?: TechnologyApiModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Category': value.category,
        'DisplayName': value.displayName,
        'EndOfLife': value.endOfLife,
        'Id': value.id,
        'IdentifiedVersion': value.identifiedVersion,
        'IsNotificationDisabled': value.isNotificationDisabled,
        'IsOutofDate': value.isOutofDate,
        'IssueCriticalCount': value.issueCriticalCount,
        'IssueHighCount': value.issueHighCount,
        'IssueInfoCount': value.issueInfoCount,
        'IssueLowCount': value.issueLowCount,
        'IssueMediumCount': value.issueMediumCount,
        'LastSeenDate': value.lastSeenDate,
        'LatestVersion': value.latestVersion,
        'Name': value.name,
        'ScanTaskId': value.scanTaskId,
        'WebsiteId': value.websiteId,
        'WebsiteName': value.websiteName,
        'OverallLatestVersion': value.overallLatestVersion,
    };
}

