/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UrlRewriteRuleModel } from './UrlRewriteRuleModel';
import {
    UrlRewriteRuleModelFromJSON,
    UrlRewriteRuleModelFromJSONTyped,
    UrlRewriteRuleModelToJSON,
} from './UrlRewriteRuleModel';
import type { PciScanTaskViewModel } from './PciScanTaskViewModel';
import {
    PciScanTaskViewModelFromJSON,
    PciScanTaskViewModelFromJSONTyped,
    PciScanTaskViewModelToJSON,
} from './PciScanTaskViewModel';
import type { VcsCommitInfo } from './VcsCommitInfo';
import {
    VcsCommitInfoFromJSON,
    VcsCommitInfoFromJSONTyped,
    VcsCommitInfoToJSON,
} from './VcsCommitInfo';
import type { BusinessLogicRecorderSettingModel } from './BusinessLogicRecorderSettingModel';
import {
    BusinessLogicRecorderSettingModelFromJSON,
    BusinessLogicRecorderSettingModelFromJSONTyped,
    BusinessLogicRecorderSettingModelToJSON,
} from './BusinessLogicRecorderSettingModel';
import type { ReducedScanTaskProfile } from './ReducedScanTaskProfile';
import {
    ReducedScanTaskProfileFromJSON,
    ReducedScanTaskProfileFromJSONTyped,
    ReducedScanTaskProfileToJSON,
} from './ReducedScanTaskProfile';
import type { AdditionalWebsiteModel } from './AdditionalWebsiteModel';
import {
    AdditionalWebsiteModelFromJSON,
    AdditionalWebsiteModelFromJSONTyped,
    AdditionalWebsiteModelToJSON,
} from './AdditionalWebsiteModel';
import type { ScanTimeWindowModel } from './ScanTimeWindowModel';
import {
    ScanTimeWindowModelFromJSON,
    ScanTimeWindowModelFromJSONTyped,
    ScanTimeWindowModelToJSON,
} from './ScanTimeWindowModel';
import type { UrlRewriteExcludedPathModel } from './UrlRewriteExcludedPathModel';
import {
    UrlRewriteExcludedPathModelFromJSON,
    UrlRewriteExcludedPathModelFromJSONTyped,
    UrlRewriteExcludedPathModelToJSON,
} from './UrlRewriteExcludedPathModel';

/**
 * Represents a model for carrying {Invicti.Enterprise.Scans.ScanTask} content.
 * @export
 * @interface ScanTaskModel
 */
export interface ScanTaskModel {
    /**
     * Gets or sets the additional websites to scan.
     * @type {Array<AdditionalWebsiteModel>}
     * @memberof ScanTaskModel
     */
    additionalWebsites?: Array<AdditionalWebsiteModel>;
    /**
     * Gets or sets the agent id.
     * @type {string}
     * @memberof ScanTaskModel
     */
    agentId?: string;
    /**
     * Gets or sets the agent name.
     * @type {string}
     * @memberof ScanTaskModel
     */
    agentName?: string;
    /**
     * Gets or sets the cookies.
     * @type {string}
     * @memberof ScanTaskModel
     */
    cookies?: string;
    /**
     * Gets or sets a value indicating whether parallel attacker is enabled.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    crawlAndAttack?: boolean;
    /**
     * Gets or sets deleted date.
     * @type {Date}
     * @memberof ScanTaskModel
     */
    deletedOn?: Date;
    /**
     * Gets or sets a value indicating whether Heuristic URL Rewrite support is enabled together with custom URL Rewrite
     * support.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    enableHeuristicChecksInCustomUrlRewrite?: boolean;
    /**
     * Gets or sets the excluded links.
     * @type {string}
     * @memberof ScanTaskModel
     */
    excludedLinks?: string;
    /**
     * Gets or sets a value indicating whether links should be excluded/included.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    excludeLinks?: boolean;
    /**
     * Gets or sets the disallowed HTTP methods.
     * @type {string}
     * @memberof ScanTaskModel
     */
    disallowedHttpMethods?: string;
    /**
     * Gets or sets a value indicating whether automatic crawling is enabled.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    findAndFollowNewLinks?: boolean;
    /**
     * Gets or sets the imported links.
     * @type {string}
     * @memberof ScanTaskModel
     */
    importedLinks?: string;
    /**
     * Gets or sets the all imported links which might be added via manually or via importing a file.
     * This property is used for status/reports pages.
     * @type {string}
     * @memberof ScanTaskModel
     */
    allImportedLinks?: string;
    /**
     * Gets the desktop scan identifier.
     * @type {string}
     * @memberof ScanTaskModel
     */
    desktopScanId?: string;
    /**
     * Gets or sets initiated date in user's preferred format.
     * @type {string}
     * @memberof ScanTaskModel
     */
    initiatedTime?: string;
    /**
     * Gets or sets the initiated date in user's preferred format.
     * @type {string}
     * @memberof ScanTaskModel
     */
    initiatedDate?: string;
    /**
     * Gets or sets the initiated date.
     * @type {Date}
     * @memberof ScanTaskModel
     */
    initiatedAt?: Date;
    /**
     * Gets or sets the root path maximum dynamic signatures for heuristic URL Rewrite detection.
     * @type {number}
     * @memberof ScanTaskModel
     */
    maxDynamicSignatures?: number;
    /**
     * Gets or sets the maximum duration of the scan in hours.
     * @type {number}
     * @memberof ScanTaskModel
     */
    maxScanDuration?: number;
    /**
     * Gets or sets the duration
     * @type {string}
     * @memberof ScanTaskModel
     */
    duration?: string;
    /**
     * Gets or sets the description of the policy.
     * @type {string}
     * @memberof ScanTaskModel
     */
    policyDescription?: string;
    /**
     * Gets or sets the foreign key reference to the related Policy instance.
     * @type {string}
     * @memberof ScanTaskModel
     */
    policyId?: string;
    /**
     * Gets or sets the foreign key reference to the related Policy User instance.
     * @type {string}
     * @memberof ScanTaskModel
     */
    policyUserId?: string;
    /**
     * Gets or sets the foreign key reference to the related Policy IsDefault instance.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    policyIsDefault?: boolean;
    /**
     * Gets or sets the foreign key reference to the related Policy IsShared instance.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    policyIsShared?: boolean;
    /**
     * Gets or sets the name of the policy.
     * @type {string}
     * @memberof ScanTaskModel
     */
    policyName?: string;
    /**
     * Gets or sets the foreign key reference to the related Authentication Profile instance.
     * @type {string}
     * @memberof ScanTaskModel
     */
    authenticationProfileId?: string;
    /**
     * Gets or sets the the authentication profile option.
     * @type {string}
     * @memberof ScanTaskModel
     */
    authenticationProfileOption?: ScanTaskModelAuthenticationProfileOptionEnum;
    /**
     * Gets or sets the description of the report policy.
     * @type {string}
     * @memberof ScanTaskModel
     */
    reportPolicyDescription?: string;
    /**
     * Gets or sets the foreign key reference to the related {Invicti.Enterprise.Reporting.ReportPolicySetting} instance.
     * @type {string}
     * @memberof ScanTaskModel
     */
    reportPolicyId?: string;
    /**
     * Gets or sets the foreign key reference to the related {Invicti.Enterprise.Reporting.ReportPolicySetting} User instance.
     * @type {string}
     * @memberof ScanTaskModel
     */
    reportPolicyUserId?: string;
    /**
     * Gets or sets the foreign key reference to the related {Invicti.Enterprise.Reporting.ReportPolicySetting} IsDefault instance.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    reportPolicyIsDefault?: boolean;
    /**
     * Gets or sets the foreign key reference to the related {Invicti.Enterprise.Reporting.ReportPolicySetting} IsDefault instance.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    reportPolicyIsShared?: boolean;
    /**
     * Gets or sets the name of the report policy.
     * @type {string}
     * @memberof ScanTaskModel
     */
    reportPolicyName?: string;
    /**
     * Gets or sets the scan scope.
     * @type {string}
     * @memberof ScanTaskModel
     */
    scope?: ScanTaskModelScopeEnum;
    /**
     * Gets or sets the sub path maximum dynamic signatures for heuristic URL Rewrite detection.
     * @type {number}
     * @memberof ScanTaskModel
     */
    subPathMaxDynamicSignatures?: number;
    /**
     * Gets or sets target path.
     * @type {string}
     * @memberof ScanTaskModel
     */
    targetPath?: string;
    /**
     * Gets or sets TargetUrl.
     * @type {string}
     * @memberof ScanTaskModel
     */
    targetUrl?: string;
    /**
     * Gets or sets the target URL root.
     * @type {string}
     * @memberof ScanTaskModel
     */
    targetUrlRoot?: string;
    /**
     * 
     * @type {ScanTimeWindowModel}
     * @memberof ScanTaskModel
     */
    timeWindow?: ScanTimeWindowModel;
    /**
     * Gets or sets the total vulnerability count without information vulnerabilities.
     * @type {number}
     * @memberof ScanTaskModel
     */
    totalVulnerabilityCount?: number;
    /**
     * Gets or sets the extensions that will be analyzed for heuristic URL Rewrite detection.
     * @type {string}
     * @memberof ScanTaskModel
     */
    urlRewriteAnalyzableExtensions?: string;
    /**
     * Gets or sets the block separators for heuristic URL Rewrite detection.
     * @type {string}
     * @memberof ScanTaskModel
     */
    urlRewriteBlockSeparators?: string;
    /**
     * Gets or sets the URL Rewrite mode.
     * @type {string}
     * @memberof ScanTaskModel
     */
    urlRewriteMode?: ScanTaskModelUrlRewriteModeEnum;
    /**
     * Gets or sets the URL Rewrite rules.
     * @type {Array<UrlRewriteRuleModel>}
     * @memberof ScanTaskModel
     */
    urlRewriteRules?: Array<UrlRewriteRuleModel>;
    /**
     * Gets or sets the URL rewrite excluded links.
     * @type {Array<UrlRewriteExcludedPathModel>}
     * @memberof ScanTaskModel
     */
    urlRewriteExcludedLinks?: Array<UrlRewriteExcludedPathModel>;
    /**
     * Gets or sets the user identifier.
     * @type {string}
     * @memberof ScanTaskModel
     */
    userId?: string;
    /**
     * 
     * @type {VcsCommitInfo}
     * @memberof ScanTaskModel
     */
    vcsCommitInfo?: VcsCommitInfo;
    /**
     * Gets or sets the name of the website.
     * @type {string}
     * @memberof ScanTaskModel
     */
    websiteName?: string;
    /**
     * Gets or sets the website URL.
     * @type {string}
     * @memberof ScanTaskModel
     */
    websiteUrl?: string;
    /**
     * Gets or sets the description of the website.
     * @type {string}
     * @memberof ScanTaskModel
     */
    websiteDescription?: string;
    /**
     * Gets or sets the description of the website protocol.
     * @type {string}
     * @memberof ScanTaskModel
     */
    websiteProtocol?: ScanTaskModelWebsiteProtocolEnum;
    /**
     * Determines whether if the website is deleted.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    websiteIsDeleted?: boolean;
    /**
     * gets or sets is latest completed full scan task of website
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    isWebsiteLatestCompletedFullScanTask?: boolean;
    /**
     * Gets or sets the pci scan task is enabled.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    enablePciScanTask?: boolean;
    /**
     * 
     * @type {PciScanTaskViewModel}
     * @memberof ScanTaskModel
     */
    pciScanTask?: PciScanTaskViewModel;
    /**
     * Gets or sets the user's name.
     * @type {string}
     * @memberof ScanTaskModel
     */
    userName?: string;
    /**
     * Determines whether if the scan task model has initiated queued scan.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    queuedScanTaskExist?: boolean;
    /**
     * Gets or sets the scan task profile id
     * @type {string}
     * @memberof ScanTaskModel
     */
    scanTaskProfileId?: string;
    /**
     * 
     * @type {ReducedScanTaskProfile}
     * @memberof ScanTaskModel
     */
    scanTaskProfile?: ReducedScanTaskProfile;
    /**
     * The group ids of website in it
     * @type {Array<string>}
     * @memberof ScanTaskModel
     */
    websiteGroupIds?: Array<string>;
    /**
     * Gets or sets the scan task launch setting comments
     * @type {string}
     * @memberof ScanTaskModel
     */
    comments?: string;
    /**
     * 
     * @type {BusinessLogicRecorderSettingModel}
     * @memberof ScanTaskModel
     */
    businessLogicRecorderSetting?: BusinessLogicRecorderSettingModel;
    /**
     * Gets or sets the scan task launch setting comments
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    scanProfileChanged?: boolean;
    /**
     * Gets or sets the number of steps (HTTP requests) completed thus far.
     * @type {number}
     * @memberof ScanTaskModel
     */
    completedSteps?: number;
    /**
     * Gets or sets the estimated launch time in minutes for queued scans.
     * @type {number}
     * @memberof ScanTaskModel
     */
    estimatedLaunchTime?: number;
    /**
     * Gets or sets the estimated total number of steps (HTTP requests) that this scan will undertake.
     * @type {number}
     * @memberof ScanTaskModel
     */
    estimatedSteps?: number;
    /**
     * Gets or sets FailureReason
     * @type {string}
     * @memberof ScanTaskModel
     */
    failureReason?: ScanTaskModelFailureReasonEnum;
    /**
     * Gets the failure reason description.
     * @type {string}
     * @memberof ScanTaskModel
     */
    failureReasonDescription?: string;
    /**
     * Gets the failure reason string.
     * @type {string}
     * @memberof ScanTaskModel
     */
    readonly failureReasonString?: string;
    /**
     * Gets or sets the global threat level.
     * @type {string}
     * @memberof ScanTaskModel
     */
    globalThreatLevel?: ScanTaskModelGlobalThreatLevelEnum;
    /**
     * Gets the global vulnerability critical count.
     * @type {number}
     * @memberof ScanTaskModel
     */
    globalVulnerabilityCriticalCount?: number;
    /**
     * Gets the global vulnerability high count.
     * @type {number}
     * @memberof ScanTaskModel
     */
    globalVulnerabilityHighCount?: number;
    /**
     * Gets the global vulnerability information count.
     * @type {number}
     * @memberof ScanTaskModel
     */
    globalVulnerabilityInfoCount?: number;
    /**
     * Gets the global vulnerability information count.
     * @type {number}
     * @memberof ScanTaskModel
     */
    globalVulnerabilityBestPracticeCount?: number;
    /**
     * Gets the global vulnerability low count.
     * @type {number}
     * @memberof ScanTaskModel
     */
    globalVulnerabilityLowCount?: number;
    /**
     * Gets the global vulnerability medium count.
     * @type {number}
     * @memberof ScanTaskModel
     */
    globalVulnerabilityMediumCount?: number;
    /**
     * Gets or sets Id.
     * @type {string}
     * @memberof ScanTaskModel
     */
    id?: string;
    /**
     * Gets a value indicating whether scan is completed  with any state.
     * @type {boolean}
     * @memberof ScanTaskModel
     */
    readonly isCompleted?: boolean;
    /**
     * Gets the completed percentage.
     * @type {number}
     * @memberof ScanTaskModel
     */
    readonly percentage?: number;
    /**
     * Gets or sets the Phase.
     * @type {string}
     * @memberof ScanTaskModel
     */
    phase?: ScanTaskModelPhaseEnum;
    /**
     * Gets or sets the scan group identifier.
     * @type {string}
     * @memberof ScanTaskModel
     */
    scanTaskGroupId?: string;
    /**
     * Gets or sets the type of the scan.
     * @type {string}
     * @memberof ScanTaskModel
     */
    scanType?: ScanTaskModelScanTypeEnum;
    /**
     * Gets or sets the scheduled scan identifier.
     * @type {string}
     * @memberof ScanTaskModel
     */
    scheduledScanId?: string;
    /**
     * Gets or sets State.
     * @type {string}
     * @memberof ScanTaskModel
     */
    state?: ScanTaskModelStateEnum;
    /**
     * Gets or sets the date and time at which this task state was last changed.
     * @type {Date}
     * @memberof ScanTaskModel
     */
    stateChanged?: Date;
    /**
     * Gets or sets the threat level.
     * @type {string}
     * @memberof ScanTaskModel
     */
    threatLevel?: ScanTaskModelThreatLevelEnum;
    /**
     * Gets or sets the count of vulnerabilities with critical level severity.
     * @type {number}
     * @memberof ScanTaskModel
     */
    vulnerabilityCriticalCount?: number;
    /**
     * Gets or sets the count of vulnerabilities with high level severity.
     * @type {number}
     * @memberof ScanTaskModel
     */
    vulnerabilityHighCount?: number;
    /**
     * Gets or sets the count of vulnerabilities with information level severity.
     * @type {number}
     * @memberof ScanTaskModel
     */
    vulnerabilityInfoCount?: number;
    /**
     * Gets or sets the count of vulnerabilities with best practice level severity.
     * @type {number}
     * @memberof ScanTaskModel
     */
    vulnerabilityBestPracticeCount?: number;
    /**
     * Gets or sets the count of vulnerabilities with low level severity.
     * @type {number}
     * @memberof ScanTaskModel
     */
    vulnerabilityLowCount?: number;
    /**
     * Gets or sets the count of vulnerabilities with medium level severity.
     * @type {number}
     * @memberof ScanTaskModel
     */
    vulnerabilityMediumCount?: number;
    /**
     * Gets the website identifier.
     * @type {string}
     * @memberof ScanTaskModel
     */
    websiteId?: string;
    /**
     * Date and time at which this task was initiated.
     * @type {Date}
     * @memberof ScanTaskModel
     */
    initiated?: Date;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScanTaskModel
     */
    tags?: Array<string>;
}


/**
 * @export
 */
export const ScanTaskModelAuthenticationProfileOptionEnum = {
    DontUse: 'DontUse',
    UseMatchedProfile: 'UseMatchedProfile',
    SelectedProfile: 'SelectedProfile'
} as const;
export type ScanTaskModelAuthenticationProfileOptionEnum = typeof ScanTaskModelAuthenticationProfileOptionEnum[keyof typeof ScanTaskModelAuthenticationProfileOptionEnum];

/**
 * @export
 */
export const ScanTaskModelScopeEnum = {
    EnteredPathAndBelow: 'EnteredPathAndBelow',
    OnlyEnteredUrl: 'OnlyEnteredUrl',
    WholeDomain: 'WholeDomain'
} as const;
export type ScanTaskModelScopeEnum = typeof ScanTaskModelScopeEnum[keyof typeof ScanTaskModelScopeEnum];

/**
 * @export
 */
export const ScanTaskModelUrlRewriteModeEnum = {
    None: 'None',
    Heuristic: 'Heuristic',
    Custom: 'Custom'
} as const;
export type ScanTaskModelUrlRewriteModeEnum = typeof ScanTaskModelUrlRewriteModeEnum[keyof typeof ScanTaskModelUrlRewriteModeEnum];

/**
 * @export
 */
export const ScanTaskModelWebsiteProtocolEnum = {
    Http: 'Http',
    Https: 'Https'
} as const;
export type ScanTaskModelWebsiteProtocolEnum = typeof ScanTaskModelWebsiteProtocolEnum[keyof typeof ScanTaskModelWebsiteProtocolEnum];

/**
 * @export
 */
export const ScanTaskModelFailureReasonEnum = {
    None: 'None',
    Request: 'Request',
    HeadRequest: 'HeadRequest',
    RedirectDetected: 'RedirectDetected',
    TimeoutDetected: 'TimeoutDetected',
    MaxLogoutExceeded: 'MaxLogoutExceeded',
    RequestFailed: 'RequestFailed',
    Response: 'Response',
    CrawlerRequest: 'CrawlerRequest',
    AttackerRequest: 'AttackerRequest',
    ReCrawlerRequest: 'ReCrawlerRequest',
    Finished: 'Finished',
    LinkNotFound: 'LinkNotFound',
    RecalculateAttackPossibilities: 'RecalculateAttackPossibilities',
    PhaseCrawlStarted: 'PhaseCrawlStarted',
    PhaseAttackStarted: 'PhaseAttackStarted',
    PhaseReCrawlStarted: 'PhaseReCrawlStarted',
    CrawlerPossibility: 'CrawlerPossibility',
    ReCrawlerPossibilities: 'ReCrawlerPossibilities',
    HostUnavailable: 'HostUnavailable',
    NameResolutionFailure: 'NameResolutionFailure',
    ProxyFailure: 'ProxyFailure',
    OutOfDiskSpace: 'OutOfDiskSpace',
    ProxyAuthenticationRequired: 'ProxyAuthenticationRequired',
    OAuth2EndpointError: 'OAuth2EndpointError',
    TargetLinkTimeoutDetected: 'TargetLinkTimeoutDetected',
    LoginFailed: 'LoginFailed',
    ScanTargetNotReachable: 'ScanTargetNotReachable',
    ScanPolicyNotFound: 'ScanPolicyNotFound',
    ReportPolicyNotFound: 'ReportPolicyNotFound',
    SecurityProtocolTypeNotSupported: 'SecurityProtocolTypeNotSupported',
    UnableToLoadScanSession: 'UnableToLoadScanSession',
    AgentNotAvailable: 'AgentNotAvailable',
    ScanNotAllowed: 'ScanNotAllowed',
    UnableToFindAutoSaveNdb: 'UnableToFindAutoSaveNdb',
    ErrorOccurredOnScanFailed: 'ErrorOccurredOnScanFailed',
    ErrorOccurredOnPause: 'ErrorOccurredOnPause',
    ErrorOccurredOnCancel: 'ErrorOccurredOnCancel',
    ErrorOccurredOnScanCompleted: 'ErrorOccurredOnScanCompleted',
    SevenZipNotFoundOrInstalled: 'SevenZipNotFoundOrInstalled',
    ErrorOccurredOnLaunchScan: 'ErrorOccurredOnLaunchScan',
    InvalidHeader: 'InvalidHeader',
    ErrorOccurredOnPreScanValidation: 'ErrorOccurredOnPreScanValidation',
    RawScanFileExpired: 'RawScanFileExpired',
    SecretsAndEncryptionIntegration: 'SecretsAndEncryptionIntegration',
    ArchiveMethodUnavailable: 'ArchiveMethodUnavailable'
} as const;
export type ScanTaskModelFailureReasonEnum = typeof ScanTaskModelFailureReasonEnum[keyof typeof ScanTaskModelFailureReasonEnum];

/**
 * @export
 */
export const ScanTaskModelGlobalThreatLevelEnum = {
    Unknown: 'Unknown',
    Secure: 'Secure',
    NeedsAttention: 'NeedsAttention',
    Insecure: 'Insecure',
    Critical: 'Critical'
} as const;
export type ScanTaskModelGlobalThreatLevelEnum = typeof ScanTaskModelGlobalThreatLevelEnum[keyof typeof ScanTaskModelGlobalThreatLevelEnum];

/**
 * @export
 */
export const ScanTaskModelPhaseEnum = {
    Pending: 'Pending',
    Crawling: 'Crawling',
    CrawlingAndAttacking: 'CrawlingAndAttacking',
    Attacking: 'Attacking',
    ReCrawling: 'ReCrawling',
    Complete: 'Complete'
} as const;
export type ScanTaskModelPhaseEnum = typeof ScanTaskModelPhaseEnum[keyof typeof ScanTaskModelPhaseEnum];

/**
 * @export
 */
export const ScanTaskModelScanTypeEnum = {
    Full: 'Full',
    Retest: 'Retest',
    Incremental: 'Incremental'
} as const;
export type ScanTaskModelScanTypeEnum = typeof ScanTaskModelScanTypeEnum[keyof typeof ScanTaskModelScanTypeEnum];

/**
 * @export
 */
export const ScanTaskModelStateEnum = {
    Queued: 'Queued',
    Scanning: 'Scanning',
    Archiving: 'Archiving',
    Complete: 'Complete',
    Failed: 'Failed',
    Cancelled: 'Cancelled',
    Delayed: 'Delayed',
    Pausing: 'Pausing',
    Paused: 'Paused',
    Resuming: 'Resuming',
    AsyncArchiving: 'AsyncArchiving'
} as const;
export type ScanTaskModelStateEnum = typeof ScanTaskModelStateEnum[keyof typeof ScanTaskModelStateEnum];

/**
 * @export
 */
export const ScanTaskModelThreatLevelEnum = {
    Unknown: 'Unknown',
    Secure: 'Secure',
    NeedsAttention: 'NeedsAttention',
    Insecure: 'Insecure',
    Critical: 'Critical'
} as const;
export type ScanTaskModelThreatLevelEnum = typeof ScanTaskModelThreatLevelEnum[keyof typeof ScanTaskModelThreatLevelEnum];


/**
 * Check if a given object implements the ScanTaskModel interface.
 */
export function instanceOfScanTaskModel(value: object): boolean {
    return true;
}

export function ScanTaskModelFromJSON(json: any): ScanTaskModel {
    return ScanTaskModelFromJSONTyped(json, false);
}

export function ScanTaskModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScanTaskModel {
    if (json == null) {
        return json;
    }
    return {
        
        'additionalWebsites': json['AdditionalWebsites'] == null ? undefined : ((json['AdditionalWebsites'] as Array<any>).map(AdditionalWebsiteModelFromJSON)),
        'agentId': json['AgentId'] == null ? undefined : json['AgentId'],
        'agentName': json['AgentName'] == null ? undefined : json['AgentName'],
        'cookies': json['Cookies'] == null ? undefined : json['Cookies'],
        'crawlAndAttack': json['CrawlAndAttack'] == null ? undefined : json['CrawlAndAttack'],
        'deletedOn': json['DeletedOn'] == null ? undefined : (new Date(json['DeletedOn'])),
        'enableHeuristicChecksInCustomUrlRewrite': json['EnableHeuristicChecksInCustomUrlRewrite'] == null ? undefined : json['EnableHeuristicChecksInCustomUrlRewrite'],
        'excludedLinks': json['ExcludedLinks'] == null ? undefined : json['ExcludedLinks'],
        'excludeLinks': json['ExcludeLinks'] == null ? undefined : json['ExcludeLinks'],
        'disallowedHttpMethods': json['DisallowedHttpMethods'] == null ? undefined : json['DisallowedHttpMethods'],
        'findAndFollowNewLinks': json['FindAndFollowNewLinks'] == null ? undefined : json['FindAndFollowNewLinks'],
        'importedLinks': json['ImportedLinks'] == null ? undefined : json['ImportedLinks'],
        'allImportedLinks': json['AllImportedLinks'] == null ? undefined : json['AllImportedLinks'],
        'desktopScanId': json['DesktopScanId'] == null ? undefined : json['DesktopScanId'],
        'initiatedTime': json['InitiatedTime'] == null ? undefined : json['InitiatedTime'],
        'initiatedDate': json['InitiatedDate'] == null ? undefined : json['InitiatedDate'],
        'initiatedAt': json['InitiatedAt'] == null ? undefined : (new Date(json['InitiatedAt'])),
        'maxDynamicSignatures': json['MaxDynamicSignatures'] == null ? undefined : json['MaxDynamicSignatures'],
        'maxScanDuration': json['MaxScanDuration'] == null ? undefined : json['MaxScanDuration'],
        'duration': json['Duration'] == null ? undefined : json['Duration'],
        'policyDescription': json['PolicyDescription'] == null ? undefined : json['PolicyDescription'],
        'policyId': json['PolicyId'] == null ? undefined : json['PolicyId'],
        'policyUserId': json['PolicyUserId'] == null ? undefined : json['PolicyUserId'],
        'policyIsDefault': json['PolicyIsDefault'] == null ? undefined : json['PolicyIsDefault'],
        'policyIsShared': json['PolicyIsShared'] == null ? undefined : json['PolicyIsShared'],
        'policyName': json['PolicyName'] == null ? undefined : json['PolicyName'],
        'authenticationProfileId': json['AuthenticationProfileId'] == null ? undefined : json['AuthenticationProfileId'],
        'authenticationProfileOption': json['AuthenticationProfileOption'] == null ? undefined : json['AuthenticationProfileOption'],
        'reportPolicyDescription': json['ReportPolicyDescription'] == null ? undefined : json['ReportPolicyDescription'],
        'reportPolicyId': json['ReportPolicyId'] == null ? undefined : json['ReportPolicyId'],
        'reportPolicyUserId': json['ReportPolicyUserId'] == null ? undefined : json['ReportPolicyUserId'],
        'reportPolicyIsDefault': json['ReportPolicyIsDefault'] == null ? undefined : json['ReportPolicyIsDefault'],
        'reportPolicyIsShared': json['ReportPolicyIsShared'] == null ? undefined : json['ReportPolicyIsShared'],
        'reportPolicyName': json['ReportPolicyName'] == null ? undefined : json['ReportPolicyName'],
        'scope': json['Scope'] == null ? undefined : json['Scope'],
        'subPathMaxDynamicSignatures': json['SubPathMaxDynamicSignatures'] == null ? undefined : json['SubPathMaxDynamicSignatures'],
        'targetPath': json['TargetPath'] == null ? undefined : json['TargetPath'],
        'targetUrl': json['TargetUrl'] == null ? undefined : json['TargetUrl'],
        'targetUrlRoot': json['TargetUrlRoot'] == null ? undefined : json['TargetUrlRoot'],
        'timeWindow': json['TimeWindow'] == null ? undefined : ScanTimeWindowModelFromJSON(json['TimeWindow']),
        'totalVulnerabilityCount': json['TotalVulnerabilityCount'] == null ? undefined : json['TotalVulnerabilityCount'],
        'urlRewriteAnalyzableExtensions': json['UrlRewriteAnalyzableExtensions'] == null ? undefined : json['UrlRewriteAnalyzableExtensions'],
        'urlRewriteBlockSeparators': json['UrlRewriteBlockSeparators'] == null ? undefined : json['UrlRewriteBlockSeparators'],
        'urlRewriteMode': json['UrlRewriteMode'] == null ? undefined : json['UrlRewriteMode'],
        'urlRewriteRules': json['UrlRewriteRules'] == null ? undefined : ((json['UrlRewriteRules'] as Array<any>).map(UrlRewriteRuleModelFromJSON)),
        'urlRewriteExcludedLinks': json['UrlRewriteExcludedLinks'] == null ? undefined : ((json['UrlRewriteExcludedLinks'] as Array<any>).map(UrlRewriteExcludedPathModelFromJSON)),
        'userId': json['UserId'] == null ? undefined : json['UserId'],
        'vcsCommitInfo': json['VcsCommitInfo'] == null ? undefined : VcsCommitInfoFromJSON(json['VcsCommitInfo']),
        'websiteName': json['WebsiteName'] == null ? undefined : json['WebsiteName'],
        'websiteUrl': json['WebsiteUrl'] == null ? undefined : json['WebsiteUrl'],
        'websiteDescription': json['WebsiteDescription'] == null ? undefined : json['WebsiteDescription'],
        'websiteProtocol': json['WebsiteProtocol'] == null ? undefined : json['WebsiteProtocol'],
        'websiteIsDeleted': json['WebsiteIsDeleted'] == null ? undefined : json['WebsiteIsDeleted'],
        'isWebsiteLatestCompletedFullScanTask': json['IsWebsiteLatestCompletedFullScanTask'] == null ? undefined : json['IsWebsiteLatestCompletedFullScanTask'],
        'enablePciScanTask': json['EnablePciScanTask'] == null ? undefined : json['EnablePciScanTask'],
        'pciScanTask': json['PciScanTask'] == null ? undefined : PciScanTaskViewModelFromJSON(json['PciScanTask']),
        'userName': json['UserName'] == null ? undefined : json['UserName'],
        'queuedScanTaskExist': json['QueuedScanTaskExist'] == null ? undefined : json['QueuedScanTaskExist'],
        'scanTaskProfileId': json['ScanTaskProfileId'] == null ? undefined : json['ScanTaskProfileId'],
        'scanTaskProfile': json['ScanTaskProfile'] == null ? undefined : ReducedScanTaskProfileFromJSON(json['ScanTaskProfile']),
        'websiteGroupIds': json['WebsiteGroupIds'] == null ? undefined : json['WebsiteGroupIds'],
        'comments': json['Comments'] == null ? undefined : json['Comments'],
        'businessLogicRecorderSetting': json['BusinessLogicRecorderSetting'] == null ? undefined : BusinessLogicRecorderSettingModelFromJSON(json['BusinessLogicRecorderSetting']),
        'scanProfileChanged': json['ScanProfileChanged'] == null ? undefined : json['ScanProfileChanged'],
        'completedSteps': json['CompletedSteps'] == null ? undefined : json['CompletedSteps'],
        'estimatedLaunchTime': json['EstimatedLaunchTime'] == null ? undefined : json['EstimatedLaunchTime'],
        'estimatedSteps': json['EstimatedSteps'] == null ? undefined : json['EstimatedSteps'],
        'failureReason': json['FailureReason'] == null ? undefined : json['FailureReason'],
        'failureReasonDescription': json['FailureReasonDescription'] == null ? undefined : json['FailureReasonDescription'],
        'failureReasonString': json['FailureReasonString'] == null ? undefined : json['FailureReasonString'],
        'globalThreatLevel': json['GlobalThreatLevel'] == null ? undefined : json['GlobalThreatLevel'],
        'globalVulnerabilityCriticalCount': json['GlobalVulnerabilityCriticalCount'] == null ? undefined : json['GlobalVulnerabilityCriticalCount'],
        'globalVulnerabilityHighCount': json['GlobalVulnerabilityHighCount'] == null ? undefined : json['GlobalVulnerabilityHighCount'],
        'globalVulnerabilityInfoCount': json['GlobalVulnerabilityInfoCount'] == null ? undefined : json['GlobalVulnerabilityInfoCount'],
        'globalVulnerabilityBestPracticeCount': json['GlobalVulnerabilityBestPracticeCount'] == null ? undefined : json['GlobalVulnerabilityBestPracticeCount'],
        'globalVulnerabilityLowCount': json['GlobalVulnerabilityLowCount'] == null ? undefined : json['GlobalVulnerabilityLowCount'],
        'globalVulnerabilityMediumCount': json['GlobalVulnerabilityMediumCount'] == null ? undefined : json['GlobalVulnerabilityMediumCount'],
        'id': json['Id'] == null ? undefined : json['Id'],
        'isCompleted': json['IsCompleted'] == null ? undefined : json['IsCompleted'],
        'percentage': json['Percentage'] == null ? undefined : json['Percentage'],
        'phase': json['Phase'] == null ? undefined : json['Phase'],
        'scanTaskGroupId': json['ScanTaskGroupId'] == null ? undefined : json['ScanTaskGroupId'],
        'scanType': json['ScanType'] == null ? undefined : json['ScanType'],
        'scheduledScanId': json['ScheduledScanId'] == null ? undefined : json['ScheduledScanId'],
        'state': json['State'] == null ? undefined : json['State'],
        'stateChanged': json['StateChanged'] == null ? undefined : (new Date(json['StateChanged'])),
        'threatLevel': json['ThreatLevel'] == null ? undefined : json['ThreatLevel'],
        'vulnerabilityCriticalCount': json['VulnerabilityCriticalCount'] == null ? undefined : json['VulnerabilityCriticalCount'],
        'vulnerabilityHighCount': json['VulnerabilityHighCount'] == null ? undefined : json['VulnerabilityHighCount'],
        'vulnerabilityInfoCount': json['VulnerabilityInfoCount'] == null ? undefined : json['VulnerabilityInfoCount'],
        'vulnerabilityBestPracticeCount': json['VulnerabilityBestPracticeCount'] == null ? undefined : json['VulnerabilityBestPracticeCount'],
        'vulnerabilityLowCount': json['VulnerabilityLowCount'] == null ? undefined : json['VulnerabilityLowCount'],
        'vulnerabilityMediumCount': json['VulnerabilityMediumCount'] == null ? undefined : json['VulnerabilityMediumCount'],
        'websiteId': json['WebsiteId'] == null ? undefined : json['WebsiteId'],
        'initiated': json['Initiated'] == null ? undefined : (new Date(json['Initiated'])),
        'tags': json['Tags'] == null ? undefined : json['Tags'],
    };
}

export function ScanTaskModelToJSON(value?: Omit<ScanTaskModel, 'FailureReasonString'|'IsCompleted'|'Percentage'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'AdditionalWebsites': value['additionalWebsites'] == null ? undefined : ((value['additionalWebsites'] as Array<any>).map(AdditionalWebsiteModelToJSON)),
        'AgentId': value['agentId'],
        'AgentName': value['agentName'],
        'Cookies': value['cookies'],
        'CrawlAndAttack': value['crawlAndAttack'],
        'DeletedOn': value['deletedOn'] == null ? undefined : ((value['deletedOn']).toISOString()),
        'EnableHeuristicChecksInCustomUrlRewrite': value['enableHeuristicChecksInCustomUrlRewrite'],
        'ExcludedLinks': value['excludedLinks'],
        'ExcludeLinks': value['excludeLinks'],
        'DisallowedHttpMethods': value['disallowedHttpMethods'],
        'FindAndFollowNewLinks': value['findAndFollowNewLinks'],
        'ImportedLinks': value['importedLinks'],
        'AllImportedLinks': value['allImportedLinks'],
        'DesktopScanId': value['desktopScanId'],
        'InitiatedTime': value['initiatedTime'],
        'InitiatedDate': value['initiatedDate'],
        'InitiatedAt': value['initiatedAt'] == null ? undefined : ((value['initiatedAt']).toISOString()),
        'MaxDynamicSignatures': value['maxDynamicSignatures'],
        'MaxScanDuration': value['maxScanDuration'],
        'Duration': value['duration'],
        'PolicyDescription': value['policyDescription'],
        'PolicyId': value['policyId'],
        'PolicyUserId': value['policyUserId'],
        'PolicyIsDefault': value['policyIsDefault'],
        'PolicyIsShared': value['policyIsShared'],
        'PolicyName': value['policyName'],
        'AuthenticationProfileId': value['authenticationProfileId'],
        'AuthenticationProfileOption': value['authenticationProfileOption'],
        'ReportPolicyDescription': value['reportPolicyDescription'],
        'ReportPolicyId': value['reportPolicyId'],
        'ReportPolicyUserId': value['reportPolicyUserId'],
        'ReportPolicyIsDefault': value['reportPolicyIsDefault'],
        'ReportPolicyIsShared': value['reportPolicyIsShared'],
        'ReportPolicyName': value['reportPolicyName'],
        'Scope': value['scope'],
        'SubPathMaxDynamicSignatures': value['subPathMaxDynamicSignatures'],
        'TargetPath': value['targetPath'],
        'TargetUrl': value['targetUrl'],
        'TargetUrlRoot': value['targetUrlRoot'],
        'TimeWindow': ScanTimeWindowModelToJSON(value['timeWindow']),
        'TotalVulnerabilityCount': value['totalVulnerabilityCount'],
        'UrlRewriteAnalyzableExtensions': value['urlRewriteAnalyzableExtensions'],
        'UrlRewriteBlockSeparators': value['urlRewriteBlockSeparators'],
        'UrlRewriteMode': value['urlRewriteMode'],
        'UrlRewriteRules': value['urlRewriteRules'] == null ? undefined : ((value['urlRewriteRules'] as Array<any>).map(UrlRewriteRuleModelToJSON)),
        'UrlRewriteExcludedLinks': value['urlRewriteExcludedLinks'] == null ? undefined : ((value['urlRewriteExcludedLinks'] as Array<any>).map(UrlRewriteExcludedPathModelToJSON)),
        'UserId': value['userId'],
        'VcsCommitInfo': VcsCommitInfoToJSON(value['vcsCommitInfo']),
        'WebsiteName': value['websiteName'],
        'WebsiteUrl': value['websiteUrl'],
        'WebsiteDescription': value['websiteDescription'],
        'WebsiteProtocol': value['websiteProtocol'],
        'WebsiteIsDeleted': value['websiteIsDeleted'],
        'IsWebsiteLatestCompletedFullScanTask': value['isWebsiteLatestCompletedFullScanTask'],
        'EnablePciScanTask': value['enablePciScanTask'],
        'PciScanTask': PciScanTaskViewModelToJSON(value['pciScanTask']),
        'UserName': value['userName'],
        'QueuedScanTaskExist': value['queuedScanTaskExist'],
        'ScanTaskProfileId': value['scanTaskProfileId'],
        'ScanTaskProfile': ReducedScanTaskProfileToJSON(value['scanTaskProfile']),
        'WebsiteGroupIds': value['websiteGroupIds'],
        'Comments': value['comments'],
        'BusinessLogicRecorderSetting': BusinessLogicRecorderSettingModelToJSON(value['businessLogicRecorderSetting']),
        'ScanProfileChanged': value['scanProfileChanged'],
        'CompletedSteps': value['completedSteps'],
        'EstimatedLaunchTime': value['estimatedLaunchTime'],
        'EstimatedSteps': value['estimatedSteps'],
        'FailureReason': value['failureReason'],
        'FailureReasonDescription': value['failureReasonDescription'],
        'GlobalThreatLevel': value['globalThreatLevel'],
        'GlobalVulnerabilityCriticalCount': value['globalVulnerabilityCriticalCount'],
        'GlobalVulnerabilityHighCount': value['globalVulnerabilityHighCount'],
        'GlobalVulnerabilityInfoCount': value['globalVulnerabilityInfoCount'],
        'GlobalVulnerabilityBestPracticeCount': value['globalVulnerabilityBestPracticeCount'],
        'GlobalVulnerabilityLowCount': value['globalVulnerabilityLowCount'],
        'GlobalVulnerabilityMediumCount': value['globalVulnerabilityMediumCount'],
        'Id': value['id'],
        'Phase': value['phase'],
        'ScanTaskGroupId': value['scanTaskGroupId'],
        'ScanType': value['scanType'],
        'ScheduledScanId': value['scheduledScanId'],
        'State': value['state'],
        'StateChanged': value['stateChanged'] == null ? undefined : ((value['stateChanged']).toISOString()),
        'ThreatLevel': value['threatLevel'],
        'VulnerabilityCriticalCount': value['vulnerabilityCriticalCount'],
        'VulnerabilityHighCount': value['vulnerabilityHighCount'],
        'VulnerabilityInfoCount': value['vulnerabilityInfoCount'],
        'VulnerabilityBestPracticeCount': value['vulnerabilityBestPracticeCount'],
        'VulnerabilityLowCount': value['vulnerabilityLowCount'],
        'VulnerabilityMediumCount': value['vulnerabilityMediumCount'],
        'WebsiteId': value['websiteId'],
        'Initiated': value['initiated'] == null ? undefined : ((value['initiated']).toISOString()),
        'Tags': value['tags'],
    };
}

