/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DeleteDiscoveryConnectionModel
 */
export interface DeleteDiscoveryConnectionModel {
    /**
     * Gets or sets the identifier.
     * @type {string}
     * @memberof DeleteDiscoveryConnectionModel
     */
    connectionId: string;
    /**
     * Gets or sets ConnectionType type.
     * @type {string}
     * @memberof DeleteDiscoveryConnectionModel
     */
    type?: DeleteDiscoveryConnectionModelTypeEnum;
}


/**
 * @export
 */
export const DeleteDiscoveryConnectionModelTypeEnum = {
    Aws: 'Aws'
} as const;
export type DeleteDiscoveryConnectionModelTypeEnum = typeof DeleteDiscoveryConnectionModelTypeEnum[keyof typeof DeleteDiscoveryConnectionModelTypeEnum];


/**
 * Check if a given object implements the DeleteDiscoveryConnectionModel interface.
 */
export function instanceOfDeleteDiscoveryConnectionModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "connectionId" in value;

    return isInstance;
}

export function DeleteDiscoveryConnectionModelFromJSON(json: any): DeleteDiscoveryConnectionModel {
    return DeleteDiscoveryConnectionModelFromJSONTyped(json, false);
}

export function DeleteDiscoveryConnectionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeleteDiscoveryConnectionModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'connectionId': json['ConnectionId'],
        'type': !exists(json, 'Type') ? undefined : json['Type'],
    };
}

export function DeleteDiscoveryConnectionModelToJSON(value?: DeleteDiscoveryConnectionModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ConnectionId': value.connectionId,
        'Type': value.type,
    };
}

