/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents a model for carrying out form value settings.
 * @export
 * @interface FormValueSettingModel
 */
export interface FormValueSettingModel {
    /**
     * Gets or sets a value indicating whether force option is enabled.
     * @type {boolean}
     * @memberof FormValueSettingModel
     */
    force?: boolean;
    /**
     * Gets or sets the match type.
     * @type {string}
     * @memberof FormValueSettingModel
     */
    match?: FormValueSettingModelMatchEnum;
    /**
     * Gets or sets the match target.
     * @type {Array<string>}
     * @memberof FormValueSettingModel
     */
    matchTarget?: Array<FormValueSettingModelMatchTargetEnum>;
    /**
     * Gets or sets the match target.
     * @type {string}
     * @memberof FormValueSettingModel
     */
    matchTargetValue: FormValueSettingModelMatchTargetValueEnum;
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof FormValueSettingModel
     */
    name: string;
    /**
     * Gets or sets the pattern.
     * @type {string}
     * @memberof FormValueSettingModel
     */
    pattern?: string;
    /**
     * Gets or sets the type.
     * @type {string}
     * @memberof FormValueSettingModel
     */
    type?: string;
    /**
     * Gets or sets the value.
     * @type {string}
     * @memberof FormValueSettingModel
     */
    value: string;
}

/**
* @export
* @enum {string}
*/
export enum FormValueSettingModelMatchEnum {
    RegEx = 'RegEx',
    Exact = 'Exact',
    Contains = 'Contains',
    Starts = 'Starts',
    Ends = 'Ends'
}
/**
* @export
* @enum {string}
*/
export enum FormValueSettingModelMatchTargetEnum {
    Name = 'Name',
    Label = 'Label',
    Placeholder = 'Placeholder',
    Id = 'Id'
}
/**
* @export
* @enum {string}
*/
export enum FormValueSettingModelMatchTargetValueEnum {
    Name = 'Name',
    Label = 'Label',
    Placeholder = 'Placeholder',
    Id = 'Id'
}


/**
 * Check if a given object implements the FormValueSettingModel interface.
 */
export function instanceOfFormValueSettingModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "matchTargetValue" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "value" in value;

    return isInstance;
}

export function FormValueSettingModelFromJSON(json: any): FormValueSettingModel {
    return FormValueSettingModelFromJSONTyped(json, false);
}

export function FormValueSettingModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormValueSettingModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'force': !exists(json, 'Force') ? undefined : json['Force'],
        'match': !exists(json, 'Match') ? undefined : json['Match'],
        'matchTarget': !exists(json, 'MatchTarget') ? undefined : json['MatchTarget'],
        'matchTargetValue': json['MatchTargetValue'],
        'name': json['Name'],
        'pattern': !exists(json, 'Pattern') ? undefined : json['Pattern'],
        'type': !exists(json, 'Type') ? undefined : json['Type'],
        'value': json['Value'],
    };
}

export function FormValueSettingModelToJSON(value?: FormValueSettingModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Force': value.force,
        'Match': value.match,
        'MatchTarget': value.matchTarget,
        'MatchTargetValue': value.matchTargetValue,
        'Name': value.name,
        'Pattern': value.pattern,
        'Type': value.type,
        'Value': value.value,
    };
}

