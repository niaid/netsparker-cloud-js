/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Settings of user's cyberark vault
 * @export
 * @interface FormAuthenticationCyberArkVaultSetting
 */
export interface FormAuthenticationCyberArkVaultSetting {
    /**
     * Gets or sets the integration id.
     * @type {string}
     * @memberof FormAuthenticationCyberArkVaultSetting
     */
    integrationId?: string;
    /**
     * Gets or sets the username is static or not.
     * @type {boolean}
     * @memberof FormAuthenticationCyberArkVaultSetting
     */
    cyberArkUseStaticUsername?: boolean;
    /**
     * Gets or sets the Static Username.
     * @type {string}
     * @memberof FormAuthenticationCyberArkVaultSetting
     */
    cyberArkStaticUsername?: string;
    /**
     * Gets or sets the Query.
     * @type {string}
     * @memberof FormAuthenticationCyberArkVaultSetting
     */
    cyberArkUserNameQuery?: string;
    /**
     * Gets or sets the Query.
     * @type {string}
     * @memberof FormAuthenticationCyberArkVaultSetting
     */
    cyberArkPasswordQuery?: string;
    /**
     * Gets or sets the Url.
     * @type {string}
     * @memberof FormAuthenticationCyberArkVaultSetting
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof FormAuthenticationCyberArkVaultSetting
     */
    certificateFilePassword?: string;
    /**
     * 
     * @type {string}
     * @memberof FormAuthenticationCyberArkVaultSetting
     */
    certificateFileKey?: string;
    /**
     * Gets or sets website agent mode.
     * @type {string}
     * @memberof FormAuthenticationCyberArkVaultSetting
     */
    agentMode?: FormAuthenticationCyberArkVaultSettingAgentModeEnum;
}

/**
* @export
* @enum {string}
*/
export enum FormAuthenticationCyberArkVaultSettingAgentModeEnum {
    Cloud = 'Cloud',
    Internal = 'Internal'
}


/**
 * Check if a given object implements the FormAuthenticationCyberArkVaultSetting interface.
 */
export function instanceOfFormAuthenticationCyberArkVaultSetting(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FormAuthenticationCyberArkVaultSettingFromJSON(json: any): FormAuthenticationCyberArkVaultSetting {
    return FormAuthenticationCyberArkVaultSettingFromJSONTyped(json, false);
}

export function FormAuthenticationCyberArkVaultSettingFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormAuthenticationCyberArkVaultSetting {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'integrationId': !exists(json, 'IntegrationId') ? undefined : json['IntegrationId'],
        'cyberArkUseStaticUsername': !exists(json, 'CyberArkUseStaticUsername') ? undefined : json['CyberArkUseStaticUsername'],
        'cyberArkStaticUsername': !exists(json, 'CyberArkStaticUsername') ? undefined : json['CyberArkStaticUsername'],
        'cyberArkUserNameQuery': !exists(json, 'CyberArkUserNameQuery') ? undefined : json['CyberArkUserNameQuery'],
        'cyberArkPasswordQuery': !exists(json, 'CyberArkPasswordQuery') ? undefined : json['CyberArkPasswordQuery'],
        'url': !exists(json, 'Url') ? undefined : json['Url'],
        'certificateFilePassword': !exists(json, 'CertificateFilePassword') ? undefined : json['CertificateFilePassword'],
        'certificateFileKey': !exists(json, 'CertificateFileKey') ? undefined : json['CertificateFileKey'],
        'agentMode': !exists(json, 'AgentMode') ? undefined : json['AgentMode'],
    };
}

export function FormAuthenticationCyberArkVaultSettingToJSON(value?: FormAuthenticationCyberArkVaultSetting | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'IntegrationId': value.integrationId,
        'CyberArkUseStaticUsername': value.cyberArkUseStaticUsername,
        'CyberArkStaticUsername': value.cyberArkStaticUsername,
        'CyberArkUserNameQuery': value.cyberArkUserNameQuery,
        'CyberArkPasswordQuery': value.cyberArkPasswordQuery,
        'Url': value.url,
        'CertificateFilePassword': value.certificateFilePassword,
        'CertificateFileKey': value.certificateFileKey,
        'AgentMode': value.agentMode,
    };
}

