/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NotificationEmailSmsFilterApi } from './NotificationEmailSmsFilterApi';
import {
    NotificationEmailSmsFilterApiFromJSON,
    NotificationEmailSmsFilterApiFromJSONTyped,
    NotificationEmailSmsFilterApiToJSON,
} from './NotificationEmailSmsFilterApi';
import type { NotificationIntegrationFilterApi } from './NotificationIntegrationFilterApi';
import {
    NotificationIntegrationFilterApiFromJSON,
    NotificationIntegrationFilterApiFromJSONTyped,
    NotificationIntegrationFilterApiToJSON,
} from './NotificationIntegrationFilterApi';
import type { ScanNotificationRecipientApiModel } from './ScanNotificationRecipientApiModel';
import {
    ScanNotificationRecipientApiModelFromJSON,
    ScanNotificationRecipientApiModelFromJSONTyped,
    ScanNotificationRecipientApiModelToJSON,
} from './ScanNotificationRecipientApiModel';

/**
 * Represents a model for carrying out scan notification data
 * @export
 * @interface ScanNotificationApiModel
 */
export interface ScanNotificationApiModel {
    /**
     * Gets or sets the scan notification identifier.
     * @type {string}
     * @memberof ScanNotificationApiModel
     */
    id?: string;
    /**
     * Gets or sets the priority. Higher value means higher priority.
     * @type {number}
     * @memberof ScanNotificationApiModel
     */
    priority?: number;
    /**
     * 
     * @type {ScanNotificationRecipientApiModel}
     * @memberof ScanNotificationApiModel
     */
    recipients?: ScanNotificationRecipientApiModel;
    /**
     * Gets or sets the name of website group associated with this Scan Notification.
     * @type {string}
     * @memberof ScanNotificationApiModel
     */
    websiteGroupName?: string;
    /**
     * Gets or sets the root url of website associated with this Scan Notification.
     * @type {string}
     * @memberof ScanNotificationApiModel
     */
    websiteRootUrl?: string;
    /**
     * 
     * @type {NotificationEmailSmsFilterApi}
     * @memberof ScanNotificationApiModel
     */
    emailSmsFilter?: NotificationEmailSmsFilterApi;
    /**
     * 
     * @type {NotificationIntegrationFilterApi}
     * @memberof ScanNotificationApiModel
     */
    integrationFilter?: NotificationIntegrationFilterApi;
    /**
     * Gets or sets a value indicating whether this Scan Notification is disabled.
     * @type {boolean}
     * @memberof ScanNotificationApiModel
     */
    disabled: boolean;
    /**
     * Gets or sets scan task group ID.
     * @type {string}
     * @memberof ScanNotificationApiModel
     */
    scanTaskGroupId?: string;
    /**
     * Gets or sets the event name. This property determines when this rule will be executed.
     * @type {string}
     * @memberof ScanNotificationApiModel
     */
    event: ScanNotificationApiModelEventEnum;
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof ScanNotificationApiModel
     */
    name: string;
    /**
     * Gets or sets the Website Scope.
     * This property indicates whether this rule will be executed for a specific Website, WebsiteGroup or All Websites.
     * @type {string}
     * @memberof ScanNotificationApiModel
     */
    scope: ScanNotificationApiModelScopeEnum;
}


/**
 * @export
 */
export const ScanNotificationApiModelEventEnum = {
    NewScan: 'NewScan',
    ScanCompleted: 'ScanCompleted',
    ScanCancelled: 'ScanCancelled',
    ScanFailed: 'ScanFailed',
    ScheduledScanLaunchFailed: 'ScheduledScanLaunchFailed',
    OutOfDateTechnology: 'OutOfDateTechnology'
} as const;
export type ScanNotificationApiModelEventEnum = typeof ScanNotificationApiModelEventEnum[keyof typeof ScanNotificationApiModelEventEnum];

/**
 * @export
 */
export const ScanNotificationApiModelScopeEnum = {
    AnyWebsite: 'AnyWebsite',
    WebsiteGroup: 'WebsiteGroup',
    Website: 'Website'
} as const;
export type ScanNotificationApiModelScopeEnum = typeof ScanNotificationApiModelScopeEnum[keyof typeof ScanNotificationApiModelScopeEnum];


/**
 * Check if a given object implements the ScanNotificationApiModel interface.
 */
export function instanceOfScanNotificationApiModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "disabled" in value;
    isInstance = isInstance && "event" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "scope" in value;

    return isInstance;
}

export function ScanNotificationApiModelFromJSON(json: any): ScanNotificationApiModel {
    return ScanNotificationApiModelFromJSONTyped(json, false);
}

export function ScanNotificationApiModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScanNotificationApiModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'Id') ? undefined : json['Id'],
        'priority': !exists(json, 'Priority') ? undefined : json['Priority'],
        'recipients': !exists(json, 'Recipients') ? undefined : ScanNotificationRecipientApiModelFromJSON(json['Recipients']),
        'websiteGroupName': !exists(json, 'WebsiteGroupName') ? undefined : json['WebsiteGroupName'],
        'websiteRootUrl': !exists(json, 'WebsiteRootUrl') ? undefined : json['WebsiteRootUrl'],
        'emailSmsFilter': !exists(json, 'EmailSmsFilter') ? undefined : NotificationEmailSmsFilterApiFromJSON(json['EmailSmsFilter']),
        'integrationFilter': !exists(json, 'IntegrationFilter') ? undefined : NotificationIntegrationFilterApiFromJSON(json['IntegrationFilter']),
        'disabled': json['Disabled'],
        'scanTaskGroupId': !exists(json, 'ScanTaskGroupId') ? undefined : json['ScanTaskGroupId'],
        'event': json['Event'],
        'name': json['Name'],
        'scope': json['Scope'],
    };
}

export function ScanNotificationApiModelToJSON(value?: ScanNotificationApiModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.id,
        'Priority': value.priority,
        'Recipients': ScanNotificationRecipientApiModelToJSON(value.recipients),
        'WebsiteGroupName': value.websiteGroupName,
        'WebsiteRootUrl': value.websiteRootUrl,
        'EmailSmsFilter': NotificationEmailSmsFilterApiToJSON(value.emailSmsFilter),
        'IntegrationFilter': NotificationIntegrationFilterApiToJSON(value.integrationFilter),
        'Disabled': value.disabled,
        'ScanTaskGroupId': value.scanTaskGroupId,
        'Event': value.event,
        'Name': value.name,
        'Scope': value.scope,
    };
}

