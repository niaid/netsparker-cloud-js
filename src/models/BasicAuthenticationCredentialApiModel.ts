/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents credentials for Basic, NTML, Kerberos, Digest or Negotiate authentication.
 * @export
 * @interface BasicAuthenticationCredentialApiModel
 */
export interface BasicAuthenticationCredentialApiModel {
    /**
     * Gets or sets the type of the authentication.
     * @type {string}
     * @memberof BasicAuthenticationCredentialApiModel
     */
    authenticationType?: BasicAuthenticationCredentialApiModelAuthenticationTypeEnum;
    /**
     * Gets or sets the domain or computer name that verifies the credentials.
     * @type {string}
     * @memberof BasicAuthenticationCredentialApiModel
     */
    domain?: string;
    /**
     * Gets or sets the password for the user name associated with the credentials.
     * @type {string}
     * @memberof BasicAuthenticationCredentialApiModel
     */
    password?: string;
    /**
     * Gets or sets the URI prefix.
     * @type {string}
     * @memberof BasicAuthenticationCredentialApiModel
     */
    uriPrefix?: string;
    /**
     * Gets or sets the user name associated with the credentials.
     * @type {string}
     * @memberof BasicAuthenticationCredentialApiModel
     */
    userName?: string;
}

/**
* @export
* @enum {string}
*/
export enum BasicAuthenticationCredentialApiModelAuthenticationTypeEnum {
    Basic = 'Basic',
    Ntlm = 'Ntlm',
    Kerberos = 'Kerberos',
    Digest = 'Digest',
    Negotiate = 'Negotiate'
}


/**
 * Check if a given object implements the BasicAuthenticationCredentialApiModel interface.
 */
export function instanceOfBasicAuthenticationCredentialApiModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BasicAuthenticationCredentialApiModelFromJSON(json: any): BasicAuthenticationCredentialApiModel {
    return BasicAuthenticationCredentialApiModelFromJSONTyped(json, false);
}

export function BasicAuthenticationCredentialApiModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): BasicAuthenticationCredentialApiModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authenticationType': !exists(json, 'AuthenticationType') ? undefined : json['AuthenticationType'],
        'domain': !exists(json, 'Domain') ? undefined : json['Domain'],
        'password': !exists(json, 'Password') ? undefined : json['Password'],
        'uriPrefix': !exists(json, 'UriPrefix') ? undefined : json['UriPrefix'],
        'userName': !exists(json, 'UserName') ? undefined : json['UserName'],
    };
}

export function BasicAuthenticationCredentialApiModelToJSON(value?: BasicAuthenticationCredentialApiModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'AuthenticationType': value.authenticationType,
        'Domain': value.domain,
        'Password': value.password,
        'UriPrefix': value.uriPrefix,
        'UserName': value.userName,
    };
}

