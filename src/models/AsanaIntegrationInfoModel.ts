/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AsanaProject } from './AsanaProject';
import {
    AsanaProjectFromJSON,
    AsanaProjectFromJSONTyped,
    AsanaProjectToJSON,
} from './AsanaProject';
import type { AsanaTag } from './AsanaTag';
import {
    AsanaTagFromJSON,
    AsanaTagFromJSONTyped,
    AsanaTagToJSON,
} from './AsanaTag';
import type { AsanaUser } from './AsanaUser';
import {
    AsanaUserFromJSON,
    AsanaUserFromJSONTyped,
    AsanaUserToJSON,
} from './AsanaUser';
import type { AsanaWorkspace } from './AsanaWorkspace';
import {
    AsanaWorkspaceFromJSON,
    AsanaWorkspaceFromJSONTyped,
    AsanaWorkspaceToJSON,
} from './AsanaWorkspace';
import type { IntegrationCustomFieldVm } from './IntegrationCustomFieldVm';
import {
    IntegrationCustomFieldVmFromJSON,
    IntegrationCustomFieldVmFromJSONTyped,
    IntegrationCustomFieldVmToJSON,
} from './IntegrationCustomFieldVm';
import type { IntegrationWizardResultModel } from './IntegrationWizardResultModel';
import {
    IntegrationWizardResultModelFromJSON,
    IntegrationWizardResultModelFromJSONTyped,
    IntegrationWizardResultModelToJSON,
} from './IntegrationWizardResultModel';

/**
 * The Asana integration info
 * @export
 * @interface AsanaIntegrationInfoModel
 */
export interface AsanaIntegrationInfoModel {
    /**
     * Access Token
     * @type {string}
     * @memberof AsanaIntegrationInfoModel
     */
    accessToken: string;
    /**
     * The Project identifier.
     * @type {string}
     * @memberof AsanaIntegrationInfoModel
     */
    projectId: string;
    /**
     * The Workspace identifier.
     * @type {string}
     * @memberof AsanaIntegrationInfoModel
     */
    workspaceId?: string;
    /**
     * The user to assign issues to. Accepted values are email adress,user identifier or me.
     * @type {string}
     * @memberof AsanaIntegrationInfoModel
     */
    assignee?: string;
    /**
     * The Follower identifiers.
     * @type {Array<string>}
     * @memberof AsanaIntegrationInfoModel
     */
    followerIds?: Array<string>;
    /**
     * The number of days in which the card is due, date from the time that the card was created.
     * @type {number}
     * @memberof AsanaIntegrationInfoModel
     */
    dueDays: number;
    /**
     * Comma-separated Tag identifiers.
     * @type {Array<string>}
     * @memberof AsanaIntegrationInfoModel
     */
    tagIds?: Array<string>;
    /**
     * The Workspace List.
     * @type {Array<AsanaWorkspace>}
     * @memberof AsanaIntegrationInfoModel
     */
    workspaceList?: Array<AsanaWorkspace>;
    /**
     * The Project List.
     * @type {Array<AsanaProject>}
     * @memberof AsanaIntegrationInfoModel
     */
    projectList?: Array<AsanaProject>;
    /**
     * The Assignee List.
     * @type {Array<AsanaUser>}
     * @memberof AsanaIntegrationInfoModel
     */
    assigneeList?: Array<AsanaUser>;
    /**
     * The Follower List.
     * @type {Array<AsanaUser>}
     * @memberof AsanaIntegrationInfoModel
     */
    followerList?: Array<AsanaUser>;
    /**
     * The Tag List.
     * @type {Array<AsanaTag>}
     * @memberof AsanaIntegrationInfoModel
     */
    tagList?: Array<AsanaTag>;
    /**
     * The Follower identifiers.
     * @type {string}
     * @memberof AsanaIntegrationInfoModel
     */
    readonly followersSelected?: string;
    /**
     * Comma-separated Tag identifiers.
     * @type {string}
     * @memberof AsanaIntegrationInfoModel
     */
    readonly tagsSelected?: string;
    /**
     * 
     * @type {IntegrationWizardResultModel}
     * @memberof AsanaIntegrationInfoModel
     */
    integrationWizardResultModel?: IntegrationWizardResultModel;
    /**
     * 
     * @type {string}
     * @memberof AsanaIntegrationInfoModel
     */
    readonly type?: AsanaIntegrationInfoModelTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AsanaIntegrationInfoModel
     */
    readonly genericErrorMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof AsanaIntegrationInfoModel
     */
    readonly identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof AsanaIntegrationInfoModel
     */
    readonly testMessageBody?: string;
    /**
     * 
     * @type {string}
     * @memberof AsanaIntegrationInfoModel
     */
    readonly testMessageTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof AsanaIntegrationInfoModel
     */
    readonly webhookUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof AsanaIntegrationInfoModel
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof AsanaIntegrationInfoModel
     */
    integrationVersion?: number;
    /**
     * 
     * @type {string}
     * @memberof AsanaIntegrationInfoModel
     */
    accountID?: string;
    /**
     * 
     * @type {Array<IntegrationCustomFieldVm>}
     * @memberof AsanaIntegrationInfoModel
     */
    customFields?: Array<IntegrationCustomFieldVm>;
    /**
     * 
     * @type {string}
     * @memberof AsanaIntegrationInfoModel
     */
    templateType?: AsanaIntegrationInfoModelTemplateTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AsanaIntegrationInfoModel
     */
    reopenStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof AsanaIntegrationInfoModel
     */
    resolvedStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof AsanaIntegrationInfoModel
     */
    titleFormat: string;
}


/**
 * @export
 */
export const AsanaIntegrationInfoModelTypeEnum = {
    Jira: 'Jira',
    GitHub: 'GitHub',
    Tfs: 'TFS',
    FogBugz: 'FogBugz',
    ServiceNow: 'ServiceNow',
    Slack: 'Slack',
    GitLab: 'GitLab',
    Bitbucket: 'Bitbucket',
    Unfuddle: 'Unfuddle',
    Zapier: 'Zapier',
    AzureDevOps: 'AzureDevOps',
    Redmine: 'Redmine',
    Bugzilla: 'Bugzilla',
    Kafka: 'Kafka',
    PagerDuty: 'PagerDuty',
    MicrosoftTeams: 'MicrosoftTeams',
    Clubhouse: 'Clubhouse',
    Trello: 'Trello',
    Asana: 'Asana',
    Webhook: 'Webhook',
    Kenna: 'Kenna',
    Freshservice: 'Freshservice',
    YouTrack: 'YouTrack',
    NetsparkerEnterprise: 'NetsparkerEnterprise',
    Splunk: 'Splunk',
    Mattermost: 'Mattermost',
    Hashicorp: 'Hashicorp',
    PivotalTracker: 'PivotalTracker',
    CyberArk: 'CyberArk',
    DefectDojo: 'DefectDojo',
    JazzTeam: 'JazzTeam',
    AzureKeyVault: 'AzureKeyVault',
    ServiceNowVrm: 'ServiceNowVRM'
} as const;
export type AsanaIntegrationInfoModelTypeEnum = typeof AsanaIntegrationInfoModelTypeEnum[keyof typeof AsanaIntegrationInfoModelTypeEnum];

/**
 * @export
 */
export const AsanaIntegrationInfoModelTemplateTypeEnum = {
    Standard: 'Standard',
    Detailed: 'Detailed'
} as const;
export type AsanaIntegrationInfoModelTemplateTypeEnum = typeof AsanaIntegrationInfoModelTemplateTypeEnum[keyof typeof AsanaIntegrationInfoModelTemplateTypeEnum];


/**
 * Check if a given object implements the AsanaIntegrationInfoModel interface.
 */
export function instanceOfAsanaIntegrationInfoModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accessToken" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "dueDays" in value;
    isInstance = isInstance && "titleFormat" in value;

    return isInstance;
}

export function AsanaIntegrationInfoModelFromJSON(json: any): AsanaIntegrationInfoModel {
    return AsanaIntegrationInfoModelFromJSONTyped(json, false);
}

export function AsanaIntegrationInfoModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): AsanaIntegrationInfoModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessToken': json['AccessToken'],
        'projectId': json['ProjectId'],
        'workspaceId': !exists(json, 'WorkspaceId') ? undefined : json['WorkspaceId'],
        'assignee': !exists(json, 'Assignee') ? undefined : json['Assignee'],
        'followerIds': !exists(json, 'FollowerIds') ? undefined : json['FollowerIds'],
        'dueDays': json['DueDays'],
        'tagIds': !exists(json, 'TagIds') ? undefined : json['TagIds'],
        'workspaceList': !exists(json, 'WorkspaceList') ? undefined : ((json['WorkspaceList'] as Array<any>).map(AsanaWorkspaceFromJSON)),
        'projectList': !exists(json, 'ProjectList') ? undefined : ((json['ProjectList'] as Array<any>).map(AsanaProjectFromJSON)),
        'assigneeList': !exists(json, 'AssigneeList') ? undefined : ((json['AssigneeList'] as Array<any>).map(AsanaUserFromJSON)),
        'followerList': !exists(json, 'FollowerList') ? undefined : ((json['FollowerList'] as Array<any>).map(AsanaUserFromJSON)),
        'tagList': !exists(json, 'TagList') ? undefined : ((json['TagList'] as Array<any>).map(AsanaTagFromJSON)),
        'followersSelected': !exists(json, 'FollowersSelected') ? undefined : json['FollowersSelected'],
        'tagsSelected': !exists(json, 'TagsSelected') ? undefined : json['TagsSelected'],
        'integrationWizardResultModel': !exists(json, 'IntegrationWizardResultModel') ? undefined : IntegrationWizardResultModelFromJSON(json['IntegrationWizardResultModel']),
        'type': !exists(json, 'Type') ? undefined : json['Type'],
        'genericErrorMessage': !exists(json, 'GenericErrorMessage') ? undefined : json['GenericErrorMessage'],
        'identifier': !exists(json, 'Identifier') ? undefined : json['Identifier'],
        'testMessageBody': !exists(json, 'TestMessageBody') ? undefined : json['TestMessageBody'],
        'testMessageTitle': !exists(json, 'TestMessageTitle') ? undefined : json['TestMessageTitle'],
        'webhookUrl': !exists(json, 'WebhookUrl') ? undefined : json['WebhookUrl'],
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'integrationVersion': !exists(json, 'IntegrationVersion') ? undefined : json['IntegrationVersion'],
        'accountID': !exists(json, 'AccountID') ? undefined : json['AccountID'],
        'customFields': !exists(json, 'CustomFields') ? undefined : ((json['CustomFields'] as Array<any>).map(IntegrationCustomFieldVmFromJSON)),
        'templateType': !exists(json, 'TemplateType') ? undefined : json['TemplateType'],
        'reopenStatus': !exists(json, 'ReopenStatus') ? undefined : json['ReopenStatus'],
        'resolvedStatus': !exists(json, 'ResolvedStatus') ? undefined : json['ResolvedStatus'],
        'titleFormat': json['TitleFormat'],
    };
}

export function AsanaIntegrationInfoModelToJSON(value?: AsanaIntegrationInfoModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'AccessToken': value.accessToken,
        'ProjectId': value.projectId,
        'WorkspaceId': value.workspaceId,
        'Assignee': value.assignee,
        'FollowerIds': value.followerIds,
        'DueDays': value.dueDays,
        'TagIds': value.tagIds,
        'WorkspaceList': value.workspaceList === undefined ? undefined : ((value.workspaceList as Array<any>).map(AsanaWorkspaceToJSON)),
        'ProjectList': value.projectList === undefined ? undefined : ((value.projectList as Array<any>).map(AsanaProjectToJSON)),
        'AssigneeList': value.assigneeList === undefined ? undefined : ((value.assigneeList as Array<any>).map(AsanaUserToJSON)),
        'FollowerList': value.followerList === undefined ? undefined : ((value.followerList as Array<any>).map(AsanaUserToJSON)),
        'TagList': value.tagList === undefined ? undefined : ((value.tagList as Array<any>).map(AsanaTagToJSON)),
        'IntegrationWizardResultModel': IntegrationWizardResultModelToJSON(value.integrationWizardResultModel),
        'Name': value.name,
        'IntegrationVersion': value.integrationVersion,
        'AccountID': value.accountID,
        'CustomFields': value.customFields === undefined ? undefined : ((value.customFields as Array<any>).map(IntegrationCustomFieldVmToJSON)),
        'TemplateType': value.templateType,
        'ReopenStatus': value.reopenStatus,
        'ResolvedStatus': value.resolvedStatus,
        'TitleFormat': value.titleFormat,
    };
}

