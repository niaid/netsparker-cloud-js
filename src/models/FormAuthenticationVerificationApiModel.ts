/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OtpSettings } from './OtpSettings';
import {
    OtpSettingsFromJSON,
    OtpSettingsFromJSONTyped,
    OtpSettingsToJSON,
} from './OtpSettings';

/**
 * Represents a form authentication verification model.
 * @export
 * @interface FormAuthenticationVerificationApiModel
 */
export interface FormAuthenticationVerificationApiModel {
    /**
     * Gets or sets the login form URL.
     * @type {string}
     * @memberof FormAuthenticationVerificationApiModel
     */
    loginFormUrl: string;
    /**
     * Gets or sets the password.
     * @type {string}
     * @memberof FormAuthenticationVerificationApiModel
     */
    password: string;
    /**
     * Gets or sets the scan target URL.
     * @type {string}
     * @memberof FormAuthenticationVerificationApiModel
     */
    scanTargetUrl: string;
    /**
     * Gets or sets the user name.
     * @type {string}
     * @memberof FormAuthenticationVerificationApiModel
     */
    username: string;
    /**
     * 
     * @type {OtpSettings}
     * @memberof FormAuthenticationVerificationApiModel
     */
    otpSettings?: OtpSettings;
}

/**
 * Check if a given object implements the FormAuthenticationVerificationApiModel interface.
 */
export function instanceOfFormAuthenticationVerificationApiModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "loginFormUrl" in value;
    isInstance = isInstance && "password" in value;
    isInstance = isInstance && "scanTargetUrl" in value;
    isInstance = isInstance && "username" in value;

    return isInstance;
}

export function FormAuthenticationVerificationApiModelFromJSON(json: any): FormAuthenticationVerificationApiModel {
    return FormAuthenticationVerificationApiModelFromJSONTyped(json, false);
}

export function FormAuthenticationVerificationApiModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormAuthenticationVerificationApiModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'loginFormUrl': json['LoginFormUrl'],
        'password': json['Password'],
        'scanTargetUrl': json['ScanTargetUrl'],
        'username': json['Username'],
        'otpSettings': !exists(json, 'OtpSettings') ? undefined : OtpSettingsFromJSON(json['OtpSettings']),
    };
}

export function FormAuthenticationVerificationApiModelToJSON(value?: FormAuthenticationVerificationApiModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'LoginFormUrl': value.loginFormUrl,
        'Password': value.password,
        'ScanTargetUrl': value.scanTargetUrl,
        'Username': value.username,
        'OtpSettings': OtpSettingsToJSON(value.otpSettings),
    };
}

