/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Scheduled scan recurrence view model.
 * @export
 * @interface ScheduledScanRecurrenceViewModel
 */
export interface ScheduledScanRecurrenceViewModel {
    /**
     * The {Invicti.Dates.Recurring.Enums.RepeatTypes}.
     * @type {string}
     * @memberof ScheduledScanRecurrenceViewModel
     */
    repeatType?: ScheduledScanRecurrenceViewModelRepeatTypeEnum;
    /**
     * The interval.
     * @type {number}
     * @memberof ScheduledScanRecurrenceViewModel
     */
    interval?: number;
    /**
     * The start date.
     * @type {Date}
     * @memberof ScheduledScanRecurrenceViewModel
     */
    startDate?: Date;
    /**
     * The ending type.
     * @type {string}
     * @memberof ScheduledScanRecurrenceViewModel
     */
    endingType?: ScheduledScanRecurrenceViewModelEndingTypeEnum;
    /**
     * The day of weeks.
     * @type {Array<string>}
     * @memberof ScheduledScanRecurrenceViewModel
     */
    daysOfWeek?: Array<ScheduledScanRecurrenceViewModelDaysOfWeekEnum>;
    /**
     * The months of year.
     * @type {Array<string>}
     * @memberof ScheduledScanRecurrenceViewModel
     */
    monthsOfYear?: Array<ScheduledScanRecurrenceViewModelMonthsOfYearEnum>;
    /**
     * The ordinals.
     * @type {string}
     * @memberof ScheduledScanRecurrenceViewModel
     */
    ordinal?: ScheduledScanRecurrenceViewModelOrdinalEnum;
    /**
     * The ending date.
     * @type {string}
     * @memberof ScheduledScanRecurrenceViewModel
     */
    endOn?: string;
    /**
     * The limit of the scheduled scan executions.
     * @type {number}
     * @memberof ScheduledScanRecurrenceViewModel
     */
    endOnOccurences?: number;
    /**
     * The day of month.
     * @type {number}
     * @memberof ScheduledScanRecurrenceViewModel
     */
    dayOfMonth?: number;
    /**
     * The ending date.
     * @type {Date}
     * @memberof ScheduledScanRecurrenceViewModel
     */
    endOnDate?: Date;
    /**
     * The recurrence builder.
     * @type {string}
     * @memberof ScheduledScanRecurrenceViewModel
     */
    dayOfWeek?: ScheduledScanRecurrenceViewModelDayOfWeekEnum;
}


/**
 * @export
 */
export const ScheduledScanRecurrenceViewModelRepeatTypeEnum = {
    Days: 'Days',
    Weeks: 'Weeks',
    Months: 'Months',
    Years: 'Years'
} as const;
export type ScheduledScanRecurrenceViewModelRepeatTypeEnum = typeof ScheduledScanRecurrenceViewModelRepeatTypeEnum[keyof typeof ScheduledScanRecurrenceViewModelRepeatTypeEnum];

/**
 * @export
 */
export const ScheduledScanRecurrenceViewModelEndingTypeEnum = {
    Never: 'Never',
    Date: 'Date',
    Occurences: 'Occurences'
} as const;
export type ScheduledScanRecurrenceViewModelEndingTypeEnum = typeof ScheduledScanRecurrenceViewModelEndingTypeEnum[keyof typeof ScheduledScanRecurrenceViewModelEndingTypeEnum];

/**
 * @export
 */
export const ScheduledScanRecurrenceViewModelDaysOfWeekEnum = {
    Sunday: 'Sunday',
    Monday: 'Monday',
    Tuesday: 'Tuesday',
    Wednesday: 'Wednesday',
    Thursday: 'Thursday',
    Friday: 'Friday',
    Saturday: 'Saturday'
} as const;
export type ScheduledScanRecurrenceViewModelDaysOfWeekEnum = typeof ScheduledScanRecurrenceViewModelDaysOfWeekEnum[keyof typeof ScheduledScanRecurrenceViewModelDaysOfWeekEnum];

/**
 * @export
 */
export const ScheduledScanRecurrenceViewModelMonthsOfYearEnum = {
    January: 'January',
    February: 'February',
    March: 'March',
    April: 'April',
    May: 'May',
    June: 'June',
    July: 'July',
    August: 'August',
    September: 'September',
    October: 'October',
    November: 'November',
    December: 'December'
} as const;
export type ScheduledScanRecurrenceViewModelMonthsOfYearEnum = typeof ScheduledScanRecurrenceViewModelMonthsOfYearEnum[keyof typeof ScheduledScanRecurrenceViewModelMonthsOfYearEnum];

/**
 * @export
 */
export const ScheduledScanRecurrenceViewModelOrdinalEnum = {
    First: 'First',
    Second: 'Second',
    Third: 'Third',
    Fourth: 'Fourth',
    Last: 'Last'
} as const;
export type ScheduledScanRecurrenceViewModelOrdinalEnum = typeof ScheduledScanRecurrenceViewModelOrdinalEnum[keyof typeof ScheduledScanRecurrenceViewModelOrdinalEnum];

/**
 * @export
 */
export const ScheduledScanRecurrenceViewModelDayOfWeekEnum = {
    Sunday: 'Sunday',
    Monday: 'Monday',
    Tuesday: 'Tuesday',
    Wednesday: 'Wednesday',
    Thursday: 'Thursday',
    Friday: 'Friday',
    Saturday: 'Saturday'
} as const;
export type ScheduledScanRecurrenceViewModelDayOfWeekEnum = typeof ScheduledScanRecurrenceViewModelDayOfWeekEnum[keyof typeof ScheduledScanRecurrenceViewModelDayOfWeekEnum];


/**
 * Check if a given object implements the ScheduledScanRecurrenceViewModel interface.
 */
export function instanceOfScheduledScanRecurrenceViewModel(value: object): boolean {
    return true;
}

export function ScheduledScanRecurrenceViewModelFromJSON(json: any): ScheduledScanRecurrenceViewModel {
    return ScheduledScanRecurrenceViewModelFromJSONTyped(json, false);
}

export function ScheduledScanRecurrenceViewModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScheduledScanRecurrenceViewModel {
    if (json == null) {
        return json;
    }
    return {
        
        'repeatType': json['RepeatType'] == null ? undefined : json['RepeatType'],
        'interval': json['Interval'] == null ? undefined : json['Interval'],
        'startDate': json['StartDate'] == null ? undefined : (new Date(json['StartDate'])),
        'endingType': json['EndingType'] == null ? undefined : json['EndingType'],
        'daysOfWeek': json['DaysOfWeek'] == null ? undefined : json['DaysOfWeek'],
        'monthsOfYear': json['MonthsOfYear'] == null ? undefined : json['MonthsOfYear'],
        'ordinal': json['Ordinal'] == null ? undefined : json['Ordinal'],
        'endOn': json['EndOn'] == null ? undefined : json['EndOn'],
        'endOnOccurences': json['EndOnOccurences'] == null ? undefined : json['EndOnOccurences'],
        'dayOfMonth': json['DayOfMonth'] == null ? undefined : json['DayOfMonth'],
        'endOnDate': json['EndOnDate'] == null ? undefined : (new Date(json['EndOnDate'])),
        'dayOfWeek': json['DayOfWeek'] == null ? undefined : json['DayOfWeek'],
    };
}

export function ScheduledScanRecurrenceViewModelToJSON(value?: ScheduledScanRecurrenceViewModel | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'RepeatType': value['repeatType'],
        'Interval': value['interval'],
        'StartDate': value['startDate'] == null ? undefined : ((value['startDate']).toISOString()),
        'EndingType': value['endingType'],
        'DaysOfWeek': value['daysOfWeek'],
        'MonthsOfYear': value['monthsOfYear'],
        'Ordinal': value['ordinal'],
        'EndOn': value['endOn'],
        'EndOnOccurences': value['endOnOccurences'],
        'DayOfMonth': value['dayOfMonth'],
        'EndOnDate': value['endOnDate'] == null ? undefined : ((value['endOnDate']).toISOString()),
        'DayOfWeek': value['dayOfWeek'],
    };
}

