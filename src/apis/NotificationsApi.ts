/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteScanNotificationApiModel,
  NewScanNotificationApiModel,
  NotificationPriorityPair,
  ScanNotificationApiModel,
  ScanNotificationListApiResult,
  ScanNotificationScanTaskGroupApiModel,
  UpdateScanNotificationApiModel,
} from '../models/index';
import {
    DeleteScanNotificationApiModelFromJSON,
    DeleteScanNotificationApiModelToJSON,
    NewScanNotificationApiModelFromJSON,
    NewScanNotificationApiModelToJSON,
    NotificationPriorityPairFromJSON,
    NotificationPriorityPairToJSON,
    ScanNotificationApiModelFromJSON,
    ScanNotificationApiModelToJSON,
    ScanNotificationListApiResultFromJSON,
    ScanNotificationListApiResultToJSON,
    ScanNotificationScanTaskGroupApiModelFromJSON,
    ScanNotificationScanTaskGroupApiModelToJSON,
    UpdateScanNotificationApiModelFromJSON,
    UpdateScanNotificationApiModelToJSON,
} from '../models/index';

export interface NotificationsDeleteRequest {
    model: DeleteScanNotificationApiModel;
}

export interface NotificationsGetRequest {
    id: string;
}

export interface NotificationsGetPrioritiesRequest {
    event: NotificationsGetPrioritiesEventEnum;
}

export interface NotificationsGetScanGroupsRequest {
    websiteId: string;
}

export interface NotificationsListRequest {
    page?: number;
    pageSize?: number;
}

export interface NotificationsNewRequest {
    model: NewScanNotificationApiModel;
}

export interface NotificationsSetPrioritiesRequest {
    priorities: Array<NotificationPriorityPair>;
}

export interface NotificationsUpdateRequest {
    model: UpdateScanNotificationApiModel;
}

/**
 * 
 */
export class NotificationsApi extends runtime.BaseAPI {

    /**
     * Deletes an existing scan notification definition.
     */
    async notificationsDeleteRaw(requestParameters: NotificationsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling notificationsDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/notifications/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteScanNotificationApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an existing scan notification definition.
     */
    async notificationsDelete(requestParameters: NotificationsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Gets the notification.
     */
    async notificationsGetRaw(requestParameters: NotificationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanNotificationApiModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling notificationsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/notifications/get/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScanNotificationApiModelFromJSON(jsonValue));
    }

    /**
     * Gets the notification.
     */
    async notificationsGet(requestParameters: NotificationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanNotificationApiModel> {
        const response = await this.notificationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of notifications grouped by their Scopes and ordered by priorities for the given event.
     */
    async notificationsGetPrioritiesRaw(requestParameters: NotificationsGetPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanNotificationApiModel>> {
        if (requestParameters.event === null || requestParameters.event === undefined) {
            throw new runtime.RequiredError('event','Required parameter requestParameters.event was null or undefined when calling notificationsGetPriorities.');
        }

        const queryParameters: any = {};

        if (requestParameters.event !== undefined) {
            queryParameters['event'] = requestParameters.event;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/notifications/getpriorities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScanNotificationApiModelFromJSON(jsonValue));
    }

    /**
     * Gets the list of notifications grouped by their Scopes and ordered by priorities for the given event.
     */
    async notificationsGetPriorities(requestParameters: NotificationsGetPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanNotificationApiModel> {
        const response = await this.notificationsGetPrioritiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the scan groups of website.
     */
    async notificationsGetScanGroupsRaw(requestParameters: NotificationsGetScanGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanNotificationScanTaskGroupApiModel>> {
        if (requestParameters.websiteId === null || requestParameters.websiteId === undefined) {
            throw new runtime.RequiredError('websiteId','Required parameter requestParameters.websiteId was null or undefined when calling notificationsGetScanGroups.');
        }

        const queryParameters: any = {};

        if (requestParameters.websiteId !== undefined) {
            queryParameters['WebsiteId'] = requestParameters.websiteId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/notifications/getscangroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScanNotificationScanTaskGroupApiModelFromJSON(jsonValue));
    }

    /**
     * Gets the scan groups of website.
     */
    async notificationsGetScanGroups(requestParameters: NotificationsGetScanGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanNotificationScanTaskGroupApiModel> {
        const response = await this.notificationsGetScanGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of notifications.
     */
    async notificationsListRaw(requestParameters: NotificationsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanNotificationListApiResult>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/notifications/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScanNotificationListApiResultFromJSON(jsonValue));
    }

    /**
     * Gets the list of notifications.
     */
    async notificationsList(requestParameters: NotificationsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanNotificationListApiResult> {
        const response = await this.notificationsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new scan notification definition.
     */
    async notificationsNewRaw(requestParameters: NotificationsNewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanNotificationApiModel>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling notificationsNew.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/notifications/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewScanNotificationApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScanNotificationApiModelFromJSON(jsonValue));
    }

    /**
     * Creates a new scan notification definition.
     */
    async notificationsNew(requestParameters: NotificationsNewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanNotificationApiModel> {
        const response = await this.notificationsNewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the priorities of notifications.
     */
    async notificationsSetPrioritiesRaw(requestParameters: NotificationsSetPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.priorities === null || requestParameters.priorities === undefined) {
            throw new runtime.RequiredError('priorities','Required parameter requestParameters.priorities was null or undefined when calling notificationsSetPriorities.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/notifications/setpriorities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.priorities.map(NotificationPriorityPairToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets the priorities of notifications.
     */
    async notificationsSetPriorities(requestParameters: NotificationsSetPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationsSetPrioritiesRaw(requestParameters, initOverrides);
    }

    /**
     * Updates an existing scan notification definition.
     */
    async notificationsUpdateRaw(requestParameters: NotificationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanNotificationApiModel>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling notificationsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/notifications/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateScanNotificationApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScanNotificationApiModelFromJSON(jsonValue));
    }

    /**
     * Updates an existing scan notification definition.
     */
    async notificationsUpdate(requestParameters: NotificationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanNotificationApiModel> {
        const response = await this.notificationsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const NotificationsGetPrioritiesEventEnum = {
    NewScan: 'NewScan',
    ScanCompleted: 'ScanCompleted',
    ScanCancelled: 'ScanCancelled',
    ScanFailed: 'ScanFailed',
    ScheduledScanLaunchFailed: 'ScheduledScanLaunchFailed',
    OutOfDateTechnology: 'OutOfDateTechnology'
} as const;
export type NotificationsGetPrioritiesEventEnum = typeof NotificationsGetPrioritiesEventEnum[keyof typeof NotificationsGetPrioritiesEventEnum];
