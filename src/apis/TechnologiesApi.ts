/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TechnologyListApiResult,
} from '../models/index';
import {
    TechnologyListApiResultFromJSON,
    TechnologyListApiResultToJSON,
} from '../models/index';

export interface TechnologiesListRequest {
    webSiteName?: string;
    technologyName?: string;
    page?: number;
    pageSize?: number;
}

export interface TechnologiesOutofdateTechnologiesRequest {
    webSiteName?: string;
    technologyName?: string;
    page?: number;
    pageSize?: number;
}

/**
 * 
 */
export class TechnologiesApi extends runtime.BaseAPI {

    /**
     * Gets the list of technologies that currently in use.
     */
    async technologiesListRaw(requestParameters: TechnologiesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TechnologyListApiResult>> {
        const queryParameters: any = {};

        if (requestParameters.webSiteName !== undefined) {
            queryParameters['webSiteName'] = requestParameters.webSiteName;
        }

        if (requestParameters.technologyName !== undefined) {
            queryParameters['technologyName'] = requestParameters.technologyName;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/technologies/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TechnologyListApiResultFromJSON(jsonValue));
    }

    /**
     * Gets the list of technologies that currently in use.
     */
    async technologiesList(requestParameters: TechnologiesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TechnologyListApiResult> {
        const response = await this.technologiesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of out-of-date technologies that currently in use.
     */
    async technologiesOutofdateTechnologiesRaw(requestParameters: TechnologiesOutofdateTechnologiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TechnologyListApiResult>> {
        const queryParameters: any = {};

        if (requestParameters.webSiteName !== undefined) {
            queryParameters['webSiteName'] = requestParameters.webSiteName;
        }

        if (requestParameters.technologyName !== undefined) {
            queryParameters['technologyName'] = requestParameters.technologyName;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/technologies/outofdatetechnologies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TechnologyListApiResultFromJSON(jsonValue));
    }

    /**
     * Gets the list of out-of-date technologies that currently in use.
     */
    async technologiesOutofdateTechnologies(requestParameters: TechnologiesOutofdateTechnologiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TechnologyListApiResult> {
        const response = await this.technologiesOutofdateTechnologiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
