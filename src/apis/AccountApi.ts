/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountLicenseApiModel,
  ScanControlApiModel,
  UserHealthCheckApiModel,
} from '../models/index';
import {
    AccountLicenseApiModelFromJSON,
    AccountLicenseApiModelToJSON,
    ScanControlApiModelFromJSON,
    ScanControlApiModelToJSON,
    UserHealthCheckApiModelFromJSON,
    UserHealthCheckApiModelToJSON,
} from '../models/index';

export interface AccountLicenseValidateRequest {
    username: string;
}

export interface AccountScanControl0Request {
    model: ScanControlApiModel;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * Gives user\'s account license.
     */
    async accountLicenseRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountLicenseApiModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/account/license`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountLicenseApiModelFromJSON(jsonValue));
    }

    /**
     * Gives user\'s account license.
     */
    async accountLicense(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountLicenseApiModel> {
        const response = await this.accountLicenseRaw(initOverrides);
        return await response.value();
    }

    /**
     * If user info and license validated it returns success, otherwise fails
     */
    async accountLicenseValidateRaw(requestParameters: AccountLicenseValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling accountLicenseValidate.');
        }

        const queryParameters: any = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/account/license-validate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * If user info and license validated it returns success, otherwise fails
     */
    async accountLicenseValidate(requestParameters: AccountLicenseValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountLicenseValidateRaw(requestParameters, initOverrides);
    }

    /**
     * Gets the information of callee
     */
    async accountMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserHealthCheckApiModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/account/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserHealthCheckApiModelFromJSON(jsonValue));
    }

    /**
     * Gets the information of callee
     */
    async accountMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserHealthCheckApiModel> {
        const response = await this.accountMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets the scan control settings of account
     */
    async accountScanControlRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/account/scan-control`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets the scan control settings of account
     */
    async accountScanControl(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.accountScanControlRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async accountScanControlProgressRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/account/scan-control-progress`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async accountScanControlProgress(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.accountScanControlProgressRaw(initOverrides);
        return await response.value();
    }

    /**
     * Sets the scan control settings of account
     */
    async accountScanControl_1Raw(requestParameters: AccountScanControl0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling accountScanControl_1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/account/scan-control`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScanControlApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Sets the scan control settings of account
     */
    async accountScanControl_1(requestParameters: AccountScanControl0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.accountScanControl_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
