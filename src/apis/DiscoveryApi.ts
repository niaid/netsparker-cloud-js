/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteDiscoveryConnectionModel,
  DiscoveryConnectionsViewModel,
  DiscoveryServiceListApiResult,
  DiscoverySettingsApiModel,
  ExcludeFilter,
} from '../models/index';
import {
    DeleteDiscoveryConnectionModelFromJSON,
    DeleteDiscoveryConnectionModelToJSON,
    DiscoveryConnectionsViewModelFromJSON,
    DiscoveryConnectionsViewModelToJSON,
    DiscoveryServiceListApiResultFromJSON,
    DiscoveryServiceListApiResultToJSON,
    DiscoverySettingsApiModelFromJSON,
    DiscoverySettingsApiModelToJSON,
    ExcludeFilterFromJSON,
    ExcludeFilterToJSON,
} from '../models/index';

export interface DiscoveryApiDiscoveryConnectionByIdRequest {
    connectionId: string;
    type?: DiscoveryConnectionByIdTypeEnum;
}

export interface DiscoveryApiDiscoveryConnectionsRequest {
    name?: string;
    region?: string;
    type?: DiscoveryConnectionsTypeEnum;
    page?: number;
    pageSize?: number;
}

export interface DiscoveryApiDiscoveryCreateConnectionRequest {
    model: DiscoveryConnectionsViewModel;
}

export interface DiscoveryApiDiscoveryDeleteConnectionRequest {
    model: DeleteDiscoveryConnectionModel;
}

export interface DiscoveryApiDiscoveryEditConnectionRequest {
    model: DiscoveryConnectionsViewModel;
}

export interface DiscoveryApiDiscoveryExcludeRequest {
    model: ExcludeFilter;
}

export interface DiscoveryApiDiscoveryExportRequest {
    csvSeparator?: DiscoveryExportCsvSeparatorEnum;
}

export interface DiscoveryApiDiscoveryIgnoreRequest {
    serviceIds: Array<string>;
}

export interface DiscoveryApiDiscoveryIgnoreByFilterRequest {
    authority?: string;
    ipAddress?: string;
    secondLevelDomain?: string;
    topLevelDomain?: string;
    organizationName?: string;
    distance?: number;
    registeredDomain?: boolean;
}

export interface DiscoveryApiDiscoveryListRequest {
    page?: number;
    pageSize?: number;
}

export interface DiscoveryApiDiscoveryListByFilterRequest {
    authority?: string;
    ipAddress?: string;
    secondLevelDomain?: string;
    topLevelDomain?: string;
    organizationName?: string;
    distance?: number;
    registeredDomain?: boolean;
    status?: DiscoveryListByFilterStatusEnum;
    page?: number;
    pageSize?: number;
}

export interface DiscoveryApiDiscoveryUpdateSettingsRequest {
    model: DiscoverySettingsApiModel;
}

/**
 * 
 */
export class DiscoveryApi extends runtime.BaseAPI {

    /**
     * Get Connection By Id And Type.
     */
    async discoveryConnectionByIdRaw(requestParameters: DiscoveryApiDiscoveryConnectionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.connectionId === null || requestParameters.connectionId === undefined) {
            throw new runtime.RequiredError('connectionId','Required parameter requestParameters.connectionId was null or undefined when calling discoveryConnectionById.');
        }

        const queryParameters: any = {};

        if (requestParameters.connectionId !== undefined) {
            queryParameters['connectionId'] = requestParameters.connectionId;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/discovery/connectionbyid`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get Connection By Id And Type.
     */
    async discoveryConnectionById(requestParameters: DiscoveryApiDiscoveryConnectionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.discoveryConnectionByIdRaw(requestParameters, initOverrides);
    }

    /**
     * List Connections.
     */
    async discoveryConnectionsRaw(requestParameters: DiscoveryApiDiscoveryConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.region !== undefined) {
            queryParameters['region'] = requestParameters.region;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/discovery/connections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List Connections.
     */
    async discoveryConnections(requestParameters: DiscoveryApiDiscoveryConnectionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.discoveryConnectionsRaw(requestParameters, initOverrides);
    }

    /**
     * Creates New Connection.
     */
    async discoveryCreateConnectionRaw(requestParameters: DiscoveryApiDiscoveryCreateConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling discoveryCreateConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/discovery/createconnection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DiscoveryConnectionsViewModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates New Connection.
     */
    async discoveryCreateConnection(requestParameters: DiscoveryApiDiscoveryCreateConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.discoveryCreateConnectionRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes Connection.
     */
    async discoveryDeleteConnectionRaw(requestParameters: DiscoveryApiDiscoveryDeleteConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling discoveryDeleteConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/discovery/deleteconnection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteDiscoveryConnectionModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes Connection.
     */
    async discoveryDeleteConnection(requestParameters: DiscoveryApiDiscoveryDeleteConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.discoveryDeleteConnectionRaw(requestParameters, initOverrides);
    }

    /**
     * Edits Connection.
     */
    async discoveryEditConnectionRaw(requestParameters: DiscoveryApiDiscoveryEditConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling discoveryEditConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/discovery/editconnection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DiscoveryConnectionsViewModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Edits Connection.
     */
    async discoveryEditConnection(requestParameters: DiscoveryApiDiscoveryEditConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.discoveryEditConnectionRaw(requestParameters, initOverrides);
    }

    /**
     * Returns exclude operation result.  This operation note override existing data, append to existing data.  If you want to override please use update-settings endpoint.
     */
    async discoveryExcludeRaw(requestParameters: DiscoveryApiDiscoveryExcludeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling discoveryExclude.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/discovery/exclude`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExcludeFilterToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns exclude operation result.  This operation note override existing data, append to existing data.  If you want to override please use update-settings endpoint.
     */
    async discoveryExclude(requestParameters: DiscoveryApiDiscoveryExcludeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.discoveryExcludeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the all discovery services in the csv format as a downloadable file.
     */
    async discoveryExportRaw(requestParameters: DiscoveryApiDiscoveryExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.csvSeparator !== undefined) {
            queryParameters['csvSeparator'] = requestParameters.csvSeparator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/discovery/export`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns the all discovery services in the csv format as a downloadable file.
     */
    async discoveryExport(requestParameters: DiscoveryApiDiscoveryExportRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.discoveryExportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Ignores discovery service with given service ids.
     */
    async discoveryIgnoreRaw(requestParameters: DiscoveryApiDiscoveryIgnoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.serviceIds === null || requestParameters.serviceIds === undefined) {
            throw new runtime.RequiredError('serviceIds','Required parameter requestParameters.serviceIds was null or undefined when calling discoveryIgnore.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/discovery/ignore`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.serviceIds,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Ignores discovery service with given service ids.
     */
    async discoveryIgnore(requestParameters: DiscoveryApiDiscoveryIgnoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.discoveryIgnoreRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Ignores discovery services for selected filters.
     */
    async discoveryIgnoreByFilterRaw(requestParameters: DiscoveryApiDiscoveryIgnoreByFilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters.authority !== undefined) {
            queryParameters['authority'] = requestParameters.authority;
        }

        if (requestParameters.ipAddress !== undefined) {
            queryParameters['ipAddress'] = requestParameters.ipAddress;
        }

        if (requestParameters.secondLevelDomain !== undefined) {
            queryParameters['secondLevelDomain'] = requestParameters.secondLevelDomain;
        }

        if (requestParameters.topLevelDomain !== undefined) {
            queryParameters['topLevelDomain'] = requestParameters.topLevelDomain;
        }

        if (requestParameters.organizationName !== undefined) {
            queryParameters['organizationName'] = requestParameters.organizationName;
        }

        if (requestParameters.distance !== undefined) {
            queryParameters['distance'] = requestParameters.distance;
        }

        if (requestParameters.registeredDomain !== undefined) {
            queryParameters['registeredDomain'] = requestParameters.registeredDomain;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/discovery/ignorebyfilter`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Ignores discovery services for selected filters.
     */
    async discoveryIgnoreByFilter(requestParameters: DiscoveryApiDiscoveryIgnoreByFilterRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.discoveryIgnoreByFilterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list discovery services.
     */
    async discoveryListRaw(requestParameters: DiscoveryApiDiscoveryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscoveryServiceListApiResult>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/discovery/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscoveryServiceListApiResultFromJSON(jsonValue));
    }

    /**
     * Gets the list discovery services.
     */
    async discoveryList(requestParameters: DiscoveryApiDiscoveryListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscoveryServiceListApiResult> {
        const response = await this.discoveryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list discovery services with filter.
     */
    async discoveryListByFilterRaw(requestParameters: DiscoveryApiDiscoveryListByFilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscoveryServiceListApiResult>> {
        const queryParameters: any = {};

        if (requestParameters.authority !== undefined) {
            queryParameters['authority'] = requestParameters.authority;
        }

        if (requestParameters.ipAddress !== undefined) {
            queryParameters['ipAddress'] = requestParameters.ipAddress;
        }

        if (requestParameters.secondLevelDomain !== undefined) {
            queryParameters['secondLevelDomain'] = requestParameters.secondLevelDomain;
        }

        if (requestParameters.topLevelDomain !== undefined) {
            queryParameters['topLevelDomain'] = requestParameters.topLevelDomain;
        }

        if (requestParameters.organizationName !== undefined) {
            queryParameters['organizationName'] = requestParameters.organizationName;
        }

        if (requestParameters.distance !== undefined) {
            queryParameters['distance'] = requestParameters.distance;
        }

        if (requestParameters.registeredDomain !== undefined) {
            queryParameters['registeredDomain'] = requestParameters.registeredDomain;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/discovery/listbyfilter`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscoveryServiceListApiResultFromJSON(jsonValue));
    }

    /**
     * Gets the list discovery services with filter.
     */
    async discoveryListByFilter(requestParameters: DiscoveryApiDiscoveryListByFilterRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscoveryServiceListApiResult> {
        const response = await this.discoveryListByFilterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the discovery settings.
     */
    async discoverySettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscoverySettingsApiModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/discovery/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscoverySettingsApiModelFromJSON(jsonValue));
    }

    /**
     * Gets the discovery settings.
     */
    async discoverySettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscoverySettingsApiModel> {
        const response = await this.discoverySettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates discovery settings.
     */
    async discoveryUpdateSettingsRaw(requestParameters: DiscoveryApiDiscoveryUpdateSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscoverySettingsApiModel>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling discoveryUpdateSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/discovery/update-settings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DiscoverySettingsApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscoverySettingsApiModelFromJSON(jsonValue));
    }

    /**
     * Updates discovery settings.
     */
    async discoveryUpdateSettings(requestParameters: DiscoveryApiDiscoveryUpdateSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscoverySettingsApiModel> {
        const response = await this.discoveryUpdateSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum DiscoveryConnectionByIdTypeEnum {
    Aws = 'Aws'
}
/**
  * @export
  * @enum {string}
  */
export enum DiscoveryConnectionsTypeEnum {
    Aws = 'Aws'
}
/**
  * @export
  * @enum {string}
  */
export enum DiscoveryExportCsvSeparatorEnum {
    Comma = 'Comma',
    Semicolon = 'Semicolon',
    Pipe = 'Pipe',
    Tab = 'Tab'
}
/**
  * @export
  * @enum {string}
  */
export enum DiscoveryListByFilterStatusEnum {
    Discovered = 'Discovered',
    Ignored = 'Ignored',
    Created = 'Created'
}
