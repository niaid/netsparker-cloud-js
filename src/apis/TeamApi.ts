/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseApiModel,
  NewTeamApiModel,
  TeamApiModelListApiResult,
  TeamApiViewModel,
  UpdateTeamApiModel,
} from '../models/index';
import {
    BaseResponseApiModelFromJSON,
    BaseResponseApiModelToJSON,
    NewTeamApiModelFromJSON,
    NewTeamApiModelToJSON,
    TeamApiModelListApiResultFromJSON,
    TeamApiModelListApiResultToJSON,
    TeamApiViewModelFromJSON,
    TeamApiViewModelToJSON,
    UpdateTeamApiModelFromJSON,
    UpdateTeamApiModelToJSON,
} from '../models/index';

export interface TeamDeleteRequest {
    id: string;
}

export interface TeamGetRequest {
    id: string;
}

export interface TeamListRequest {
    page?: number;
    pageSize?: number;
}

export interface TeamNewRequest {
    model: NewTeamApiModel;
}

export interface TeamUpdateRequest {
    model: UpdateTeamApiModel;
}

/**
 * 
 */
export class TeamApi extends runtime.BaseAPI {

    /**
     * Deletes a team
     */
    async teamDeleteRaw(requestParameters: TeamDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling teamDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/team/delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Deletes a team
     */
    async teamDelete(requestParameters: TeamDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.teamDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the team by the specified id.
     */
    async teamGetRaw(requestParameters: TeamGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamApiViewModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling teamGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/team/get/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamApiViewModelFromJSON(jsonValue));
    }

    /**
     * Gets the team by the specified id.
     */
    async teamGet(requestParameters: TeamGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamApiViewModel> {
        const response = await this.teamGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of teams.
     */
    async teamListRaw(requestParameters: TeamListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamApiModelListApiResult>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/team/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamApiModelListApiResultFromJSON(jsonValue));
    }

    /**
     * Gets the list of teams.
     */
    async teamList(requestParameters: TeamListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamApiModelListApiResult> {
        const response = await this.teamListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new team
     */
    async teamNewRaw(requestParameters: TeamNewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamApiViewModel>> {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError(
                'model',
                'Required parameter "model" was null or undefined when calling teamNew().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/team/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewTeamApiModelToJSON(requestParameters['model']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamApiViewModelFromJSON(jsonValue));
    }

    /**
     * Creates a new team
     */
    async teamNew(requestParameters: TeamNewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamApiViewModel> {
        const response = await this.teamNewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a team
     */
    async teamUpdateRaw(requestParameters: TeamUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamApiViewModel>> {
        if (requestParameters['model'] == null) {
            throw new runtime.RequiredError(
                'model',
                'Required parameter "model" was null or undefined when calling teamUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/team/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTeamApiModelToJSON(requestParameters['model']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamApiViewModelFromJSON(jsonValue));
    }

    /**
     * Updates a team
     */
    async teamUpdate(requestParameters: TeamUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamApiViewModel> {
        const response = await this.teamUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
