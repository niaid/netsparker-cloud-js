/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteWebsiteGroupApiModel,
  DeleteWebsiteGroupResponse,
  NewWebsiteGroupApiModel,
  UpdateWebsiteGroupApiModel,
  WebsiteGroupApiModel,
  WebsiteGroupListApiResult,
} from '../models/index';
import {
    DeleteWebsiteGroupApiModelFromJSON,
    DeleteWebsiteGroupApiModelToJSON,
    DeleteWebsiteGroupResponseFromJSON,
    DeleteWebsiteGroupResponseToJSON,
    NewWebsiteGroupApiModelFromJSON,
    NewWebsiteGroupApiModelToJSON,
    UpdateWebsiteGroupApiModelFromJSON,
    UpdateWebsiteGroupApiModelToJSON,
    WebsiteGroupApiModelFromJSON,
    WebsiteGroupApiModelToJSON,
    WebsiteGroupListApiResultFromJSON,
    WebsiteGroupListApiResultToJSON,
} from '../models/index';

export interface WebsiteGroupsApiWebsiteGroupsDeleteRequest {
    model: DeleteWebsiteGroupApiModel;
}

export interface WebsiteGroupsApiWebsiteGroupsDeleteByIdRequest {
    id: string;
}

export interface WebsiteGroupsApiWebsiteGroupsGetByIdRequest {
    id: string;
}

export interface WebsiteGroupsApiWebsiteGroupsGetByQueryRequest {
    query: string;
}

export interface WebsiteGroupsApiWebsiteGroupsListRequest {
    page?: number;
    pageSize?: number;
}

export interface WebsiteGroupsApiWebsiteGroupsNewRequest {
    model: NewWebsiteGroupApiModel;
}

export interface WebsiteGroupsApiWebsiteGroupsUpdateRequest {
    model: UpdateWebsiteGroupApiModel;
}

/**
 * 
 */
export class WebsiteGroupsApi extends runtime.BaseAPI {

    /**
     * Deletes a website group.
     */
    async websiteGroupsDeleteRaw(requestParameters: WebsiteGroupsApiWebsiteGroupsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteWebsiteGroupResponse>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling websiteGroupsDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/websitegroups/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteWebsiteGroupApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteWebsiteGroupResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a website group.
     */
    async websiteGroupsDelete(requestParameters: WebsiteGroupsApiWebsiteGroupsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteWebsiteGroupResponse> {
        const response = await this.websiteGroupsDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a website group with given id
     */
    async websiteGroupsDeleteByIdRaw(requestParameters: WebsiteGroupsApiWebsiteGroupsDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteWebsiteGroupResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling websiteGroupsDeleteById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/websitegroups/delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteWebsiteGroupResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a website group with given id
     */
    async websiteGroupsDeleteById(requestParameters: WebsiteGroupsApiWebsiteGroupsDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteWebsiteGroupResponse> {
        const response = await this.websiteGroupsDeleteByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets website group by id.
     */
    async websiteGroupsGetByIdRaw(requestParameters: WebsiteGroupsApiWebsiteGroupsGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebsiteGroupApiModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling websiteGroupsGetById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/websitegroups/get/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteGroupApiModelFromJSON(jsonValue));
    }

    /**
     * Gets website group by id.
     */
    async websiteGroupsGetById(requestParameters: WebsiteGroupsApiWebsiteGroupsGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebsiteGroupApiModel> {
        const response = await this.websiteGroupsGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets website group by name.
     */
    async websiteGroupsGetByQueryRaw(requestParameters: WebsiteGroupsApiWebsiteGroupsGetByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebsiteGroupApiModel>> {
        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling websiteGroupsGetByQuery.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/websitegroups/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteGroupApiModelFromJSON(jsonValue));
    }

    /**
     * Gets website group by name.
     */
    async websiteGroupsGetByQuery(requestParameters: WebsiteGroupsApiWebsiteGroupsGetByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebsiteGroupApiModel> {
        const response = await this.websiteGroupsGetByQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of website groups.
     */
    async websiteGroupsListRaw(requestParameters: WebsiteGroupsApiWebsiteGroupsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebsiteGroupListApiResult>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/websitegroups/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteGroupListApiResultFromJSON(jsonValue));
    }

    /**
     * Gets the list of website groups.
     */
    async websiteGroupsList(requestParameters: WebsiteGroupsApiWebsiteGroupsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebsiteGroupListApiResult> {
        const response = await this.websiteGroupsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new website group.
     */
    async websiteGroupsNewRaw(requestParameters: WebsiteGroupsApiWebsiteGroupsNewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebsiteGroupApiModel>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling websiteGroupsNew.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/websitegroups/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewWebsiteGroupApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteGroupApiModelFromJSON(jsonValue));
    }

    /**
     * Creates a new website group.
     */
    async websiteGroupsNew(requestParameters: WebsiteGroupsApiWebsiteGroupsNewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebsiteGroupApiModel> {
        const response = await this.websiteGroupsNewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a website group.
     */
    async websiteGroupsUpdateRaw(requestParameters: WebsiteGroupsApiWebsiteGroupsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebsiteGroupApiModel>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling websiteGroupsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/websitegroups/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWebsiteGroupApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteGroupApiModelFromJSON(jsonValue));
    }

    /**
     * Updates a website group.
     */
    async websiteGroupsUpdate(requestParameters: WebsiteGroupsApiWebsiteGroupsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebsiteGroupApiModel> {
        const response = await this.websiteGroupsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
