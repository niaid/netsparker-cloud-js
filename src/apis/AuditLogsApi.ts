/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface AuditLogsApiAuditLogsExportRequest {
    page?: number;
    pageSize?: number;
    csvSeparator?: AuditLogsExportCsvSeparatorEnum;
    startDate?: Date;
    endDate?: Date;
}

export interface AuditLogsApiAuditLogsListRequest {
    page?: number;
    pageSize?: number;
    startDate?: Date;
    endDate?: Date;
}

/**
 * 
 */
export class AuditLogsApi extends runtime.BaseAPI {

    /**
     * Returns the selected log type in the csv format as a downloadable file.
     */
    async auditLogsExportRaw(requestParameters: AuditLogsApiAuditLogsExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.csvSeparator !== undefined) {
            queryParameters['csvSeparator'] = requestParameters.csvSeparator;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/auditlogs/export`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the selected log type in the csv format as a downloadable file.
     */
    async auditLogsExport(requestParameters: AuditLogsApiAuditLogsExportRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.auditLogsExportRaw(requestParameters, initOverrides);
    }

    /**
     * Gets the list of audit logs.
     */
    async auditLogsListRaw(requestParameters: AuditLogsApiAuditLogsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/auditlogs/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Gets the list of audit logs.
     */
    async auditLogsList(requestParameters: AuditLogsApiAuditLogsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.auditLogsListRaw(requestParameters, initOverrides);
    }

}

/**
  * @export
  * @enum {string}
  */
export enum AuditLogsExportCsvSeparatorEnum {
    Comma = 'Comma',
    Semicolon = 'Semicolon',
    Pipe = 'Pipe',
    Tab = 'Tab'
}
