/* tslint:disable */
/* eslint-disable */
/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiScanStatusModel,
  AuthVerificationApiResult,
  BaseScanApiModel,
  FormAuthenticationVerificationApiModel,
  IncrementalApiModel,
  NewGroupScanApiModel,
  NewScanTaskApiModel,
  NewScanTaskWithProfileApiModel,
  NewScheduledIncrementalScanApiModel,
  NewScheduledScanApiModel,
  NewScheduledWithProfileApiModel,
  ScanTaskListApiResult,
  ScanTaskModel,
  ScansValidateImportedLinksFileRequest,
  ScheduledScanListApiResult,
  TestScanProfileCredentialsRequestModel,
  UpdateScheduledIncrementalScanApiModel,
  UpdateScheduledScanApiModel,
  UpdateScheduledScanModel,
  VulnerabilityModel,
} from '../models/index';
import {
    ApiScanStatusModelFromJSON,
    ApiScanStatusModelToJSON,
    AuthVerificationApiResultFromJSON,
    AuthVerificationApiResultToJSON,
    BaseScanApiModelFromJSON,
    BaseScanApiModelToJSON,
    FormAuthenticationVerificationApiModelFromJSON,
    FormAuthenticationVerificationApiModelToJSON,
    IncrementalApiModelFromJSON,
    IncrementalApiModelToJSON,
    NewGroupScanApiModelFromJSON,
    NewGroupScanApiModelToJSON,
    NewScanTaskApiModelFromJSON,
    NewScanTaskApiModelToJSON,
    NewScanTaskWithProfileApiModelFromJSON,
    NewScanTaskWithProfileApiModelToJSON,
    NewScheduledIncrementalScanApiModelFromJSON,
    NewScheduledIncrementalScanApiModelToJSON,
    NewScheduledScanApiModelFromJSON,
    NewScheduledScanApiModelToJSON,
    NewScheduledWithProfileApiModelFromJSON,
    NewScheduledWithProfileApiModelToJSON,
    ScanTaskListApiResultFromJSON,
    ScanTaskListApiResultToJSON,
    ScanTaskModelFromJSON,
    ScanTaskModelToJSON,
    ScansValidateImportedLinksFileRequestFromJSON,
    ScansValidateImportedLinksFileRequestToJSON,
    ScheduledScanListApiResultFromJSON,
    ScheduledScanListApiResultToJSON,
    TestScanProfileCredentialsRequestModelFromJSON,
    TestScanProfileCredentialsRequestModelToJSON,
    UpdateScheduledIncrementalScanApiModelFromJSON,
    UpdateScheduledIncrementalScanApiModelToJSON,
    UpdateScheduledScanApiModelFromJSON,
    UpdateScheduledScanApiModelToJSON,
    UpdateScheduledScanModelFromJSON,
    UpdateScheduledScanModelToJSON,
    VulnerabilityModelFromJSON,
    VulnerabilityModelToJSON,
} from '../models/index';

export interface ScansCancelRequest {
    id: string;
}

export interface ScansCustomReportRequest {
    id: string;
    reportName: string;
    excludeIgnoreds?: boolean;
    onlyConfirmedVulnerabilities?: boolean;
    onlyUnconfirmedVulnerabilities?: boolean;
    reportFormat?: ScansCustomReportReportFormatEnum;
}

export interface ScansDeleteRequest {
    ids: Array<string>;
}

export interface ScansDetailRequest {
    id: string;
}

export interface ScansDownloadPciScanReportRequest {
    scanId: string;
    reportType: ScansDownloadPciScanReportReportTypeEnum;
}

export interface ScansDownloadScanFileRequest {
    scanId: string;
    isWindowsCompatible?: boolean;
}

export interface ScansDownloadScanFileCheckRequest {
    scanId: string;
}

export interface ScansIncrementalRequest {
    model: IncrementalApiModel;
}

export interface ScansListRequest {
    page?: number;
    pageSize?: number;
}

export interface ScansListByStateRequest {
    scanTaskState: ScansListByStateScanTaskStateEnum;
    targetUrlCriteria?: string;
    page?: number;
    pageSize?: number;
    startDate?: Date;
    endDate?: Date;
}

export interface ScansListByStateChangedRequest {
    startDate: Date;
    endDate: Date;
    page?: number;
    pageSize?: number;
}

export interface ScansListByWebsiteRequest {
    websiteUrl?: string;
    targetUrl?: string;
    page?: number;
    pageSize?: number;
    initiatedDateSortType?: ScansListByWebsiteInitiatedDateSortTypeEnum;
}

export interface ScansListScheduledRequest {
    page?: number;
    pageSize?: number;
}

export interface ScansNewRequest {
    model: NewScanTaskApiModel;
}

export interface ScansNewFromScanRequest {
    id: string;
}

export interface ScansNewGroupScanRequest {
    model: NewGroupScanApiModel;
}

export interface ScansNewWithProfileRequest {
    model: NewScanTaskWithProfileApiModel;
}

export interface ScansPauseRequest {
    id: string;
}

export interface ScansReportRequest {
    format: ScansReportFormatEnum;
    id: string;
    type: ScansReportTypeEnum;
    contentFormat?: ScansReportContentFormatEnum;
    excludeResponseData?: boolean;
    onlyConfirmedIssues?: boolean;
    onlyUnconfirmedIssues?: boolean;
    excludeAddressedIssues?: boolean;
    excludeHistoryOfIssues?: boolean;
}

export interface ScansResultRequest {
    id: string;
}

export interface ScansResumeRequest {
    id: string;
}

export interface ScansRetestRequest {
    model: BaseScanApiModel;
}

export interface ScansScheduleRequest {
    model: NewScheduledScanApiModel;
}

export interface ScansScheduleIncrementalRequest {
    model: NewScheduledIncrementalScanApiModel;
}

export interface ScansScheduleWithProfileRequest {
    model: NewScheduledWithProfileApiModel;
}

export interface ScansStatusRequest {
    id: string;
}

export interface ScansTestScanProfileCredentialsRequest {
    model: TestScanProfileCredentialsRequestModel;
}

export interface ScansUnscheduleRequest {
    id: string;
}

export interface ScansUpdateScheduledRequest {
    model: UpdateScheduledScanApiModel;
}

export interface ScansUpdateScheduledIncrementalRequest {
    model: UpdateScheduledIncrementalScanApiModel;
}

export interface ScansValidateImportedLinksFileOperationRequest {
    siteUrl: string;
    scansValidateImportedLinksFileRequest: ScansValidateImportedLinksFileRequest;
    importType?: ScansValidateImportedLinksFileImportTypeEnum;
}

export interface ScansVerifyFormAuthRequest {
    model: FormAuthenticationVerificationApiModel;
}

/**
 * 
 */
export class ScansApi extends runtime.BaseAPI {

    /**
     * Stops a scan in progress.
     */
    async scansCancelRaw(requestParameters: ScansCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling scansCancel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/scans/cancel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.id as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Stops a scan in progress.
     */
    async scansCancel(requestParameters: ScansCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.scansCancelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the custom report of a scan in the specified format.
     */
    async scansCustomReportRaw(requestParameters: ScansCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling scansCustomReport.');
        }

        if (requestParameters.reportName === null || requestParameters.reportName === undefined) {
            throw new runtime.RequiredError('reportName','Required parameter requestParameters.reportName was null or undefined when calling scansCustomReport.');
        }

        const queryParameters: any = {};

        if (requestParameters.excludeIgnoreds !== undefined) {
            queryParameters['excludeIgnoreds'] = requestParameters.excludeIgnoreds;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.onlyConfirmedVulnerabilities !== undefined) {
            queryParameters['onlyConfirmedVulnerabilities'] = requestParameters.onlyConfirmedVulnerabilities;
        }

        if (requestParameters.onlyUnconfirmedVulnerabilities !== undefined) {
            queryParameters['onlyUnconfirmedVulnerabilities'] = requestParameters.onlyUnconfirmedVulnerabilities;
        }

        if (requestParameters.reportName !== undefined) {
            queryParameters['reportName'] = requestParameters.reportName;
        }

        if (requestParameters.reportFormat !== undefined) {
            queryParameters['reportFormat'] = requestParameters.reportFormat;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/scans/custom-report/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the custom report of a scan in the specified format.
     */
    async scansCustomReport(requestParameters: ScansCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scansCustomReportRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes scan data.
     */
    async scansDeleteRaw(requestParameters: ScansDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError('ids','Required parameter requestParameters.ids was null or undefined when calling scansDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/scans/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.ids,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Deletes scan data.
     */
    async scansDelete(requestParameters: ScansDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.scansDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the detail of a scan.
     */
    async scansDetailRaw(requestParameters: ScansDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanTaskModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling scansDetail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/scans/detail/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScanTaskModelFromJSON(jsonValue));
    }

    /**
     * Gets the detail of a scan.
     */
    async scansDetail(requestParameters: ScansDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanTaskModel> {
        const response = await this.scansDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Downloads the pci scan report based on report type
     */
    async scansDownloadPciScanReportRaw(requestParameters: ScansDownloadPciScanReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.scanId === null || requestParameters.scanId === undefined) {
            throw new runtime.RequiredError('scanId','Required parameter requestParameters.scanId was null or undefined when calling scansDownloadPciScanReport.');
        }

        if (requestParameters.reportType === null || requestParameters.reportType === undefined) {
            throw new runtime.RequiredError('reportType','Required parameter requestParameters.reportType was null or undefined when calling scansDownloadPciScanReport.');
        }

        const queryParameters: any = {};

        if (requestParameters.scanId !== undefined) {
            queryParameters['scanId'] = requestParameters.scanId;
        }

        if (requestParameters.reportType !== undefined) {
            queryParameters['reportType'] = requestParameters.reportType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/scans/downloadpciscanreport`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads the pci scan report based on report type
     */
    async scansDownloadPciScanReport(requestParameters: ScansDownloadPciScanReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.scansDownloadPciScanReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Downloads the scan file as zip
     */
    async scansDownloadScanFileRaw(requestParameters: ScansDownloadScanFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.scanId === null || requestParameters.scanId === undefined) {
            throw new runtime.RequiredError('scanId','Required parameter requestParameters.scanId was null or undefined when calling scansDownloadScanFile.');
        }

        const queryParameters: any = {};

        if (requestParameters.scanId !== undefined) {
            queryParameters['scanId'] = requestParameters.scanId;
        }

        if (requestParameters.isWindowsCompatible !== undefined) {
            queryParameters['isWindowsCompatible'] = requestParameters.isWindowsCompatible;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/scans/downloadscanfile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads the scan file as zip
     */
    async scansDownloadScanFile(requestParameters: ScansDownloadScanFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.scansDownloadScanFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Downloads the scan file as zip
     */
    async scansDownloadScanFileCheckRaw(requestParameters: ScansDownloadScanFileCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.scanId === null || requestParameters.scanId === undefined) {
            throw new runtime.RequiredError('scanId','Required parameter requestParameters.scanId was null or undefined when calling scansDownloadScanFileCheck.');
        }

        const queryParameters: any = {};

        if (requestParameters.scanId !== undefined) {
            queryParameters['scanId'] = requestParameters.scanId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/scans/downloadscanfilecheck`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Downloads the scan file as zip
     */
    async scansDownloadScanFileCheck(requestParameters: ScansDownloadScanFileCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.scansDownloadScanFileCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Launches an incremental scan based on the provided base scan identifier.
     */
    async scansIncrementalRaw(requestParameters: ScansIncrementalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanTaskModel>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling scansIncremental.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/scans/incremental`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IncrementalApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScanTaskModelFromJSON(jsonValue));
    }

    /**
     * Launches an incremental scan based on the provided base scan identifier.
     */
    async scansIncremental(requestParameters: ScansIncrementalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanTaskModel> {
        const response = await this.scansIncrementalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of scans and their details.
     */
    async scansListRaw(requestParameters: ScansListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanTaskListApiResult>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/scans/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScanTaskListApiResultFromJSON(jsonValue));
    }

    /**
     * Gets the list of scans and their details.
     */
    async scansList(requestParameters: ScansListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanTaskListApiResult> {
        const response = await this.scansListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of scans by state
     */
    async scansListByStateRaw(requestParameters: ScansListByStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanTaskListApiResult>> {
        if (requestParameters.scanTaskState === null || requestParameters.scanTaskState === undefined) {
            throw new runtime.RequiredError('scanTaskState','Required parameter requestParameters.scanTaskState was null or undefined when calling scansListByState.');
        }

        const queryParameters: any = {};

        if (requestParameters.scanTaskState !== undefined) {
            queryParameters['scanTaskState'] = requestParameters.scanTaskState;
        }

        if (requestParameters.targetUrlCriteria !== undefined) {
            queryParameters['targetUrlCriteria'] = requestParameters.targetUrlCriteria;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/scans/listbystate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScanTaskListApiResultFromJSON(jsonValue));
    }

    /**
     * Gets the list of scans by state
     */
    async scansListByState(requestParameters: ScansListByStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanTaskListApiResult> {
        const response = await this.scansListByStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of scans by stateChanged
     */
    async scansListByStateChangedRaw(requestParameters: ScansListByStateChangedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanTaskListApiResult>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling scansListByStateChanged.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling scansListByStateChanged.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/scans/listbystatechanged`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScanTaskListApiResultFromJSON(jsonValue));
    }

    /**
     * Gets the list of scans by stateChanged
     */
    async scansListByStateChanged(requestParameters: ScansListByStateChangedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanTaskListApiResult> {
        const response = await this.scansListByStateChangedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of scans and their details.
     */
    async scansListByWebsiteRaw(requestParameters: ScansListByWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanTaskListApiResult>> {
        const queryParameters: any = {};

        if (requestParameters.websiteUrl !== undefined) {
            queryParameters['websiteUrl'] = requestParameters.websiteUrl;
        }

        if (requestParameters.targetUrl !== undefined) {
            queryParameters['targetUrl'] = requestParameters.targetUrl;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.initiatedDateSortType !== undefined) {
            queryParameters['initiatedDateSortType'] = requestParameters.initiatedDateSortType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/scans/listbywebsite`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScanTaskListApiResultFromJSON(jsonValue));
    }

    /**
     * Gets the list of scans and their details.
     */
    async scansListByWebsite(requestParameters: ScansListByWebsiteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanTaskListApiResult> {
        const response = await this.scansListByWebsiteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of scheduled scans which are scheduled to be launched in the future.
     */
    async scansListScheduledRaw(requestParameters: ScansListScheduledRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduledScanListApiResult>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/scans/list-scheduled`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduledScanListApiResultFromJSON(jsonValue));
    }

    /**
     * Gets the list of scheduled scans which are scheduled to be launched in the future.
     */
    async scansListScheduled(requestParameters: ScansListScheduledRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduledScanListApiResult> {
        const response = await this.scansListScheduledRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Launches a new scan.
     */
    async scansNewRaw(requestParameters: ScansNewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ScanTaskModel>>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling scansNew.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/scans/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewScanTaskApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScanTaskModelFromJSON));
    }

    /**
     * Launches a new scan.
     */
    async scansNew(requestParameters: ScansNewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ScanTaskModel>> {
        const response = await this.scansNewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Launches a new scan with same configuration from the scan specified with scan id.
     */
    async scansNewFromScanRaw(requestParameters: ScansNewFromScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanTaskModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling scansNewFromScan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/scans/newfromscan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.id as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScanTaskModelFromJSON(jsonValue));
    }

    /**
     * Launches a new scan with same configuration from the scan specified with scan id.
     */
    async scansNewFromScan(requestParameters: ScansNewFromScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanTaskModel> {
        const response = await this.scansNewFromScanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Launches a new group scan.
     */
    async scansNewGroupScanRaw(requestParameters: ScansNewGroupScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ScanTaskModel>>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling scansNewGroupScan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/scans/newgroupscan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewGroupScanApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScanTaskModelFromJSON));
    }

    /**
     * Launches a new group scan.
     */
    async scansNewGroupScan(requestParameters: ScansNewGroupScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ScanTaskModel>> {
        const response = await this.scansNewGroupScanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Launches a new scan with profile id.
     */
    async scansNewWithProfileRaw(requestParameters: ScansNewWithProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanTaskModel>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling scansNewWithProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/scans/newwithprofile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewScanTaskWithProfileApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScanTaskModelFromJSON(jsonValue));
    }

    /**
     * Launches a new scan with profile id.
     */
    async scansNewWithProfile(requestParameters: ScansNewWithProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanTaskModel> {
        const response = await this.scansNewWithProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Pauses a scan in progress.
     */
    async scansPauseRaw(requestParameters: ScansPauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling scansPause.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/scans/pause`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.id as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Pauses a scan in progress.
     */
    async scansPause(requestParameters: ScansPauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.scansPauseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Pausing scans in Scanning status.
     */
    async scansPauseActiveScansRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/scans/pause-active-scans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Pausing scans in Scanning status.
     */
    async scansPauseActiveScans(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.scansPauseActiveScansRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the report of a scan in the specified format.
     */
    async scansReportRaw(requestParameters: ScansReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling scansReport.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling scansReport.');
        }

        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling scansReport.');
        }

        const queryParameters: any = {};

        if (requestParameters.contentFormat !== undefined) {
            queryParameters['contentFormat'] = requestParameters.contentFormat;
        }

        if (requestParameters.excludeResponseData !== undefined) {
            queryParameters['excludeResponseData'] = requestParameters.excludeResponseData;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.onlyConfirmedIssues !== undefined) {
            queryParameters['onlyConfirmedIssues'] = requestParameters.onlyConfirmedIssues;
        }

        if (requestParameters.onlyUnconfirmedIssues !== undefined) {
            queryParameters['onlyUnconfirmedIssues'] = requestParameters.onlyUnconfirmedIssues;
        }

        if (requestParameters.excludeAddressedIssues !== undefined) {
            queryParameters['excludeAddressedIssues'] = requestParameters.excludeAddressedIssues;
        }

        if (requestParameters.excludeHistoryOfIssues !== undefined) {
            queryParameters['excludeHistoryOfIssues'] = requestParameters.excludeHistoryOfIssues;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/scans/report/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Returns the report of a scan in the specified format.
     */
    async scansReport(requestParameters: ScansReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.scansReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the result of a scan.
     */
    async scansResultRaw(requestParameters: ScansResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VulnerabilityModel>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling scansResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/scans/result/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VulnerabilityModelFromJSON));
    }

    /**
     * Gets the result of a scan.
     */
    async scansResult(requestParameters: ScansResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VulnerabilityModel>> {
        const response = await this.scansResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resumes a paused scan.
     */
    async scansResumeRaw(requestParameters: ScansResumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling scansResume.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/scans/resume`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.id as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Resumes a paused scan.
     */
    async scansResume(requestParameters: ScansResumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.scansResumeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resuming \"Paused scans\" with the Pause active scan endpoint.
     */
    async scansResumePausedScansRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/scans/resume-paused-scans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Resuming \"Paused scans\" with the Pause active scan endpoint.
     */
    async scansResumePausedScans(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.scansResumePausedScansRaw(initOverrides);
        return await response.value();
    }

    /**
     * Launches a retest scan based on the provided base scan identifier.
     */
    async scansRetestRaw(requestParameters: ScansRetestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanTaskModel>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling scansRetest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/scans/retest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BaseScanApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScanTaskModelFromJSON(jsonValue));
    }

    /**
     * Launches a retest scan based on the provided base scan identifier.
     */
    async scansRetest(requestParameters: ScansRetestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanTaskModel> {
        const response = await this.scansRetestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Schedules a scan to be launched in the future.
     */
    async scansScheduleRaw(requestParameters: ScansScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateScheduledScanModel>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling scansSchedule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/scans/schedule`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewScheduledScanApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateScheduledScanModelFromJSON(jsonValue));
    }

    /**
     * Schedules a scan to be launched in the future.
     */
    async scansSchedule(requestParameters: ScansScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateScheduledScanModel> {
        const response = await this.scansScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Schedules an incremental scan to be launched in the future.
     */
    async scansScheduleIncrementalRaw(requestParameters: ScansScheduleIncrementalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateScheduledScanModel>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling scansScheduleIncremental.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/scans/schedule-incremental`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewScheduledIncrementalScanApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateScheduledScanModelFromJSON(jsonValue));
    }

    /**
     * Schedules an incremental scan to be launched in the future.
     */
    async scansScheduleIncremental(requestParameters: ScansScheduleIncrementalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateScheduledScanModel> {
        const response = await this.scansScheduleIncrementalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Schedules a scan by a profile to be launched in the future.
     */
    async scansScheduleWithProfileRaw(requestParameters: ScansScheduleWithProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateScheduledScanModel>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling scansScheduleWithProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/scans/schedulewithprofile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewScheduledWithProfileApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateScheduledScanModelFromJSON(jsonValue));
    }

    /**
     * Schedules a scan by a profile to be launched in the future.
     */
    async scansScheduleWithProfile(requestParameters: ScansScheduleWithProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateScheduledScanModel> {
        const response = await this.scansScheduleWithProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the status of a scan.
     */
    async scansStatusRaw(requestParameters: ScansStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiScanStatusModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling scansStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1.0/scans/status/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiScanStatusModelFromJSON(jsonValue));
    }

    /**
     * Gets the status of a scan.
     */
    async scansStatus(requestParameters: ScansStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiScanStatusModel> {
        const response = await this.scansStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Tests the credentials of scan profile for specific url.
     */
    async scansTestScanProfileCredentialsRaw(requestParameters: ScansTestScanProfileCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestScanProfileCredentialsRequestModel>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling scansTestScanProfileCredentials.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/scans/test-scan-profile-credentials`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TestScanProfileCredentialsRequestModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestScanProfileCredentialsRequestModelFromJSON(jsonValue));
    }

    /**
     * Tests the credentials of scan profile for specific url.
     */
    async scansTestScanProfileCredentials(requestParameters: ScansTestScanProfileCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestScanProfileCredentialsRequestModel> {
        const response = await this.scansTestScanProfileCredentialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes and deletes a scheduled scan.
     */
    async scansUnscheduleRaw(requestParameters: ScansUnscheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling scansUnschedule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/scans/unschedule`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.id as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes and deletes a scheduled scan.
     */
    async scansUnschedule(requestParameters: ScansUnscheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scansUnscheduleRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a scheduled scan.
     */
    async scansUpdateScheduledRaw(requestParameters: ScansUpdateScheduledRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateScheduledScanApiModel>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling scansUpdateScheduled.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/scans/update-scheduled`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateScheduledScanApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateScheduledScanApiModelFromJSON(jsonValue));
    }

    /**
     * Updates a scheduled scan.
     */
    async scansUpdateScheduled(requestParameters: ScansUpdateScheduledRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateScheduledScanApiModel> {
        const response = await this.scansUpdateScheduledRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an incremental scheduled scan.
     */
    async scansUpdateScheduledIncrementalRaw(requestParameters: ScansUpdateScheduledIncrementalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateScheduledIncrementalScanApiModel>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling scansUpdateScheduledIncremental.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/scans/update-scheduled-incremental`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateScheduledIncrementalScanApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateScheduledIncrementalScanApiModelFromJSON(jsonValue));
    }

    /**
     * Updates an incremental scheduled scan.
     */
    async scansUpdateScheduledIncremental(requestParameters: ScansUpdateScheduledIncrementalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateScheduledIncrementalScanApiModel> {
        const response = await this.scansUpdateScheduledIncrementalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async scansValidateImportedLinksFileRaw(requestParameters: ScansValidateImportedLinksFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.siteUrl === null || requestParameters.siteUrl === undefined) {
            throw new runtime.RequiredError('siteUrl','Required parameter requestParameters.siteUrl was null or undefined when calling scansValidateImportedLinksFile.');
        }

        if (requestParameters.scansValidateImportedLinksFileRequest === null || requestParameters.scansValidateImportedLinksFileRequest === undefined) {
            throw new runtime.RequiredError('scansValidateImportedLinksFileRequest','Required parameter requestParameters.scansValidateImportedLinksFileRequest was null or undefined when calling scansValidateImportedLinksFile.');
        }

        const queryParameters: any = {};

        if (requestParameters.siteUrl !== undefined) {
            queryParameters['siteUrl'] = requestParameters.siteUrl;
        }

        if (requestParameters.importType !== undefined) {
            queryParameters['importType'] = requestParameters.importType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/form-data';

        const response = await this.request({
            path: `/api/1.0/scans/validate-imported-links-file`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScansValidateImportedLinksFileRequestToJSON(requestParameters.scansValidateImportedLinksFileRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async scansValidateImportedLinksFile(requestParameters: ScansValidateImportedLinksFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.scansValidateImportedLinksFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verifies the specified form authentication settings.
     */
    async scansVerifyFormAuthRaw(requestParameters: ScansVerifyFormAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthVerificationApiResult>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling scansVerifyFormAuth.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/1.0/scans/verifyformauth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FormAuthenticationVerificationApiModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthVerificationApiResultFromJSON(jsonValue));
    }

    /**
     * Verifies the specified form authentication settings.
     */
    async scansVerifyFormAuth(requestParameters: ScansVerifyFormAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthVerificationApiResult> {
        const response = await this.scansVerifyFormAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ScansCustomReportReportFormatEnum = {
    Xml: 'Xml',
    Csv: 'Csv',
    Pdf: 'Pdf',
    Html: 'Html',
    Txt: 'Txt',
    Json: 'Json'
} as const;
export type ScansCustomReportReportFormatEnum = typeof ScansCustomReportReportFormatEnum[keyof typeof ScansCustomReportReportFormatEnum];
/**
 * @export
 */
export const ScansDownloadPciScanReportReportTypeEnum = {
    Attestation: 'Attestation',
    Detailed: 'Detailed',
    Executive: 'Executive'
} as const;
export type ScansDownloadPciScanReportReportTypeEnum = typeof ScansDownloadPciScanReportReportTypeEnum[keyof typeof ScansDownloadPciScanReportReportTypeEnum];
/**
 * @export
 */
export const ScansListByStateScanTaskStateEnum = {
    Queued: 'Queued',
    Scanning: 'Scanning',
    Archiving: 'Archiving',
    Complete: 'Complete',
    Failed: 'Failed',
    Cancelled: 'Cancelled',
    Delayed: 'Delayed',
    Pausing: 'Pausing',
    Paused: 'Paused',
    Resuming: 'Resuming',
    AsyncArchiving: 'AsyncArchiving'
} as const;
export type ScansListByStateScanTaskStateEnum = typeof ScansListByStateScanTaskStateEnum[keyof typeof ScansListByStateScanTaskStateEnum];
/**
 * @export
 */
export const ScansListByWebsiteInitiatedDateSortTypeEnum = {
    Ascending: 'Ascending',
    Descending: 'Descending'
} as const;
export type ScansListByWebsiteInitiatedDateSortTypeEnum = typeof ScansListByWebsiteInitiatedDateSortTypeEnum[keyof typeof ScansListByWebsiteInitiatedDateSortTypeEnum];
/**
 * @export
 */
export const ScansReportFormatEnum = {
    Xml: 'Xml',
    Csv: 'Csv',
    Pdf: 'Pdf',
    Html: 'Html',
    Txt: 'Txt',
    Json: 'Json'
} as const;
export type ScansReportFormatEnum = typeof ScansReportFormatEnum[keyof typeof ScansReportFormatEnum];
/**
 * @export
 */
export const ScansReportTypeEnum = {
    Crawled: 'Crawled',
    Scanned: 'Scanned',
    Vulnerabilities: 'Vulnerabilities',
    ScanDetail: 'ScanDetail',
    ModSecurityWafRules: 'ModSecurityWafRules',
    OwaspTopTen2013: 'OwaspTopTen2013',
    HipaaCompliance: 'HIPAACompliance',
    Pci32: 'Pci32',
    KnowledgeBase: 'KnowledgeBase',
    ExecutiveSummary: 'ExecutiveSummary',
    FullScanDetail: 'FullScanDetail',
    OwaspTopTen2017: 'OwaspTopTen2017',
    CustomReport: 'CustomReport',
    Iso27001Compliance: 'Iso27001Compliance',
    F5BigIpAsmWafRules: 'F5BigIpAsmWafRules',
    Wasc: 'WASC',
    SansTop25: 'SansTop25',
    Asvs40: 'Asvs40',
    Nistsp80053: 'Nistsp80053',
    DisaStig: 'DisaStig',
    OwaspApiTop10: 'OwaspApiTop10',
    OwaspTopTen2021: 'OwaspTopTen2021',
    VulnerabilitiesPerWebsite: 'VulnerabilitiesPerWebsite',
    OwaspApiTopTen2023: 'OwaspApiTopTen2023',
    PciDss40: 'PciDss40'
} as const;
export type ScansReportTypeEnum = typeof ScansReportTypeEnum[keyof typeof ScansReportTypeEnum];
/**
 * @export
 */
export const ScansReportContentFormatEnum = {
    Html: 'Html',
    Markdown: 'Markdown'
} as const;
export type ScansReportContentFormatEnum = typeof ScansReportContentFormatEnum[keyof typeof ScansReportContentFormatEnum];
/**
 * @export
 */
export const ScansValidateImportedLinksFileOperationImportTypeEnum = {
    None: 'None',
    Fiddler: 'Fiddler',
    Burp: 'Burp',
    Swagger: 'Swagger',
    OwaspZap: 'OwaspZap',
    AspNet: 'AspNet',
    HttpArchive: 'HttpArchive',
    Wadl: 'Wadl',
    Wsdl: 'Wsdl',
    Postman: 'Postman',
    InvictiSessionFile: 'InvictiSessionFile',
    CsvImporter: 'CsvImporter',
    Iodocs: 'Iodocs',
    WordPress: 'WordPress',
    Raml: 'Raml',
    GraphQl: 'GraphQl'
} as const;
export type ScansValidateImportedLinksFileOperationImportTypeEnum = typeof ScansValidateImportedLinksFileOperationImportTypeEnum[keyof typeof ScansValidateImportedLinksFileOperationImportTypeEnum];
